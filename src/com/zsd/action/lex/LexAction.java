/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.zsd.action.lex;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.zsd.action.base.Transcode;
import com.zsd.factory.AppFactory;
import com.zsd.module.LexInfo;
import com.zsd.module.LexLoreRelateInfo;
import com.zsd.module.LoreInfo;
import com.zsd.module.LoreQuestion;
import com.zsd.page.PageConst;
import com.zsd.service.LexInfoManager;
import com.zsd.service.LoreQuestionManager;
import com.zsd.tools.CommonTools;
import com.zsd.tools.Convert;
import com.zsd.util.Constants;

/** 
 * MyEclipse Struts
 * Creation date: 05-21-2019
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class LexAction extends DispatchAction {
	
	
	/**
	 * 导向词库管理页面
	 * @author wm
	 * @date 2019-5-21 上午11:24:00
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward goLexPage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		return mapping.findForward("lexPage");
	}
	
	/**
	 * 分页获取词库列表
	 * @author wm
	 * @date 2019-5-21 上午11:24:33
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception 
	 */
	public ActionForward getPageLexInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		LexInfoManager lexm = (LexInfoManager) AppFactory.instance(null).getApp(Constants.WEB_LEX_INFO);
		String lexTitle = Transcode.unescape_new1("lexTitle", request);
		String lexTitlePy = CommonTools.getFinalStr("lexTitlePy", request);
		Integer count = lexm.getCountByOpt(lexTitle, lexTitlePy);
		String msg = "暂无记录";
		Map<String,Object> map = new HashMap<String,Object>();
		if(count > 0){
			msg = "success";
			List<Object> list_d = new ArrayList<Object>();
			Integer pageSize = PageConst.getPageSize(String.valueOf(request.getParameter("limit")), 10);//等同于pageSize
			Integer pageNo = CommonTools.getFinalInteger("page", request);//等同于pageNo
			List<LexInfo>  lexList = lexm.listPageInfoByOpt(lexTitle, lexTitlePy, pageNo, pageSize);
			for(Iterator<LexInfo> it = lexList.iterator() ; it.hasNext();){
				LexInfo lex = it.next();
				Map<String,Object> map_d = new HashMap<String,Object>();
				map_d.put("id", lex.getId());
				map_d.put("lexTitle", lex.getLexContent());
				map_d.put("lexTitlePy", lex.getLexTitlePy());
				map_d.put("lexContent", lex.getLexContent());
				list_d.add(map_d);
			}
			map.put("data", list_d);
			map.put("count", count);
			map.put("code", 0);
		}
		map.put("msg", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 获取词库的详情
	 * @author wm
	 * @date 2019-5-21 上午11:36:27
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getLexDetail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		LexInfoManager lexm = (LexInfoManager) AppFactory.instance(null).getApp(Constants.WEB_LEX_INFO);
		Integer lexId = CommonTools.getFinalInteger("lexId", request);
		String msg = "noInfo";
		Map<String,Object> map = new HashMap<String,Object>();
		LexInfo lex = lexm.getEntityById(lexId);
		if(lex != null){
			msg = "success";
			map.put("id", lex.getId());
			map.put("lexTitle", lex.getLexContent());
			map.put("lexTitlePy", lex.getLexTitlePy());
			map.put("lexContent", lex.getLexContent());
			//获取该词库关联的知识点
			List<LexLoreRelateInfo>  llrList = lexm.listInfoByOpt(lexId, 0);
			List<Object> list_d = new ArrayList<Object>();
			for(Iterator<LexLoreRelateInfo> it = llrList.iterator() ; it.hasNext();){
				LexLoreRelateInfo llr = it.next();
				LoreInfo lore = llr.getLoreInfo();
				Map<String,Object> map_d = new HashMap<String,Object>();
				map_d.put("llrId",llr.getId());
				map_d.put("loreId", lore.getId());
				map_d.put("loreName", lore.getLoreName());
				list_d.add(map_d);
			}
			map.put("loreList", list_d);
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 增加词库
	 * @author wm
	 * @date 2019-5-21 上午11:44:44
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward addLex(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		LexInfoManager lexm = (LexInfoManager) AppFactory.instance(null).getApp(Constants.WEB_LEX_INFO);
		String lexTitle = Transcode.unescape_new1("lexTitle", request);
		String lexTitlePy = Convert.getFirstSpell(lexTitle);
		String lexContent = Transcode.unescape_new1("lexContent", request);
		Map<String,Object> map = new HashMap<String,Object>();
		lexm.addLex(lexTitle, lexTitlePy, lexContent);
		map.put("result", "success");
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 修改词库
	 * @author wm
	 * @date 2019-5-21 上午11:45:01
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward updateLex(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		LexInfoManager lexm = (LexInfoManager) AppFactory.instance(null).getApp(Constants.WEB_LEX_INFO);
		Integer lexId = CommonTools.getFinalInteger("lexId", request);
		String lexTitle = Transcode.unescape_new1("lexTitle", request);
		String lexTitlePy = Convert.getFirstSpell(lexTitle);
		String lexContent = Transcode.unescape_new1("lexContent", request);
		String msg = "error";
		Map<String,Object> map = new HashMap<String,Object>();
		boolean flag = lexm.updateLexById(lexId, lexTitle, lexTitlePy, lexContent);
		if(flag){
			msg = "success";
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 删除词库
	 * @author wm
	 * @date 2019-5-21 下午02:56:40
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward delLex(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		LexInfoManager lexm = (LexInfoManager) AppFactory.instance(null).getApp(Constants.WEB_LEX_INFO);
		LoreQuestionManager lqm = (LoreQuestionManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_QUESTION_INFO);
		Integer lexId = CommonTools.getFinalInteger("lexId", request);
		String msg = "error";
		Map<String,Object> map = new HashMap<String,Object>();
		//修改之前先修改词库联着题库的tipId
		List<LoreQuestion> lqList = lqm.listInfoByLexId(lexId);
		for(Iterator<LoreQuestion> it = lqList.iterator() ; it.hasNext();){
			LoreQuestion lq = it.next();
			lqm.updateSimpleInfoByLqId(lq.getId(), 0, 0);
		}
		List<LexLoreRelateInfo>  llrList = lexm.listInfoByOpt(lexId, 0);
		for(Iterator<LexLoreRelateInfo> it = llrList.iterator() ; it.hasNext();){
			LexLoreRelateInfo llr = it.next();
			lexm.delLLRById(llr.getId());
		}
		//删除知识点词库关联信息
		boolean flag = lexm.delLexById(lexId);
		if(flag){
			msg = "success";
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 增加指定词库的知识点关联信息
	 * @author wm
	 * @date 2019-5-21 下午03:10:05
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward addLLR(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		LexInfoManager lexm = (LexInfoManager) AppFactory.instance(null).getApp(Constants.WEB_LEX_INFO);
		Integer lexId = CommonTools.getFinalInteger("lexId", request);
		Integer loreId = CommonTools.getFinalInteger("loreId", request);
		Map<String,Object> map = new HashMap<String,Object>();
		lexm.addLLR(lexId, loreId);
		map.put("result", "success");
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 删除指定的词库关联知识点信息
	 * @author wm
	 * @date 2019-5-21 下午03:10:35
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward delLLR(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		LexInfoManager lexm = (LexInfoManager) AppFactory.instance(null).getApp(Constants.WEB_LEX_INFO);
		Integer llrId = CommonTools.getFinalInteger("llrId", request);
		Map<String,Object> map = new HashMap<String,Object>();
		lexm.delLLRById(llrId);
		map.put("result", "success");
		CommonTools.getJsonPkg(map, response);
		return null;
	}
}