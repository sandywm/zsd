/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.zsd.action.pay;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.zsd.factory.AppFactory;
import com.zsd.module.ClassInfo;
import com.zsd.module.InviteCodeInfo;
import com.zsd.module.NetTeacherInfo;
import com.zsd.module.NetTeacherStudent;
import com.zsd.module.School;
import com.zsd.module.StudentParentInfo;
import com.zsd.module.StudentPayOrderInfo;
import com.zsd.module.SysFeeInfo;
import com.zsd.module.User;
import com.zsd.module.UserClassInfo;
import com.zsd.service.InviteCodeInfoManager;
import com.zsd.service.NetTeacherInfoManager;
import com.zsd.service.NetTeacherStudentManager;
import com.zsd.service.SchoolManager;
import com.zsd.service.StudentParentInfoManager;
import com.zsd.service.StudentPayOrderInfoManager;
import com.zsd.service.SysFeeManager;
import com.zsd.service.UserClassInfoManager;
import com.zsd.service.UserManager;
import com.zsd.tools.CommonTools;
import com.zsd.tools.Convert;
import com.zsd.tools.CurrentTime;
import com.zsd.tools.InviteCode;
import com.zsd.util.Constants;

/** 
 * MyEclipse Struts
 * Creation date: 09-10-2019
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class PayAction extends DispatchAction {
	
	/**
	 * 导向 在线购买服务费页面
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward goOnlineFeePage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		return mapping.findForward("onlineFeePage");
	}
	
	/**
	 * 获取在线购买 会员时的费用 
	 * 每月按照30天计算
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception 
	 */
	public ActionForward getOnlineFee(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		SysFeeManager sfm = (SysFeeManager) AppFactory.instance(null).getApp(Constants.WEB_SYS_FEE_INFO);
		UserClassInfoManager ucm = (UserClassInfoManager) AppFactory.instance(null).getApp(Constants.WEB_USER_CLASS_INFO);
		Integer stuId = CommonTools.getLoginUserId(request);
		Integer roleId  = CommonTools.getLoginRoleId(request);
		Integer selMonth = CommonTools.getFinalInteger("selMonth", request);//默认进来为一个月
		Integer feeType = 2;//费用类型(1:导师费,2:会员费)
		Integer fee = 0;//购买所需费用
		String msg = "error";
		String feeOpt = "sameFee";
		Double zkRate = 0.0;
		Map<String,Object> map = new HashMap<String,Object>();
		if(selMonth.equals(0)){
			selMonth = 1;
		}
		if(stuId > 0 && roleId.equals(Constants.STU_ROLE_ID) && selMonth > 0 && selMonth <= 12){
			//获取当前学生能购买的的时长（最大到升学日期）不足一月按一月计算
			List<UserClassInfo> uList = ucm.listInfoByOpt_1(stuId, roleId);
			if(uList.size() > 0){
				zkRate = CommonTools.getZkRate(selMonth);
				UserClassInfo uc = uList.get(0);
				User user = uc.getUser();
				ClassInfo c = uc.getClassInfo();
				String buildClassDate = c.getBuildeClassDate();
				String currDate = CurrentTime.getStringDate();
				String endDate = user.getEndDate();
				String endDate_fee = CurrentTime.getStringDate();//会员到期日，已到期时默认为当前日期
				Integer currUserGradeNumber_curr = 0;//当前会员到期日所在的年级
				//判断会员有无过期
				if(CurrentTime.compareDate(currDate, endDate) > 0){//会员没过期
					//计算endDate时的所在年级
					currUserGradeNumber_curr = Convert.dateConvertGradeNumber(endDate,buildClassDate);
					endDate_fee = endDate;
				}else{
					//计算出当前学生今天所在的年级
					currUserGradeNumber_curr = Convert.dateConvertGradeNumber(buildClassDate);
				}
				String gradeName_curr = Convert.NunberConvertChinese(currUserGradeNumber_curr);;
				//会员到期日+购买时长后的日期
				String endDate_new = CurrentTime.getFinalDate(endDate_fee, selMonth * 30);//购买会员后的新的到期日
				//获取购买会员后新的会员到期日后所在的年级
				Integer currUserGradeNumber_new = Convert.dateConvertGradeNumber(endDate_new,buildClassDate);//购买会员费后到期日所在的年级号
				String gradeName_new = Convert.NunberConvertChinese(currUserGradeNumber_new);//购买会员后到期日所在的年级名称
				map.put("gradeName_curr", gradeName_curr);//当前会员到期日所在的年级
				map.put("endDate_curr", endDate_fee);//会员到期日
				map.put("gradeName_new", gradeName_new);//购买会员后到期日所在的年级名称
				map.put("endDate_new", endDate_new);//购买会员后的新的到期日
				if(currUserGradeNumber_curr < 6){
					//获取小学费用
					List<SysFeeInfo> sfList = sfm.listInfoByopt(feeType, 1, 1);
					if(sfList.size() > 0){
						//可以购买--获取费用
						msg = "success";
						fee = (int)(sfList.get(0).getFee() * selMonth * zkRate);
					}
				}else if(currUserGradeNumber_curr.equals(6)){
					if(currUserGradeNumber_new.equals(6)){//从6年级买到6年级
						//获取小学费用
						List<SysFeeInfo> sfList = sfm.listInfoByopt(feeType, 1, 1);
						if(sfList.size() > 0){
							//可以购买--获取费用
							msg = "success";
							fee = (int)(sfList.get(0).getFee() * selMonth * zkRate);
						}
					}else{//从6年级买到7年级
						Integer month = Integer.parseInt(endDate_fee.substring(5,7));
						Integer year = Integer.parseInt(endDate_fee.substring(0,4));
						if(month >= 9){
							year += 1;
						}
						Integer diffDays = CurrentTime.compareDate(endDate_fee, year+"-09-01");//6年级天数;
						Integer remainDays = (selMonth * 30) - diffDays;//7年级天数
						List<SysFeeInfo> sfList = sfm.listInfoByopt(feeType, 1, 1);//小学费用
						if(sfList.size() > 0){
							List<SysFeeInfo> sfList_1 = sfm.listInfoByopt(feeType, 2, 1);//7年级费用
							if(sfList_1.size() > 0){
								//可以购买--获取费用
								msg = "success";
								feeOpt = "diffFee";//存在不同费用
								Integer fee_base = sfList.get(0).getFee();//6年级费用
								Integer fee_base_1 = sfList_1.get(0).getFee();//7年级费用
								Double month_1 = Convert.convertInputNumber_2(diffDays / 30.0);
								Double month_2 = Convert.convertInputNumber_2(remainDays / 30.0);
								fee = (int)(fee_base * month_1 * zkRate + fee_base_1 * month_2 * zkRate);
								map.put("fee_1", fee_base);//第一阶段费用标准
								map.put("days_1", diffDays);//第一阶段购买时间
//								map.put("gradeName_1", "六年级");//第一阶段所在年级
								map.put("fee_2", fee_base_1);
								map.put("days_2", remainDays);
//								map.put("gradeName_2", "七年级");
							}
						}
					}
				}else if(currUserGradeNumber_curr.equals(7)){
					//获取初中费用
					List<SysFeeInfo> sfList = sfm.listInfoByopt(feeType, 2, 1);
					if(sfList.size() > 0){
						//可以购买--获取费用
						msg = "success";
						fee = (int)(sfList.get(0).getFee() * selMonth * zkRate);
					}
				}else if(currUserGradeNumber_curr.equals(8)){
					if(currUserGradeNumber_new.equals(8)){//从8年级买到8年级
						//获取初中费用
						List<SysFeeInfo> sfList = sfm.listInfoByopt(feeType, 2, 1);
						if(sfList.size() > 0){
							//可以购买--获取费用
							msg = "success";
							fee = (int)(sfList.get(0).getFee() * selMonth * zkRate);
						}
					}else{//从8年级买到9年级
						Integer month = Integer.parseInt(endDate_fee.substring(5,7));
						Integer year = Integer.parseInt(endDate_fee.substring(0,4));
						if(month >= 9){
							year += 1;
						}
						Integer diffDays = CurrentTime.compareDate(endDate_fee, year+"-09-01");//8年级天数
						Integer remainDays = (selMonth * 30) - diffDays;//9年级天数
						List<SysFeeInfo> sfList = sfm.listInfoByopt(feeType, 2, 1);//初中费用
						if(sfList.size() > 0){
							List<SysFeeInfo> sfList_1 = sfm.listInfoByopt(feeType, 21, 1);//9年级费用
							if(sfList_1.size() > 0){
								//可以购买--获取费用
								msg = "success";
								feeOpt = "diffFee";//存在不同费用
								Integer fee_base = sfList.get(0).getFee();//6年级费用
								Integer fee_base_1 = sfList_1.get(0).getFee();//7年级费用
								Double month_1 = Convert.convertInputNumber_2(diffDays / 30.0);
								Double month_2 = Convert.convertInputNumber_2(remainDays / 30.0);
								fee = (int)(fee_base * month_1 * zkRate + fee_base_1 * month_2 * zkRate);
								map.put("fee_1", fee_base);
								map.put("days_1", diffDays);
//								map.put("gradeName_1", "八年级");
								map.put("fee_2", fee_base_1);
								map.put("days_2", remainDays);
//								map.put("gradeName_2", "九年级");
							}
						}
					}
				}else if(currUserGradeNumber_curr.equals(9)){
					if(currUserGradeNumber_new.equals(9)){//从9年级买到9年级
						//获取9年级费用
						List<SysFeeInfo> sfList = sfm.listInfoByopt(feeType, 21, 1);
						if(sfList.size() > 0){
							//可以购买--获取费用
							msg = "success";
							fee = (int)(sfList.get(0).getFee() * selMonth * zkRate);
						}
					}else{//从9年级买到高一
						Integer month = Integer.parseInt(endDate_fee.substring(5,7));
						Integer year = Integer.parseInt(endDate_fee.substring(0,4));
						if(month >= 9){
							year += 1;
						}
						Integer diffDays = CurrentTime.compareDate(endDate_fee, year+"-09-01");//9年级天数
						Integer remainDays = (selMonth * 30) - diffDays;//高一天数
						List<SysFeeInfo> sfList = sfm.listInfoByopt(feeType, 21, 1);//9年级费用
						if(sfList.size() > 0){
							List<SysFeeInfo> sfList_1 = sfm.listInfoByopt(feeType, 3, 1);//高中费用
							if(sfList_1.size() > 0){
								//可以购买--获取费用
								msg = "success";
								feeOpt = "diffFee";//存在不同费用
								Integer fee_base = sfList.get(0).getFee();//6年级费用
								Integer fee_base_1 = sfList_1.get(0).getFee();//7年级费用
								Double month_1 = Convert.convertInputNumber_2(diffDays / 30.0);
								Double month_2 = Convert.convertInputNumber_2(remainDays / 30.0);
								fee = (int)(fee_base * month_1 * zkRate + fee_base_1 * month_2 * zkRate);
								map.put("fee_1", fee_base);
								map.put("days_1", diffDays);
//								map.put("gradeName_1", "九年级");
								map.put("fee_2", fee_base_1);
								map.put("days_2", remainDays);
//								map.put("gradeName_2", "高一");
							}
						}
					}
				}else if(currUserGradeNumber_curr.equals(10)){
					//获取高中费用
					List<SysFeeInfo> sfList = sfm.listInfoByopt(feeType, 3, 1);
					if(sfList.size() > 0){
						//可以购买--获取费用
						msg = "success";
						fee = (int)(sfList.get(0).getFee() * selMonth * zkRate);
					}
				}else if(currUserGradeNumber_curr.equals(11)){
					if(currUserGradeNumber_new.equals(11)){//从高二买到高二
						//获取高中费用
						List<SysFeeInfo> sfList = sfm.listInfoByopt(feeType, 3, 1);
						if(sfList.size() > 0){
							//可以购买--获取费用
							msg = "success";
							fee = (int)(sfList.get(0).getFee() * selMonth * zkRate);
						}
					}else{//从高二买到高三
						Integer month = Integer.parseInt(endDate_fee.substring(5,7));
						Integer year = Integer.parseInt(endDate_fee.substring(0,4));
						if(month >= 9){
							year += 1;
						}
						Integer diffDays = CurrentTime.compareDate(endDate_fee, year+"-09-01");//高二年级天数
						Integer remainDays = (selMonth * 30) - diffDays;//高三天数
						List<SysFeeInfo> sfList = sfm.listInfoByopt(feeType, 3, 1);//高一、二费用
						if(sfList.size() > 0){
							List<SysFeeInfo> sfList_1 = sfm.listInfoByopt(feeType, 31, 1);//高三费用
							if(sfList_1.size() > 0){
								//可以购买--获取费用
								msg = "success";
								feeOpt = "diffFee";//存在不同费用
								Integer fee_base = sfList.get(0).getFee();//6年级费用
								Integer fee_base_1 = sfList_1.get(0).getFee();//7年级费用
								Double month_1 = Convert.convertInputNumber_2(diffDays / 30.0);
								Double month_2 = Convert.convertInputNumber_2(remainDays / 30.0);
								fee = (int)(fee_base * month_1 * zkRate + fee_base_1 * month_2 * zkRate);
								map.put("fee_1", fee_base);
								map.put("days_1", diffDays);
								map.put("gradeName_1", "高二");
								map.put("fee_2", fee_base_1);
								map.put("days_2", remainDays);
								map.put("gradeName_2", "高三");
							}
						}
					}
				}else if(currUserGradeNumber_curr.equals(12)){
					//获取高中费用
					List<SysFeeInfo> sfList = sfm.listInfoByopt(feeType, 31, 1);
					if(sfList.size() > 0){
						//可以购买--获取费用
						msg = "success";
						fee = (int)(sfList.get(0).getFee() * selMonth * zkRate);
					}
				}
			}
		}
		if(msg.equals("success")){
			map.put("payOpt", "serviceFee");
			map.put("feeOpt", feeOpt);//diffFee时在存在2种费用，才会存在fee_1,days_1,gradeName_1和2
			map.put("fee", fee);//购买会员总费用
			map.put("zkRate", zkRate * 100 + "%");
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 获取购买网络导师服务费
	 * @author wm
	 * @date 2019-9-19 上午10:10:45
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getNtFee(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		SysFeeManager sfm = (SysFeeManager) AppFactory.instance(null).getApp(Constants.WEB_SYS_FEE_INFO);
		SchoolManager sm = (SchoolManager) AppFactory.instance(null).getApp(Constants.WEB_SCHOOL_INFO);
		UserClassInfoManager ucm = (UserClassInfoManager) AppFactory.instance(null).getApp(Constants.WEB_USER_CLASS_INFO);
		UserManager um = (UserManager) AppFactory.instance(null).getApp(Constants.WEB_USER_INFO);
		InviteCodeInfoManager icm = (InviteCodeInfoManager) AppFactory.instance(null).getApp(Constants.WEB_INVITE_CODE_INFO);
		NetTeacherInfoManager ntm = (NetTeacherInfoManager) AppFactory.instance(null).getApp(Constants.WEB_NET_TEACHER_INFO);
		NetTeacherStudentManager ntsm = (NetTeacherStudentManager) AppFactory.instance(null).getApp(Constants.WEB_NET_TEACHER_STUDENT);
		Integer userId = CommonTools.getLoginUserId(request);
		Integer roleId  = CommonTools.getLoginRoleId(request);
		Integer ntId = CommonTools.getFinalInteger("ntId", request);//当是在我的导师页面点击绑定时
		String ntCode = CommonTools.getFinalStr("ntCode", request);//当是通过导师邀请码绑定时
		Integer selMonth = CommonTools.getFinalInteger("selMonth", request);//默认进来为一个月
		Integer feeType = 1;//费用类型(1:导师费,2:会员费)
		Integer fee = 0;//购买所需费用
		String buyDate = "";//获取指定购买月份后的日期
		String currDate = CurrentTime.getStringDate();
//		Integer currUserGradeNumber_curr = 0;//当前所在年级
		Integer currUserGradeNumber_new = 0;//选取购买月份后所在年级
//		String gradeName_curr = "";
//		String gradeName_new = "";
		Integer schoolId = 0;
		String msg = "error";
		Double zkRate = 0.0;
		Map<String,Object> map = new HashMap<String,Object>();
		if(selMonth.equals(0)){
			selMonth = 1;
		}
		if(!ntCode.equals("")){//从邀请码进入
			List<InviteCodeInfo>  icList = icm.listIcInfoByOpt(ntCode, "导师邀请码");
			if(icList.size() > 0){
				List<NetTeacherInfo> ntList = ntm.listntInfoByuserId(icList.get(0).getInviteId());
				if(ntList.size() > 0){
					ntId = ntList.get(0).getId();
				}else{
					msg = "noInfo";
				}
			}
		}else if(ntId > 0){//从导师列表进入
			
		}else{
			msg = "noInfo";
		}
		if(userId > 0 && roleId.equals(Constants.STU_ROLE_ID) && selMonth > 0 && selMonth <= 12 && ntId > 0){
			Integer stuSchoolType = 0;
			List<User> uList = um.listEntityById(userId);
			if(uList.size() > 0){
				schoolId = uList.get(0).getSchoolId();//获取学生所在的学校
			}
			if(schoolId > 0){
				List<School> sList = sm.listInfoById(schoolId);
				if(sList.size() > 0){
					stuSchoolType = sList.get(0).getSchoolType();//获取学生所在的学段
					Integer yearSystem = sList.get(0).getYearSystem();
					List<NetTeacherInfo>  ntList = ntm.listntInfoByTeaId(ntId);
					if(ntList.size() > 0){
						NetTeacherInfo nt = ntList.get(0);
						User user = nt.getUser();
						Integer subId = nt.getSubject().getId();
						Integer schoolType =  nt.getSchoolType();
						Integer checkStatus = nt.getCheckStatus();
						if(stuSchoolType.equals(schoolType)){//导师学段要和学生学段相同才能绑定
							if(checkStatus.equals(2)){//该导师必须为审核通过的导师才能进行绑定
								NetTeacherStudent nts = ntsm.getValidInfoByOpt(userId, subId);//该科有没有正在绑定的导师
								if(nts == null){//没有，可以进行绑定
									String schoolTypeChi = "";
									if(schoolType.equals(1)){
										schoolTypeChi = "小学";
									}else if(schoolType.equals(2)){
										schoolTypeChi = "初中";
									}else{
										schoolTypeChi = "高中";
									}
									//获取当前学生能购买的的时长（最大到升学日期）不足一月按一月计算
									List<UserClassInfo> ucList = ucm.listInfoByOpt_1(userId, roleId);
									if(ucList.size() > 0){
										zkRate = CommonTools.getZkRate(selMonth);
										UserClassInfo uc = ucList.get(0);
										ClassInfo c = uc.getClassInfo();
										schoolType = c.getSchool().getSchoolType();//当前学生所处的学段
										yearSystem = c.getSchool().getYearSystem();//当前学生的学年制
										String buildClassDate = c.getBuildeClassDate();
										Integer buildClassYear = Integer.parseInt(buildClassDate.substring(0, 4));
										String byDate = "";//毕业时间
//										currUserGradeNumber_curr = Convert.dateConvertGradeNumber(buildClassDate);//当前会员到期日所在的年级
//										gradeName_curr = Convert.NunberConvertChinese(currUserGradeNumber_curr);
										buyDate = CurrentTime.getFinalDate(currDate, selMonth * 30);//购买导师服务费的日期
										//获取购买导师服务费的日期后所在的年级
										currUserGradeNumber_new = Convert.dateConvertGradeNumber(buyDate,buildClassDate);
										if(currUserGradeNumber_new > 12){
											currUserGradeNumber_new = 12;
										}
//										gradeName_new = Convert.NunberConvertChinese(currUserGradeNumber_new);//购买会员后到期日所在的年级名称
//										map.put("gradeName_curr", gradeName_curr);//当前用户所在的年级
//										map.put("gradeName_new", gradeName_new);//购买导师服务费的日期后所在的年级名称
										Integer gradeNumber = 0;
										if(schoolType.equals(1)){//小学
											gradeNumber = yearSystem;
											byDate = (buildClassYear + yearSystem) + "-09-01";//计算升学时间
										}else if(schoolType.equals(2)){//初中
											byDate = (buildClassYear + 9) + "-09-01";
											gradeNumber = 10;
										}else if(schoolType.equals(3)){//高中
											//不区分
											byDate = (buildClassYear + 12) + "-09-01";
											gradeNumber = 12;
										}
										if(currUserGradeNumber_new <= gradeNumber){
											//不涉及升学
											List<SysFeeInfo> sfList = sfm.listInfoByopt(feeType, 1, 1);
											if(sfList.size() > 0){
												//可以购买--获取费用
												map.put("ntId", ntId);
												map.put("ntName", user.getRealName());
												map.put("subId", subId);
												map.put("subName", nt.getSubject().getSubName());
												map.put("schoolType",schoolTypeChi);
												msg = "success";
												fee = (int)(sfList.get(0).getFee() * selMonth * zkRate);
											}
										}else{
											//涉及升学，不能进行购买
											msg = "noBuy";
										}
									}
								}else{
									//查看是不是当前学生和当前网络导师的信息存在
									msg = "bindExist";//该科目前存在正在绑定的导师
								}
							}else{
								msg = "checkFail";//该导师没有审核通过
							}
						}else{
							msg = "paraDiff";//学段不一致
						}
					}else{
						msg = "noInfo";
					}
				}
			}
		}
		map.put("result", msg);
		if(msg.equals("success")){
//			map.put("gradeName_curr", gradeName_curr);//当前所在年级
//			map.put("gradeName_new", gradeName_new);//选取购买时长后所在的年级
			map.put("payOpt", "ntFee");
			map.put("buyDate", buyDate);//绑定截止日期
			map.put("selMonth", selMonth);//购买月数
			map.put("fee", fee);//费用
			map.put("zkRate", zkRate * 100 + "%");
		}
		CommonTools.getJsonPkg(map, response);
		return null;
	}
}