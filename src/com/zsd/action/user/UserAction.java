/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.zsd.action.user;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.zsd.action.base.Transcode;
import com.zsd.factory.AppFactory;
import com.zsd.module.ClassInfo;
import com.zsd.module.InviteCodeInfo;
import com.zsd.module.RoleInfo;
import com.zsd.module.RoleUserInfo;
import com.zsd.module.School;
import com.zsd.module.User;
import com.zsd.page.PageConst;
import com.zsd.service.ClassInfoManager;
import com.zsd.service.InviteCodeInfoManager;
import com.zsd.service.NetTeacherInfoManager;
import com.zsd.service.NetTeacherStudentManager;
import com.zsd.service.RoleInfoManager;
import com.zsd.service.RoleUserInfoManager;
import com.zsd.service.SchoolManager;
import com.zsd.service.StudentParentInfoManager;
import com.zsd.service.UserClassInfoManager;
import com.zsd.service.UserManager;
import com.zsd.tools.CommonTools;
import com.zsd.tools.Convert;
import com.zsd.tools.CurrentTime;
import com.zsd.tools.InviteCode;
import com.zsd.tools.MD5;
import com.zsd.util.Constants;


/** 
 * MyEclipse Struts
 * Creation date: 04-24-2019
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class UserAction extends DispatchAction {
	
	/**
	 * 根据用户身份导向不同界面
	 * @description
	 * @author Administrator
	 * @date 2019-4-24 下午04:31:43
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward goPage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		String roleName = Transcode.unescape_new("roleName", request);
		String urlPage = "";
		if(roleName.equals("超级管理员") || roleName.equals("知识点管理员")){
			urlPage = "managerPage";
		}else{
			urlPage = "welcomePage";
		}
		return mapping.findForward(urlPage);
	}
	
	/**
	 * 注册用户信息
	 * @author zong
	 * @date  2019-4-29 上午10:46:12
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward regUserInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		String lastLoginIp = CommonTools.getIpAddress(request); //最后登录Ip
		String area = CommonTools.getSelfArea(lastLoginIp);
		String prov = area.split(":")[0];
		String city = area.split(":")[1];
		UserManager uManager = (UserManager) AppFactory.instance(null).getApp(Constants.WEB_USER_INFO);
		SchoolManager scManager = (SchoolManager) AppFactory.instance(null).getApp(Constants.WEB_SCHOOL_INFO);
		RoleUserInfoManager ruManager = (RoleUserInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ROLE_USER_INFO);
		RoleInfoManager rManager = (RoleInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ROLE_INFO);
		UserClassInfoManager ucManager = (UserClassInfoManager) AppFactory.instance(null).getApp(Constants.WEB_USER_CLASS_INFO);
		ClassInfoManager ciManager = (ClassInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CLASS_INFO);
		NetTeacherStudentManager ntsManager = (NetTeacherStudentManager) AppFactory.instance(null).getApp(Constants.WEB_NET_TEACHER_STUDENT);
		InviteCodeInfoManager icManager = (InviteCodeInfoManager) AppFactory.instance(null).getApp(Constants.WEB_INVITE_CODE_INFO);
		StudentParentInfoManager spManager = (StudentParentInfoManager) AppFactory.instance(null).getApp(Constants.WEB_STUDENT_PARENT_INFO);
		NetTeacherInfoManager ntManager = (NetTeacherInfoManager) AppFactory.instance(null).getApp(Constants.WEB_NET_TEACHER_INFO);
		Map<String,Object> map = new HashMap<String,Object>();
		String userAccount =CommonTools.getFinalStr("userAccount",request);
		String roleName =CommonTools.getFinalStr("roleName",request);
		String realName=CommonTools.getFinalStr("realName",request);
		String className=CommonTools.getFinalStr("className",request);
		String inviteCode=CommonTools.getFinalStr("inviteCode",request);
		String password=new MD5().calcMD5(CommonTools.getFinalStr("password",request));
		String mobile=CommonTools.getFinalStr("mobile",request);
		String lastLoginDate=CurrentTime.getCurrentTime();
		String signDate=CurrentTime.getCurrentTime();
		Integer schoolId=CommonTools.getFinalInteger("schoolId", request);
		Integer gradeId=CommonTools.getFinalInteger("gradeId", request);
		Integer subId=CommonTools.getFinalInteger("subId", request);
		Integer schoolType=CommonTools.getFinalInteger("schoolType", request);
		String msg ="";
		Integer userId =0;
		List<School> scList = scManager.listInfoById(schoolId);
		Integer yearSystem=0;
		if(scList.size()>0){
			yearSystem = scList.get(0).getYearSystem();
		}
		List<User> uList = uManager.listInfoByAccount(userAccount);//判断账户是否存在
		msg ="fail";//注册用户失败
		if(uList.size()>0){
			msg="exist"; //用户名存在
		}else{
			//1.用户注册
			userId=uManager.addUser(userAccount, realName, password, mobile, lastLoginDate, lastLoginIp, signDate, schoolId, CurrentTime.getFinalDateTime(30), yearSystem, prov, city);
		}
		if(roleName.equals("学生")){
				if(userId>0){
					msg = "success";//注册用户成功
					
					List<RoleInfo> rList = rManager.listRoleInfo(roleName);
					Integer roleId = 0;
					if(rList.size() > 0){
						roleId = rList.get(0).getId();
						//2 绑定角色
						Integer ruId=ruManager.addRoleUserInfo(userId, roleId, "", "", "", "", 0, 0, 0, 0);
						if(ruId>0){//绑定角色成功
							List<ClassInfo> ciList = ciManager.listClassInfoByOption(gradeId, CurrentTime.getCurrentTime(), schoolId, className);
							if(ciList.size()>0){
								Integer classId = ciList.get(0).getId();
								ucManager.addUcInfo(userId, classId, roleId); //3 绑定用户班级
								List<InviteCodeInfo> icList = icManager.listIcInfoByicCode(inviteCode);
								if(icList.size()>0){
									Integer teaId=icList.get(0).getInviteId();
									ntsManager.addNTS(userId, teaId, CurrentTime.getCurrentTime(), -1, CurrentTime.getFinalDateTime(7), 0, "", "", 0);//4 网络导师学生绑定
									//5 生成家长账户
									Integer upId = uManager.addUser(userAccount+"_jz", "", new MD5().calcMD5("123456"), "", lastLoginDate, lastLoginIp, signDate, schoolId, CurrentTime.getFinalDateTime(30), yearSystem, prov, city);
									//6 家长绑定角色
									List<RoleInfo> jzlist = rManager.listRoleInfo("家长");
									if(jzlist.size() > 0){
										Integer jzRoleId = jzlist.get(0).getId();
										ruManager.addRoleUserInfo(upId, jzRoleId, "", "", "", "", 0, 0, 0, 0);
									}
									// 7 学生家长绑定
									spManager.addSpInfo(upId, userId);
								}
							}
						}
					}
				}else{
					msg ="fail";//注册用户失败
				}
		}else if(roleName.equals("网络导师")){ //网络导师注册
			//网络导师生成自己的邀请码
			String ivCode = InviteCode.getRandomCode();
			Integer icId=icManager.addInviteCodeInfo(userId, "导师邀请码", ivCode, CurrentTime.getCurrentTime1());
			if(icId>0){
				Integer baseMoney = 0;
				if(schoolType.equals(1)){
					baseMoney = (int) Constants.NET_TEACHER_SERVICE_FEE_XX;
				}else if(schoolType.equals(2)){
					baseMoney = (int) Constants.NET_TEACHER_SERVICE_FEE_CZ;
				}else{
					baseMoney = (int) Constants.NET_TEACHER_SERVICE_FEE_GZ;
				}
				//6 家长绑定角色
				List<RoleInfo> ntlist = rManager.listRoleInfo("网络导师");
				if(ntlist.size() > 0){
					Integer ntRoleId = ntlist.get(0).getId();
					ruManager.addRoleUserInfo(userId, ntRoleId, "", "", "", "", 0, 0, 0, 0);
				}
				ntManager.addNtInfo(userId, subId, schoolType, baseMoney, "", "", "", "", "", "", "", "", 0, 0, 0); //添加网络导师基本信息
			}
			
			
		}
		
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	/**
	 * 根据账户,学校名称,角色名,省,市,县,学段,学校名称,年级获取用户信息
	 * @author zong
	 * 2019-5-10上午10:54:57
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getUserByOption(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		UserManager uManager = (UserManager) AppFactory.instance(null).getApp(Constants.WEB_USER_INFO);
		RoleUserInfoManager ruManager = (RoleUserInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ROLE_USER_INFO);
		SchoolManager schManager = (SchoolManager) AppFactory.instance(null).getApp(Constants.WEB_SCHOOL_INFO);
		ClassInfoManager  cManager= (ClassInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CLASS_INFO);
		String accName =CommonTools.getFinalStr("accName",request);
		Integer roleId =CommonTools.getFinalInteger("roleId",request);
		String realName=Transcode.unescape_new1("realName",request);
		Integer schoolId=CommonTools.getFinalInteger("schoolId",request);
		String prov=Transcode.unescape_new1("prov",request);
		String city=Transcode.unescape_new1("city",request);
		String county=Transcode.unescape_new1("county",request);
		Integer schoolType=CommonTools.getFinalInteger("schoolType", request);
		Integer gradeNo=CommonTools.getFinalInteger("gradeNo", request);
		Integer classId=CommonTools.getFinalInteger("classId", request);
		Integer count = uManager.getUserByoptionCount(accName, realName, schoolId, roleId, prov, city, county, schoolType, gradeNo, classId);
		String msg = "noinfo";
		Map<String,Object> map = new HashMap<String,Object>();
		if(count>0){
			Integer pageSize = PageConst.getPageSize(String.valueOf(request.getParameter("limit")), 10);//等同于pageSize
			Integer pageNo = CommonTools.getFinalInteger("page", request);//等同于pageNo
			List<User> uList = uManager.listUserInfoByoption(accName, realName, schoolId, roleId, prov, city, county, schoolType, gradeNo, classId, pageNo, pageSize);
			List<Object> list = new ArrayList<Object>();
			for(Iterator<User> it = uList.iterator() ; it.hasNext();){
				User user = it.next();
				Map<String,Object> map_u = new HashMap<String,Object>();
				map_u.put("id", user.getId());
				map_u.put("accName", user.getUserAccount());
				map_u.put("realName", user.getRealName());
				map_u.put("nickName", user.getNickName());
				List<RoleUserInfo> ruList  = ruManager.listUserRoleInfoByuserId(user.getId());
				RoleUserInfo ruInfo = ruList.get(0);
				map_u.put("roleName", ruInfo.getRoleInfo().getRoleName());
				String sexStr = user.getSex();
				String sex ="";
				if(sexStr.equalsIgnoreCase("m")){
					sex="男";
				}else if(sexStr.equalsIgnoreCase("f")){
					sex="女";
				}
				map_u.put("sex", sex);
				Integer accSta = user.getAccountStatus();
				String accStr = "";
				if(accSta.equals(0)){
					accStr="无效";
				}else if(accSta.equals(1)){
					accStr="有效";
				}
				map_u.put("accStatus",accStr);
				map_u.put("QQ", user.getQq());
				map_u.put("birthday", user.getBirthday());
				map_u.put("endDate",user.getEndDate());
				map_u.put("prov", ruInfo.getProv());
				map_u.put("city",ruInfo.getCity());
				map_u.put("county", ruInfo.getCounty());
				Integer schType = ruInfo.getSchoolType();
				String schTypeStr = "";
				if(schType.equals(1)){
					schTypeStr = "小学";
				}else if(schType.equals(2)){
					schTypeStr = "初中";
				}else if(schType.equals(3)){
					schTypeStr = "高中";
				}
				map_u.put("schoolType", schTypeStr);
				List<School> schList = schManager.listInfoById(ruInfo.getSchoolId());
				map_u.put("schoolName", schList.get(0).getSchoolName());
				map_u.put("gradeName", Convert.NunberConvertChinese(ruInfo.getGradeNo()));
				List<ClassInfo> cInfo = cManager.listClassInfoById(ruInfo.getClassId());
				map_u.put("className", cInfo.get(0).getClassName());
				list.add(map_u);
			}
			map.put("data", list);
			map.put("count", count);
			map.put("code", 0);
			msg = "success";
		}
		map.put("msg", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	/**
	 * 修改用户的截止时间或者账号状态
	 * @author zong
	 * 2019-5-11下午03:44:20
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward updateUserBydateOraccSta(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		UserManager uManager = (UserManager) AppFactory.instance(null).getApp(Constants.WEB_USER_INFO);
		Integer userId=CommonTools.getFinalInteger("userId", request);
		String endDate=CommonTools.getFinalStr("endDate",request);
		Integer accStatus=CommonTools.getFinalInteger("accStatus", request);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "fail";
		boolean uflag = uManager.updateUser(userId, accStatus, endDate);
		if(uflag){
			msg ="success";
		}
		map.put("msg", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
		
	}
	/**
	 * 修改用户的电子邮箱地址
	 * @author zong
	 * 2019-5-13上午10:51:56
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward updateUserByEmail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		UserManager uManager = (UserManager) AppFactory.instance(null).getApp(Constants.WEB_USER_INFO);
		Integer userId=(Integer) request.getSession().getAttribute("userId");
		String email=CommonTools.getFinalStr("email",request);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "fail";
		boolean uflag = uManager.updateUserByEmail(userId, email);
		if(uflag){
			msg ="success";
		}
		map.put("msg", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
		
	}
	/**
	 * 修改用户的电话号码
	 * @author zong
	 * 2019-5-13上午10:53:23
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward updateUserByMobile(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		UserManager uManager = (UserManager) AppFactory.instance(null).getApp(Constants.WEB_USER_INFO);
		Integer userId=(Integer) request.getSession().getAttribute("userId");
		String mobile=CommonTools.getFinalStr("mobile",request);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "fail";
		boolean uflag = uManager.updateUserByMobile(userId, mobile);
		if(uflag){
			msg ="success";
		}
		map.put("msg", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
		
	}
	/**
	 * 修改用户密码
	 * @author zong
	 * 2019-5-13上午10:55:30
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward updateUserByPwd(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		UserManager uManager = (UserManager) AppFactory.instance(null).getApp(Constants.WEB_USER_INFO);
		Integer userId=(Integer) request.getSession().getAttribute("userId");
		String password=new MD5().calcMD5(CommonTools.getFinalStr("password", request));
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "fail";
		
		boolean uflag = uManager.updateUserBypwd(userId, password);
		if(uflag){
			msg ="success";
		}
		map.put("msg", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
		
	}
	/**
	 * 检查是否为当前的用户密码
	 * @author zong
	 * 2019-5-14下午05:18:29
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward checkUserPwd(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		UserManager uManager = (UserManager) AppFactory.instance(null).getApp(Constants.WEB_USER_INFO);
		Map<String,Object> map = new HashMap<String,Object>();
		Integer userId=(Integer) request.getSession().getAttribute("userId");
		String password=new MD5().calcMD5(CommonTools.getFinalStr("password", request));
		boolean flag = uManager.checkCurrpwd(userId, password);
		map.put("msg", flag);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
}