/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.zsd.action.lore;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.FileUploadException;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.zsd.tools.FileOpration;
import com.zsd.util.WebUrl;
import com.zsd.action.base.Transcode;
import com.zsd.factory.AppFactory;
import com.zsd.module.Chapter;
import com.zsd.module.Education;
import com.zsd.module.GradeSubject;
import com.zsd.module.LexInfo;
import com.zsd.module.LoreInfo;
import com.zsd.module.LoreQuestion;
import com.zsd.module.LoreQuestionSubInfo;
import com.zsd.module.LoreRelateInfo;
import com.zsd.page.PageConst;
import com.zsd.service.ChapterManager;
import com.zsd.service.LexInfoManager;
import com.zsd.service.LoreInfoManager;
import com.zsd.service.LoreQuestionErrorManager;
import com.zsd.service.LoreQuestionManager;
import com.zsd.service.LoreRelateManager;
import com.zsd.service.UserManager;
import com.zsd.tools.CheckImage;
import com.zsd.tools.CommonTools;
import com.zsd.tools.Convert;
import com.zsd.tools.CurrentTime;
import com.zsd.util.Constants;

/** 
 * MyEclipse Struts
 * Creation date: 05-04-2019
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class LoreAction extends DispatchAction {
	
	/**
	 * 导向知识典目录管理页面
	 * @author wm
	 * @date 2019-5-4 下午10:53:00 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward goLoreCatalogPage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		return mapping.findForward("lorePage");
	}
	
	/**
	 * 根据章节获取知识点列表
	 * @author wm
	 * @date 2019-5-17 上午09:02:22
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getSpecLoreCatalogData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		LoreInfoManager lm = (LoreInfoManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_INFO);
		Integer cptId = CommonTools.getFinalInteger("cptId", request);
		List<LoreInfo> loreList = lm.listInfoByCptId(cptId);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "noInfo";
		if(loreList.size() > 0){
			msg = "success";
			List<Object> list_d = new ArrayList<Object>();
			for(Iterator<LoreInfo> it = loreList.iterator() ; it.hasNext();){
				LoreInfo lore = it.next();
				Map<String,Object> map_d = new HashMap<String,Object>();
				map_d.put("loreId", lore.getId());
				map_d.put("loreName", lore.getLoreName());
				list_d.add(map_d);
			}
			map.put("loreList", list_d);
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 根据章节编号分页获取知识点目录列表
	 * @author wm
	 * @date 2019-5-4 下午10:55:52 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception 
	 */
	public ActionForward getLoreCatalogData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		LoreInfoManager lm = (LoreInfoManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_INFO);
		Integer cptId = CommonTools.getFinalInteger("cptId", request);
		Integer count = lm.getCountByCptId(cptId);
		String msg = "暂无记录";
		Map<String,Object> map = new HashMap<String,Object>();
		if(count > 0){
			Integer pageSize = PageConst.getPageSize(String.valueOf(request.getParameter("limit")), 10);//等同于pageSize
			Integer pageNo = CommonTools.getFinalInteger("page", request);//等同于pageNo
			List<LoreInfo> loreList = lm.listPageInfoByCptId(cptId, pageNo, pageSize);
			msg = "success";
			List<Object> list_d = new ArrayList<Object>();
			for(Iterator<LoreInfo> it = loreList.iterator() ; it.hasNext();){
				LoreInfo lore = it.next();
				Map<String,Object> map_d = new HashMap<String,Object>();
				map_d.put("id", lore.getId());
				map_d.put("loreName", lore.getLoreName());
				Integer mainLoreId = lore.getMainLoreId();//被引用知识点
				if(mainLoreId > 0){
					LoreInfo lore_main = lm.getEntityById(mainLoreId);
					if(lore_main != null){
						map_d.put("mainLoreName", lore_main.getLoreName());
					}else{
						map_d.put("mainLoreName", "");
					}
				}else{//通用版
					map_d.put("mainLoreName", lore.getLoreName());
				}
				map_d.put("loreCode", lore.getLoreCode());
				map_d.put("inUse", lore.getInUse().equals(0) ? "有效" : "无效");
				map_d.put("freeStatus", lore.getFreeStatus());
				list_d.add(map_d);
			}
			map.put("data", list_d);
			map.put("count", count);
			map.put("code", 0);
		}
		map.put("msg", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 检查指定章节下是否存在相同的知识点
	 * @author wm
	 * @date 2019-5-17 上午08:57:07
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward checkExistLore(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		LoreInfoManager lm = (LoreInfoManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_INFO);
		Integer cptId = CommonTools.getFinalInteger("cptId", request);//章节编号
		String loreName = Transcode.unescape_new("loreName", request);
		String msg = "error";
		Map<String,String> map = new HashMap<String,String>();
		if(cptId > 0 && !loreName.equals("")){
			if(lm.checkExistByCptId(cptId, loreName)){
				msg = "exist";
			}else{
				msg = "success";
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 增加通用版本知识点
	 * @author wm
	 * @date 2019-5-6 上午09:59:29
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward addCommonLore(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		LoreInfoManager lm = (LoreInfoManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_INFO);
		ChapterManager cm = (ChapterManager) AppFactory.instance(null).getApp(Constants.WEB_CHAPTER_INFO);
		Integer cptId = CommonTools.getFinalInteger("cptId", request);//章节编号
		Integer cptOrder = 0;
		Integer ediId = 0;//出版社编号
		Integer subId = 0;//学科编号
		String gradeName = "";
		String gradeCode = "";//年级号
		String eduVolume = "";
		String loreName = Transcode.unescape_new("loreName", request);
		String subIdCode = "";
		String msg = "error";
		if(lm.checkExistByCptId(cptId, loreName)){
			msg = "exist";
		}else{
			Chapter c = cm.getEntityById(cptId);
			if(c != null){
				msg = "success";
				cptOrder = c.getChapterOrder();
				Education edu = c.getEducation();
				ediId = edu.getEdition().getId();
				subId = edu.getGradeSubject().getSubject().getId();
				gradeName = edu.getGradeSubject().getGradeName();
				gradeCode = Convert.ChineseConvertNumber(gradeName);
				eduVolume = edu.getEduVolume();
				if(subId < 10){
					subIdCode = "0" + subId;
				}
				String paraCode = "";//学段号
				Integer gradeNum = Integer.parseInt(gradeCode);
				if(gradeNum < 7){
					paraCode = "01";
				}else if(gradeNum >= 7 && gradeNum <= 9){
					paraCode = "02";
				}else{
					paraCode = "03";
				}
				String eduVolumeCode = "02";//教材编号
				if(eduVolume.equals("上册")){
					eduVolumeCode = "01";
				}
				
				String ediIdCode = "";//出版社号
				if(ediId < 10){
					ediIdCode = "0" + ediId;
				}else{
					ediIdCode = String.valueOf(ediId);
				}
				String cptOrderCode = "";//章节排序号
				if(cptOrder < 10){
					cptOrderCode = "0" + cptOrder;
				}else{
					cptOrderCode = String.valueOf(cptOrder);
				}
				String loreOrderCode = "";//知识点顺序
				Integer loreOrder = lm.getCurrentMaxOrderByCptId(cptId);
				if(loreOrder < 10){
					loreOrderCode = "0" + loreOrder;
				}else{
					loreOrderCode = String.valueOf(loreOrder);
				}
				
				String loreCode = subIdCode + "-" + ediIdCode + "-" + paraCode + "-" + gradeCode + "-" + eduVolumeCode + "-"  + cptOrderCode + "-" + loreOrderCode;
				lm.addLore(cptId, loreName, Convert.getFirstSpell(loreName), loreOrder, 0, loreCode);
				
			}
		}
		Map<String,String> map = new HashMap<String,String>();
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 根据知识点目录编号获取知识点目录详情
	 * @author wm
	 * @date 2019-5-9 上午11:34:20
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getLoreDetail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		LoreInfoManager lm = (LoreInfoManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_INFO);
		Integer loreId = CommonTools.getFinalInteger("loreId", request);//知识点编号
		LoreInfo lore = lm.getEntityById(loreId);
		String msg = "noInfo";
		Map<String,Object> map = new HashMap<String,Object>();
		if(loreId > 0){
			msg = "success";
			map.put("loreId", lore.getId());
			map.put("loreName", lore.getLoreName());
			map.put("inUse", lore.getInUse());
			map.put("freeStatus", lore.getFreeStatus());
			map.put("loreOrder", lore.getLoreOrder());
			map.put("loreCode", lore.getLoreCode());
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 修改知识点信息（名称、排序、有效、免费）
	 * @author wm
	 * @date 2019-5-6 上午11:17:36
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward updateLoreDetail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		LoreInfoManager lm = (LoreInfoManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_INFO);
		Integer loreId = CommonTools.getFinalInteger("loreId", request);//知识点编号
		String loreName = Transcode.unescape_new("loreName", request);//知识点名称(""不修改)
		Integer loreOrder = CommonTools.getFinalInteger("loreOrder", request);//知识点排序号（-1不修改）
		Integer inUse = CommonTools.getFinalInteger("inUse", request);//显示状态(-1不修改)
		Integer freeStatus = CommonTools.getFinalInteger("freeStatus", request);//免费状态(-1不修改)
		LoreInfo lore = lm.getEntityById(loreId);
		String msg = "error";
		Map<String,String> map = new HashMap<String,String>();
		if(lore != null){
			if(!lore.getLoreName().equals(loreName)){//名字变化
				Integer cptId = lore.getChapter().getId();
				if(lm.checkExistByCptId(cptId, loreName)){
					msg = "existInfo";
				}else{
					msg = "success";
				}
			}else{
				msg = "success";
			}
			if(msg.equals("success")){
				boolean flag = lm.updateLore(loreId, loreName, -1, loreOrder, inUse, freeStatus);
				lm.updateLore(loreId, loreName, -1, loreOrder, inUse, freeStatus);
				if(flag){
					msg = "success";
				}else{
					msg = "error";
				}
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 批量生成知识点编码(指定章节下批量修改)
	 * @author wm
	 * @date 2019-5-6 上午11:26:13
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward updateBatchLoreCode(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		LoreInfoManager lm = (LoreInfoManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_INFO);
		ChapterManager cm = (ChapterManager) AppFactory.instance(null).getApp(Constants.WEB_CHAPTER_INFO);
		Integer cptId = CommonTools.getFinalInteger("cptId", request);//章节编号
		Integer ediId = 0;//出版社编号
		Integer subId = 0;//学科编号
		Integer cptOrder = 0;//章节排序号
		String gradeName = "";
		String gradeCode = "";//年级号
		String eduVolume = "";
		String subIdCode = "";
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "noInfo";
		List<LoreInfo> loreList = lm.listPageInfoByCptId(cptId, 1, 100000);
		if(loreList.size() > 0){
			msg = "success";
			Chapter c = cm.getEntityById(cptId);
			if(c != null){
				cptOrder = c.getChapterOrder();
				Education edu = c.getEducation();
				ediId = edu.getEdition().getId();
				subId = edu.getGradeSubject().getSubject().getId();
				gradeName = edu.getGradeSubject().getGradeName();
				gradeCode = Convert.ChineseConvertNumber(gradeName);
				eduVolume = edu.getEduVolume();
				if(subId < 10){
					subIdCode = "0" + subId;
				}
				String paraCode = "";//学段号
				Integer gradeNum = Integer.parseInt(gradeCode);
				if(gradeNum < 7){
					paraCode = "01";
				}else if(gradeNum >= 7 && gradeNum <= 9){
					paraCode = "02";
				}else{
					paraCode = "03";
				}
				String eduVolumeCode = "02";//教材编号
				if(eduVolume.equals("上册")){
					eduVolumeCode = "01";
				}
				
				String ediIdCode = "";//出版社号
				if(ediId < 10){
					ediIdCode = "0" + ediId;
				}else{
					ediIdCode = String.valueOf(ediId);
				}
				String cptOrderCode = "";//章节排序号
				if(cptOrder < 10){
					cptOrderCode = "0" + cptOrder;
				}else{
					cptOrderCode = String.valueOf(cptOrder);
				}
				List<Object> list_d = new ArrayList<Object>();
				for(Iterator<LoreInfo> it = loreList.iterator() ; it.hasNext();){
					LoreInfo lore = it.next();
					Map<String,String> map_d = new HashMap<String,String>();
					Integer loreOrder = lore.getLoreOrder();
					String loreOrderCode = "";
					if(loreOrder < 10){
						loreOrderCode = "0" + loreOrder;
					}else{
						loreOrderCode = String.valueOf(loreOrder);
					}
					String loreCode = subIdCode + "-" + ediIdCode + "-" + paraCode + "-" + gradeCode + "-" + eduVolumeCode + "-"  + cptOrderCode + "-" + loreOrderCode;
					Boolean flag = lm.updateLoreCodeById(lore.getId(), loreCode);
					if(flag){
						map_d.put("codeResult", "succ");
						map_d.put("codeInfo", "知识点[" + lore.getLoreName() + "]增加编码成功");
					}else{
						map_d.put("codeResult", "fail");
						map_d.put("codeInfo", "知识点[" + lore.getLoreName() + "]增加编码失败");
					}
					list_d.add(map_d);
				}
				map.put("codeList", list_d);
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 自动修改列表中的知识点编号和拼音码
	 * @author wm
	 * @date 2019-5-16 下午04:48:32
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward updateBatchLoreCode_all(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		LoreInfoManager lm = (LoreInfoManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_INFO);
		List<LoreInfo>  lList = lm.listAllInfo();
		lm.updateBatchLoreCode(lList);
		Map<String,String> map = new HashMap<String,String>();
		map.put("result", "success");
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 导向知识点管理页面
	 * @author wm
	 * @date 2019-5-6 上午11:45:56
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward goLoreQuePage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		return mapping.findForward("loreQuePage");
	}
	
	/**
	 * 根据章节分页获取知识点列表
	 * @author wm
	 * @date 2019-5-6 上午11:52:27
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getPageLoreData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		LoreInfoManager lm = (LoreInfoManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_INFO);
		Integer cptId = CommonTools.getFinalInteger("cptId", request);
		Integer count = lm.getCountByCptId(cptId);
		String msg = "暂无记录";
		Map<String,Object> map = new HashMap<String,Object>();
		if(count > 0){
			Integer pageSize = PageConst.getPageSize(String.valueOf(request.getParameter("limit")), 10);//等同于pageSize
			Integer pageNo = CommonTools.getFinalInteger("page", request);//等同于pageNo
			List<LoreInfo> loreList = lm.listPageInfoByCptId(cptId, pageNo, pageSize);
			msg = "success";
			List<Object> list_d = new ArrayList<Object>();
			for(Iterator<LoreInfo> it = loreList.iterator() ; it.hasNext();){
				LoreInfo lore = it.next();
				Map<String,Object> map_d = new HashMap<String,Object>();
				map_d.put("loreId", lore.getId());
				map_d.put("loreName", lore.getLoreName());
				map_d.put("inUse", lore.getInUse().equals(0) ? "有效" : "无效");
				Chapter cpt = lore.getChapter();
				String cptName = cpt.getChapterName();//章节名称
				map_d.put("cptName",cptName);
				Education edu = cpt.getEducation();
				String eduVolume = edu.getEduVolume();//教材
				map_d.put("eduVolume",eduVolume);
				GradeSubject gs = edu.getGradeSubject();
				String gradeName = gs.getGradeName();//年级
				map_d.put("gradeName",gradeName);
				String subName = gs.getSubject().getSubName();//学科
				map_d.put("subName",subName);
				list_d.add(map_d);
			}
			map.put("data", list_d);
			map.put("count", count);
			map.put("code", 0);
		}
		map.put("msg", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 分页获取指定知识点的题库列表
	 * @author wm
	 * @date 2019-5-6 下午05:22:33
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getPageLoreQuesionData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		LoreQuestionManager lqm = (LoreQuestionManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_QUESTION_INFO);
		Integer loreId = CommonTools.getFinalInteger("loreId", request);
		Integer count = lqm.getCountByLoreId(loreId);
		Map<String,Object> map = new HashMap<String,Object>();
//		PrintWriter pw = response.getWriter(); 
//		for(Integer i = 1 ; i <= 100 ; i++){
//			pw.println("<script>");
//			pw.println("document.write('<div>" + i + "</div>');");
//			pw.println("</script>");
//			pw.flush();
//			Thread.sleep(500);
//		}
		String msg = "暂无记录";
		if(count > 0){
			msg = "success";
			List<Object> list_d = new ArrayList<Object>();
			Integer pageSize = PageConst.getPageSize(String.valueOf(request.getParameter("limit")), 10);//等同于pageSize
			Integer pageNo = CommonTools.getFinalInteger("page", request);//等同于pageNo
			List<LoreQuestion> lqList = lqm.listPageInfoByLoreId(loreId, pageNo, pageSize);
			for(Iterator<LoreQuestion> it = lqList.iterator(); it.hasNext();){
				LoreQuestion lq = it.next();
				Map<String,Object> map_d = new HashMap<String,Object>();
				map_d.put("lqId", lq.getId());
				map_d.put("lqTitle", lq.getQueTitle());
				map_d.put("lqType", lq.getLoreTypeName());
				map_d.put("inUse", lq.getInUse().equals(0) ? "有效" : "无效");
				list_d.add(map_d);
			}
			map.put("data", list_d);
			map.put("count", count);
			map.put("code", 0);
		}
		map.put("msg", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 获取当前知识点下的提示列表(知识清单，点拨指导)
	 * @author wm
	 * @date 2019-5-21 上午09:37:33
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getCurrLoreTipsJson(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		LoreQuestionManager lqm = (LoreQuestionManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_QUESTION_INFO);
		Integer loreId = CommonTools.getFinalInteger("loreId", request);
		//通过知识点编号获取该知识点下的知识清单和点拨指导
		List<LoreQuestionSubInfo> lqsList = lqm.listInfoByLoreId(loreId);
		String msg = "noInfo";
		Map<String,Object> map = new HashMap<String,Object>();
		if(lqsList.size() > 0){
			msg = "success";
			List<Object> list_d = new ArrayList<Object>();
			for(Iterator<LoreQuestionSubInfo> it = lqsList.iterator() ; it.hasNext();){
				LoreQuestionSubInfo lqs = it.next();
				Map<String,Object> map_d = new HashMap<String,Object>();
				map_d.put("lqsId", lqs.getId());
				map_d.put("lqsTitle", lqs.getLqsTitle());
				map_d.put("lqsContent", lqs.getLqsContent());
				map_d.put("lqsType", lqs.getLoreTypeName());
				map_d.put("selStatus", false);
				list_d.add(map_d);
			}
			map.put("tipsList", list_d);
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 获取知识点题库详情
	 * @author wm
	 * @date 2019-5-10 上午08:42:21
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getLoreQuesionDetail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		LoreQuestionManager lqm = (LoreQuestionManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_QUESTION_INFO);
		LexInfoManager lexm = (LexInfoManager) AppFactory.instance(null).getApp(Constants.WEB_LEX_INFO);
		Integer lqId = CommonTools.getFinalInteger("lqId", request);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "noInfo";
		LoreQuestion lq = lqm.getEntityByLqId(lqId);
		if(lq != null){
			msg = "success";
			String loreType = lq.getLoreTypeName();
			List<Object> list_d = new ArrayList<Object>();
			if(loreType.equals("知识清单") || loreType.equals("点拨指导")){
				List<LoreQuestionSubInfo> lqsList = lqm.listLQSInfoByLqId(lqId,"");
				if(lqsList.size() > 0){
					for(Iterator<LoreQuestionSubInfo> it = lqsList.iterator(); it.hasNext();){
						LoreQuestionSubInfo lqs = it.next();
						Map<String,Object> map_d = new HashMap<String,Object>();
						map_d.put("lqId", lqId);
						map_d.put("lqsId", lqs.getId());
						map_d.put("lqsTitle", lqs.getLqsTitle());
						map_d.put("lqsCon", lqs.getLqsContent());
						if(loreType.equals("知识清单")){
							map_d.put("lqType", loreType);
						}else{
							map_d.put("lqType", lqs.getLoreTypeName());
						}
						list_d.add(map_d);
					}
				}
				map.put("listIfo", list_d);
			}else if(loreType.equals("解题示范")){
				Map<String,Object> map_d = new HashMap<String,Object>();
				map_d.put("lqId", lqId);
				map_d.put("lqTitle", lq.getQueTitle());
				map_d.put("loreName", lq.getLoreInfo().getLoreName());
				map_d.put("lqSub", lq.getQueSub());
				map_d.put("lqAnswer", lq.getQueAnswer());
				map_d.put("lqResolution", lq.getQueResolution());
				map_d.put("lqType", loreType);
				list_d.add(map_d);
				map.put("listIfo", list_d);
			}else if(loreType.equals("知识讲解")){
				Map<String,Object> map_d = new HashMap<String,Object>();
				map_d.put("lqId", lqId);
				map_d.put("loreName", lq.getLoreInfo().getLoreName());
				map_d.put("lqSub", lq.getQueSub());
				map_d.put("lqAnswer", lq.getQueAnswer());
				map_d.put("lqType", loreType);
				list_d.add(map_d);
				map.put("listIfo", list_d);
			}else{//巩固训练，针对性诊断，再次诊断
				Map<String,Object> map_d = new HashMap<String,Object>();
				map_d.put("lqId", lqId);
				map_d.put("lqTitle", lq.getQueTitle());
				map_d.put("loreName", lq.getLoreInfo().getLoreName());
				String queType = lq.getQueType();
				map_d.put("queType", queType);
				map_d.put("queType2", lq.getQueType2());
				Integer lexId = lq.getLexId();
				map_d.put("lexId", lexId);
				if(lexId > 0){
					LexInfo lex = lexm.getEntityById(lexId);
					if(lex != null){
						map_d.put("lexTitle", lex.getLexTitle());
						map_d.put("lexContent", lex.getLexContent());
					}
				}
				map_d.put("lqSub", lq.getQueSub());
				String answerA = lq.getA();
				String answerB = lq.getB();
				String answerC = lq.getC();
				String answerD = lq.getD();
				String answerE = lq.getE();
				String answerF = lq.getF();
				map_d.put("anserA", answerA);
				map_d.put("anserB", answerB);
				map_d.put("anserC", answerC);
				map_d.put("anserD", answerD);
				map_d.put("anserE", answerE);
				map_d.put("anserF", answerF);
				map_d.put("lqAnswer", lq.getQueAnswer());
				Integer queOptNum = 0;//问题选项
				Integer answerNum = 0;//答案数量
				if(queType.equals("单选题") || queType.equals("多选题") || queType.equals("填空选择题")){
					//有最大选项
					if(!answerA.equals("")){
						queOptNum++;
					}
					if(!answerB.equals("")){
						queOptNum++;
					}
					if(!answerC.equals("")){
						queOptNum++;
					}
					if(!answerD.equals("")){
						queOptNum++;
					}
					if(!answerE.equals("")){
						queOptNum++;
					}
					if(!answerF.equals("")){
						queOptNum++;
					}
					map_d.put("queOptNum", queOptNum);
					if(queType.equals("填空选择题")){
						//有最大选项和填空数量
						answerNum = lq.getQueAnswer().split(",").length;//多个答案用,隔开
						map_d.put("answerNum", answerNum);
					}
				}else if(queType.equals("填空题")){
					answerNum = lq.getQueAnswer().split(",").length;//多个答案用,隔开
					map_d.put("answerNum", answerNum);
				}
				map_d.put("lqResolution", lq.getQueResolution());
				Integer queTipId = lq.getQueTips();
				map_d.put("queTipId", queTipId);
				List<LoreQuestionSubInfo> lqsList = lqm.listInfoByLoreId(lq.getLoreInfo().getId());
				List<Object> list_d_1 = new ArrayList<Object>();
				if(lqsList.size() > 0){
					if(queTipId > 0){//提示为知识清单或者点拨指导的一内容
						for(Iterator<LoreQuestionSubInfo> it = lqsList.iterator() ; it.hasNext();){
							LoreQuestionSubInfo lqs = it.next();
							Map<String,Object> map_d_1 = new HashMap<String,Object>();
							map_d_1.put("lqsId", lqs.getId());
							map_d_1.put("lqsTitle", lqs.getLqsTitle());
							map_d_1.put("lqsContent", lqs.getLqsContent());
							map_d_1.put("lqsType", lqs.getLoreTypeName());
							if(queTipId.equals(lqs.getId())){
								map_d_1.put("selStatus", true);
							}else{
								map_d_1.put("selStatus", false);
							}
							list_d_1.add(map_d_1);
						}
					}else{
						for(Iterator<LoreQuestionSubInfo> it = lqsList.iterator() ; it.hasNext();){
							LoreQuestionSubInfo lqs = it.next();
							Map<String,Object> map_d_1 = new HashMap<String,Object>();
							map_d_1.put("lqsId", lqs.getId());
							map_d_1.put("lqsTitle", lqs.getLqsTitle());
							map_d_1.put("lqsContent", lqs.getLqsContent());
							map_d_1.put("lqsType", lqs.getLoreTypeName());
							map_d_1.put("selStatus", false);
							list_d_1.add(map_d_1);
						}
					}
				}
				map_d.put("tipsList", list_d_1);
				map_d.put("lqType", loreType);
				list_d.add(map_d);
				map.put("listIfo", list_d);
			}
		}
		map.put("msg", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 删除知识清单/点拨指导的子表
	 * @author wm
	 * @date 2019-5-25 上午09:23:44
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward delLQSInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		LoreQuestionManager lqm = (LoreQuestionManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_QUESTION_INFO);
		Integer lqsId = CommonTools.getFinalInteger("lqsId", request);
		Map<String,String> map = new HashMap<String,String>();
		String msg = "error";
		LoreQuestionSubInfo lqs = lqm.getEntityByLqsId(lqsId);
		if(lqs != null){
			boolean flag = lqm.delLoreQuestionSubByLqsId(lqsId);
			if(flag){
				//获取有无关联的提示信息
				List<LoreQuestion> lqList = lqm.listInfoByTipsId(lqsId);
				for(Iterator<LoreQuestion> it = lqList.iterator() ; it.hasNext();){
					LoreQuestion lq = it.next();
					lqm.updateSimpleInfoByLqId(lq.getId(), -1, 0);
				}
				msg = "success";
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	
	/**
	 * 修改指定的知识点题库/题库子表
	 * @author wm
	 * @date 2019-5-10 上午11:10:52
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward updateLoreQuesionDetail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		LoreQuestionManager lqm = (LoreQuestionManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_QUESTION_INFO);
		LoreQuestionErrorManager lqem = (LoreQuestionErrorManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_QUESTION_ERROR_INFO);
		UserManager um = (UserManager) AppFactory.instance(null).getApp(Constants.WEB_USER_INFO);
		Integer lqId = CommonTools.getFinalInteger("lqId", request);
		String msg = "noInfo";
		Integer lqeId = CommonTools.getFinalInteger("lqeId", request);
		Map<String,Object> map = new HashMap<String,Object>();
		LoreQuestion lq = lqm.getEntityByLqId(lqId);
		if(lq != null){
			msg = "success";
			String operateUserName = CommonTools.getLoginAccount(request);
			String loreType = lq.getLoreTypeName();
			if(loreType.equals("知识清单") || loreType.equals("点拨指导")){
				String lqsIdStr_up = CommonTools.getFinalStr("lqsIdStr_up", request);//页面所有需要修改的子表编号，多个用&zsd&隔开
				String lqsTitleStr = Transcode.unescape_new1("lqsTitleStr", request);//页面所有需要修改的子表标题，多个用&zsd&隔开
				String lqsConStr = Transcode.unescape_new1("lqsConStr", request);//页面所有需要修改的子表内容，多个用&zsd&隔开
				//修改
				if(!lqsIdStr_up.equals("")){
					String[] lqsIdArr = lqsIdStr_up.split("&zsd&");
					String[] lqsTitleArr = lqsTitleStr.split("&zsd&");
					String[] lqsConArr = lqsConStr.split("&zsd&");
					for(Integer i = 0 ; i < lqsIdArr.length ; i++){
						Integer lqsId = Integer.parseInt(lqsIdArr[i]);
						String lqsTitle = lqsTitleArr[i];
						String lqsCon = lqsConArr[i];
						if(lqsId > 0){//修改
							lqm.updateLoreQuestionSubByLqsId(lqsId, lqsTitle, lqsCon, operateUserName, CurrentTime.getCurrentTime());
						}else{//增加
							if(loreType.equals("知识清单")){
								lqm.addLoreQuestionSubInfo(lqId, loreType, lqsTitle, lqsCon, 1, operateUserName, CurrentTime.getCurrentTime());
							}else{
								String lqsType = Transcode.unescape_new1("lqsType", request);//重点，难点，关键点，易混点
								lqm.addLoreQuestionSubInfo(lqId, lqsType, lqsTitle, lqsCon, 1, operateUserName, CurrentTime.getCurrentTime());
							}
						}
					}
				}
			}else if(loreType.equals("解题示范") || loreType.equals("知识讲解")){
				String queSub = Transcode.unescape_new1("queSub", request);
				String queAnswer = Transcode.unescape_new1("queAnswer", request);
				String queResolution = "";
				if(loreType.equals("解题示范")){
					queResolution = Transcode.unescape_new1("queResolution", request);
				}else{
					String videoPath = lq.getQueAnswer();
					if(!videoPath.equals(queAnswer)){
						//删除旧视频
						String filePath = WebUrl.DATA_URL_PRO + videoPath;
						FileOpration.deleteFile(filePath);
					}
				}
				lqm.updateSimpleLoreQuestionByLqId(lqId, queSub, queAnswer, queResolution, operateUserName, CurrentTime.getCurrentTime());
			}else{//巩固训练、针对性诊断、再次诊断
				String queType = Transcode.unescape_new1("queType", request);//类型
				String queType2 = Transcode.unescape_new1("queType2", request);//类型二
				Integer queTipId = CommonTools.getFinalInteger("queTipId", request);//词条编号（提示）
				Integer lexId = CommonTools.getFinalInteger("lexId", request);//词库编号
				String queSub = Transcode.unescape_new1("queSub", request);//题干
				String answerA = Transcode.unescape_new1("answerA", request);
				String answerB = Transcode.unescape_new1("answerB", request);
				String answerC = Transcode.unescape_new1("answerC", request);
				String answerD = Transcode.unescape_new1("answerD", request);
				String answerE = Transcode.unescape_new1("answerE", request);
				String answerF = Transcode.unescape_new1("answerF", request);
				String queAnswer = Transcode.unescape_new1("queAnswer", request);//答案，多个用逗号隔开
				String queResolution = Transcode.unescape_new1("queResolution", request);//解析
				lqm.updateLoreQuestion(lqId, queSub, queAnswer, queTipId, lexId, queResolution, queType, queType2, 
						answerA, answerB, answerC, answerD, answerE, answerF, operateUserName, CurrentTime.getCurrentTime());
				if(lqeId > 0){//通过错题过来修改
					//修改知识点错误表信息
					//页面放置已采纳、未采纳2个按钮
					Integer cyStatus = CommonTools.getFinalInteger("cyStatus", request);//采用状态（0：未采纳，1：已采纳）--如果是已采用，需要奖励用户20金币
					String remark = "您的意见未被未采纳，谢谢!";
					Integer addCoinNumber = 0;
					if(cyStatus.equals(1)){
						remark = "您的意见已被采纳，特奖励20金币，谢谢!";
						addCoinNumber = 20;
						Integer stuId = lqem.getEntityById(lqeId).getUser().getId();//提交错误题的学生编号
						//奖励学生金币
						um.updateUser(stuId, 20, 0, 0, 0);
					}
					lqem.updateLQE(lqeId, addCoinNumber, 1, CommonTools.getLoginAccount(request), CurrentTime.getCurrentTime(), remark);
				}
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 设置知识点题库有/无效状态
	 * @author wm
	 * @date 2019-5-10 上午11:12:03
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward updateLQInUse(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		LoreQuestionManager lqm = (LoreQuestionManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_QUESTION_INFO);
		Integer lqId = CommonTools.getFinalInteger("lqId", request);
		Integer inUse = CommonTools.getFinalInteger("inUse", request);//0:有效，1：无效
		Map<String,String> map = new HashMap<String,String>();
		String msg = "error";
		LoreQuestion lq = lqm.getEntityByLqId(lqId);
		if(lq != null){
			if(inUse.equals(0) || inUse.equals(1)){
				lqm.updateInUseStatusById(lqId, inUse, CommonTools.getLoginAccount(request), CurrentTime.getCurrentTime());
				msg = "success";
			}
		}
		map.put("msg", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 浏览指定知识点、指定类型的的题库
	 * @author wm
	 * @date 2019-5-10 下午06:57:38
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getLoreQuestionData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		LoreQuestionManager lqm = (LoreQuestionManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_QUESTION_INFO);
		LexInfoManager lexm = (LexInfoManager) AppFactory.instance(null).getApp(Constants.WEB_LEX_INFO);
		Integer loreId = CommonTools.getFinalInteger("loreId", request);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "noInfo";
		List<LoreQuestion> lqList = lqm.listInfoByLoreId(loreId, "", 0);
		List<Object> list_d_zsqd = new ArrayList<Object>();
		List<Object> list_d_dbzd = new ArrayList<Object>();
		List<Object> list_d_jtsf = new ArrayList<Object>();
		List<Object> list_d_ggxl = new ArrayList<Object>();
		List<Object> list_d_zdx = new ArrayList<Object>();
		List<Object> list_d_zczd = new ArrayList<Object>();
		List<Object> list_d_zsjj = new ArrayList<Object>();
		if(lqList.size() > 0){
			msg = "success";
			for(Iterator<LoreQuestion> it = lqList.iterator() ; it.hasNext();){
				LoreQuestion lq = it.next();
				Map<String,Object> map_d = new HashMap<String,Object>();
				String loreType_db = lq.getLoreTypeName();
				if(loreType_db.equals("知识清单") || loreType_db.equals("点拨指导")){
					List<LoreQuestionSubInfo> lqsList = lqm.listLQSInfoByLqId(lq.getId(),"");
					if(lqsList.size() > 0){
						for(Iterator<LoreQuestionSubInfo> it_1 = lqsList.iterator() ; it_1.hasNext();){
							LoreQuestionSubInfo lqs = it_1.next();
							Map<String,Object> map_d_1 = new HashMap<String,Object>();
							map_d_1.put("lqsType", lqs.getLoreTypeName());//重点，难点，关键点，易混点
							map_d_1.put("lqsTitle", lqs.getLqsTitle());//标题
							map_d_1.put("lqsCon", lqs.getLqsContent());//内容
							if(loreType_db.equals("知识清单")){
								list_d_zsqd.add(map_d_1);
							}else{
								list_d_dbzd.add(map_d_1);
							}
						}
					}
				}else if(loreType_db.equals("解题示范")){
					map_d.put("queSub", lq.getQueSub());//题干
					map_d.put("queAnswer", lq.getQueAnswer());//答案
					map_d.put("queResolution", lq.getQueResolution());//解析
					list_d_jtsf.add(map_d);
				}else if(loreType_db.equals("巩固训练") || loreType_db.equals("针对性诊断") || loreType_db.equals("再次诊断")){
					map_d.put("queTitle", lq.getQueTitle());//标题
					String queType = lq.getQueType();
					map_d.put("queType", queType);//类型
					map_d.put("queType2", lq.getQueType2());//类型
					map_d.put("queSub", lq.getQueSub());//题干
					String queAnswer = lq.getQueAnswer();
					if(queType.equals("单选题") || queType.equals("多选题") || queType.equals("填空选择题") || queType.equals("判断题")){
						String answerA = lq.getA();
						String answerB = lq.getB();
						String answerC = lq.getC();
						String answerD = lq.getD();
						String answerE = lq.getE();
						String answerF = lq.getF();
						map_d.put("answerA", answerA);//选项A
						map_d.put("answerB", answerB);//选项B
						map_d.put("answerC", answerC);//选项C
						map_d.put("answerD", answerD);//选项D
						map_d.put("answerE", answerE);//选项E
						map_d.put("answerF", answerF);//选项F
						//需要匹配出选项
						String[] answerQueArr = queAnswer.split(",");
						String queAnswer_text = "";
						String replaceStr = "Module/commonJs/ueditor/jsp/lore/";
						for(Integer i = 0 ; i < answerQueArr.length ; i++){
							if(answerQueArr[i].equals(answerA.replace(replaceStr,""))){
								queAnswer_text += "A,";
								continue;
							}
							if(answerQueArr[i].equals(answerB.replace(replaceStr,""))){
								queAnswer_text += "B,";
								continue;
							}
							if(answerQueArr[i].equals(answerC.replace(replaceStr,""))){
								queAnswer_text += "C,";
								continue;
							}
							if(answerQueArr[i].equals(answerD.replace(replaceStr,""))){
								queAnswer_text += "D,";
								continue;
							}
							if(answerQueArr[i].equals(answerE.replace(replaceStr,""))){
								queAnswer_text += "E,";
								continue;
							}
							if(answerQueArr[i].equals(answerF.replace(replaceStr,""))){
								queAnswer_text += "F,";
								continue;
							}
						}
						if(!queAnswer_text.equals("")){
							queAnswer_text = queAnswer_text.substring(0, queAnswer_text.length() - 1);
						}
						map_d.put("queAnswer", queAnswer_text);
					}
					if(queType.equals("问答题") || queType.equals("填空题")){
						map_d.put("queAnswer", queAnswer);//直接给出答案
					}					
					map_d.put("queResolution", lq.getQueResolution());//解析
					Integer queTipId = lq.getQueTips();
					if(queTipId > 0){//有提示
						LoreQuestionSubInfo  lqs = lqm.getEntityByLqsId(queTipId);
						if(lqs != null){
							map_d.put("queTipTitle", lqs.getLqsTitle()+"("+lqs.getLoreTypeName()+")");
						}
					}else{
						map_d.put("queTipTitle","");
					}
					Integer lexId = lq.getLexId();
					if(lexId > 0){
						LexInfo lex = lexm.getEntityById(lexId);
						if(lex != null){
							map_d.put("lexTitle", lex.getLexTitle());
						}
					}else{
						map_d.put("lexTitle", "");
					}
					if(loreType_db.equals("巩固训练")){
						list_d_ggxl.add(map_d);
					}else if(loreType_db.equals("针对性诊断")){
						list_d_zdx.add(map_d);
					}else{
						list_d_zczd.add(map_d);
					}
				}else{
					map_d.put("queSub", lq.getQueSub());//题干
					map_d.put("videoPath", lq.getQueAnswer());//视频地址
					list_d_zsjj.add(map_d);
				}
			}
			map.put("zsqdList", list_d_zsqd);
			map.put("dbzdList", list_d_dbzd);
			map.put("jtsfList", list_d_jtsf);
			map.put("ggxlList", list_d_ggxl);
			map.put("zdxList", list_d_zdx);
			map.put("zczdList", list_d_zczd);
			map.put("zsjjList", list_d_zsjj);
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 获取当前最大的题库数
	 * @author wm
	 * @date 2019-5-12 上午09:03:44
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getCurrMaxQueNum(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		LoreQuestionManager lqm = (LoreQuestionManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_QUESTION_INFO);
		Integer loreId = CommonTools.getFinalInteger("loreId", request);
		String loreType = Transcode.unescape_new1("loreType", request);
		Integer queNum = 1;
		if(loreType.equals("解题示范")){
			queNum = lqm.listInfoByLoreId(loreId, loreType, -1).size() + 1;
		}else{
			LoreQuestion lq = lqm.getMaxNumInfoByOpt(loreId, loreType, -1);
			if(lq != null){
				queNum = lq.getQueNum() + 1;
			}
		}
		Map<String,Integer> map = new HashMap<String,Integer>();
		map.put("queNum", queNum);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 增加题库、子表
	 * @author wm
	 * @date 2019-5-11 上午11:46:00
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward addLoreQuesion(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		LoreQuestionManager lqm = (LoreQuestionManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_QUESTION_INFO);
		LoreInfoManager lm = (LoreInfoManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_INFO);
		Integer loreId = CommonTools.getFinalInteger("loreId", request);
		String loreType = Transcode.unescape_new1("loreType", request);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "noInfo";
		String operateUserName = CommonTools.getLoginAccount(request);
		String operateDate = CurrentTime.getCurrentTime();
		if(loreId > 0){
			LoreInfo lore = lm.getEntityById(loreId);
			if(lore != null){
				if(loreType.equals("知识清单")){
					String queTitle = Transcode.unescape_new1("queTitle", request);//（&zsd&隔开）
					String queSub =  Transcode.unescape_new1("queSub", request);//（&zsd&隔开）
					List<LoreQuestion> lqList = lqm.listInfoByLoreId(loreId, loreType, -1);
					String[] queTitleArr = queTitle.split("&zsd&");
					String[] queSubArr = queSub.split("&zsd&");
					Integer lqId = 0;
					if(lqList.size() == 0){//未增加过
						//增加主表和子表
						lqId = lqm.addSimpleLoreQuestion(loreId, loreType, loreType, "", 1,1, "", "", operateUserName, operateDate);
						if(lqId > 0){
							for(Integer i = 0 ; i < queTitleArr.length ; i++){
								lqm.addLoreQuestionSubInfo(lqId, loreType, queTitleArr[i], queSubArr[i], 1, operateUserName, operateDate);
							}
						}
					}else{
						//增加子表
						lqId = lqList.get(0).getId();
						for(Integer i = 0 ; i < queTitleArr.length ; i++){
							lqm.addLoreQuestionSubInfo(lqId, loreType, queTitleArr[i], queSubArr[i], 1, operateUserName, operateDate);
						}
					}
					msg = "success";
				}else if(loreType.equals("点拨指导")){
					List<LoreQuestion> lqList = lqm.listInfoByLoreId(loreId, loreType, -1);
					String contentZt = Transcode.unescape_new1("contentZt", request);//主题内容
					Integer lqId = 0;
					if(lqList.size() == 0){//未增加过
						//增加主表和子表
						lqId = lqm.addSimpleLoreQuestion(loreId, loreType, loreType, "", 1,2, "", "", operateUserName, operateDate);
					}else{//存在点拨指导的记录
						//增加子表
						lqId = lqList.get(0).getId();
					}
					if(lqId > 0){
						if(!contentZt.equals("")){//主题有内容，就不能增加重点、难点、关键点、易混点
							//先查询有无点拨指导的子表记录（主题只能在没有任何记录的情况下才能增加）
							if(lqm.listLQSInfoByLqId(lqId, "").size() == 0){
								lqm.addLoreQuestionSubInfo(lqId, "主题", loreType, contentZt, 1, operateUserName, operateDate);
								msg = "success";
							}else{
								//存在任何信息，不能再增加主题
								msg = "noAddZt";
							}
						}else{//增加重点、难点、关键点、易混点
							if(lqm.listLQSInfoByLqId(lqId, "主题").size() > 0){//存在主题，不能增加重点、难点、关键点、易混点
								msg = "noAddPoint";
							}else{
								String titleZd = Transcode.unescape_new1("titleZd", request);//重点标题（&zsd&隔开）
								String contentZd = Transcode.unescape_new1("contentZd", request);//重点内容（&zsd&隔开）
								String titleNd = Transcode.unescape_new1("titleNd", request);//难点标题（&zsd&隔开）
								String contentNd = Transcode.unescape_new1("contentNd", request);//难点内容（&zsd&隔开）
								String titleGjd = Transcode.unescape_new1("titleGjd", request);//关键点标题（&zsd&隔开）
								String contentGjd = Transcode.unescape_new1("contentGjd", request);//关键点内容（&zsd&隔开）
								String titleYhd = Transcode.unescape_new1("titleYhd", request);//易混点标题（&zsd&隔开）
								String contentYhd = Transcode.unescape_new1("contentYhd", request);//易混点内容（&zsd&隔开）
								if(!titleZd.equals("") && !contentZd.equals("")){
									String[] titleZdArr = titleZd.split("&zsd&");
									String[] contentZdArr = contentZd.split("&zsd&");
									for(Integer i = 0 ; i < titleZdArr.length ; i++){
										lqm.addLoreQuestionSubInfo(lqId, "重点", titleZdArr[i], contentZdArr[i], 1, operateUserName, operateDate);
									}
								}
								if(!titleNd.equals("") && !contentNd.equals("")){
									String[] titleNdArr = titleNd.split("&zsd&");
									String[] contentNdArr = contentNd.split("&zsd&");
									for(Integer i = 0 ; i < titleNdArr.length ; i++){
										lqm.addLoreQuestionSubInfo(lqId, "难点", titleNdArr[i], contentNdArr[i], 1, operateUserName, operateDate);
									}
								}
								if(!titleGjd.equals("") && !contentGjd.equals("")){
									String[] titleGjdArr = titleGjd.split("&zsd&");
									String[] contentGjdArr = contentGjd.split("&zsd&");
									for(Integer i = 0 ; i < titleGjdArr.length ; i++){
										lqm.addLoreQuestionSubInfo(lqId, "关键点", titleGjdArr[i], contentGjdArr[i], 1, operateUserName, operateDate);
									}
								}
								if(!titleYhd.equals("") && !contentYhd.equals("")){
									String[] titleYhdArr = titleYhd.split("&zsd&");
									String[] contentYhdArr = contentYhd.split("&zsd&");
									for(Integer i = 0 ; i < titleYhdArr.length ; i++){
										lqm.addLoreQuestionSubInfo(lqId, "易混点", titleYhdArr[i], contentYhdArr[i], 1, operateUserName, operateDate);
									}
								}
								msg = "success";
							}
						}
					}
				}else if(loreType.equals("解题示范")){
					List<LoreQuestion> lqList = lqm.listInfoByLoreId(loreId, loreType, -1);
					Integer queNum = 1;
					Integer queOrder = 3;//解题示范3
					if(lqList.size() > 0){
						queNum = lqList.size() + 1;
						queOrder = 3;
					}
					String queTitle = loreType + "第" + queNum + "题";//解题示范第几题
					String queSub =  Transcode.unescape_new1("queSub", request);//题干
					String queAnswer = Transcode.unescape_new1("queAnswer", request);//题干
					String queResolution = Transcode.unescape_new1("queResolution", request);//解析
					lqm.addSimpleLoreQuestion(loreId, loreType, queTitle, queSub, queNum, queOrder, queAnswer, queResolution, operateUserName, operateDate);
					msg = "success";
				}else if(loreType.equals("知识讲解")){
					List<LoreQuestion> lqList = lqm.listInfoByLoreId(loreId, loreType, -1);
					if(lqList.size() == 0){
						//没记录才能增加
						String queTitle = loreType;
						String queSub =  Transcode.unescape_new1("queSub", request);//题干
						String queAnswer = Transcode.unescape_new1("queAnswer", request);//视频地址
						lqm.addSimpleLoreQuestion(loreId, loreType, queTitle, queSub, 1, 170, queAnswer, "", operateUserName, operateDate);
						msg = "success";
					}else{
						msg = "noAdd";
					}
				}else{//巩固训练、针对性诊断、再次诊断
					List<LoreQuestion> lqList = lqm.listInfoByLoreId(loreId, loreType, -1);
					Integer queNum = 1;
					Integer queOrder = 0;//ggxl(巩固训练)4-10,zdzd(针对性诊断)11-20,zczd(再次诊断)21-30
					if(lqList.size() > 0){
						queNum = lqm.getMaxNumInfoByOpt(loreId, loreType, -1).getQueNum() + 1;
						queOrder = lqList.get(lqList.size() - 1).getQueOrder() + 1;
						if(loreType.equals("巩固训练")){
							if(queOrder > 10){
								queOrder = 10;
							}
						}else if(loreType.equals("针对性诊断")){
							if(queOrder > 20){
								queOrder = 20;
							}
						}else{
							if(queOrder > 30){
								queOrder = 30;
							}
						}
					}else{
						if(loreType.equals("巩固训练")){
							queOrder = 4;
						}else if(loreType.equals("针对性诊断")){
							queOrder = 11;
						}else{
							queOrder = 21;
						}
					}
					String queTitle = loreType + "第" + queNum + "题";//第几题
					String queSub =  Transcode.unescape_new1("queSub", request);//题干
					String queAnswer = Transcode.unescape_new1("queAnswer", request);//答案
					Integer queTipId = CommonTools.getFinalInteger("queTipId", request);//提示(知识清单，点拨指导子表的编号)
					Integer lexId = CommonTools.getFinalInteger("lexId", request);//词库编号
					String queResolution = Transcode.unescape_new1("queResolution", request);//解析
					String queType = Transcode.unescape_new1("queType", request);//题型一
					String queType2 = Transcode.unescape_new1("queType2", request);//题型二
					String answerA = Transcode.unescape_new1("answerA", request);
					String answerB = Transcode.unescape_new1("answerB", request);
					String answerC = Transcode.unescape_new1("answerC", request);
					String answerD = Transcode.unescape_new1("answerD", request);
					String answerE = Transcode.unescape_new1("answerE", request);
					String answerF = Transcode.unescape_new1("answerF", request);
					Integer queClassTeaId = CommonTools.getFinalInteger("queClassTeaId", request);//上传题老师编号
					if(CommonTools.getLoginRoleName(request).equals("老师")){//班内老师
						queClassTeaId = CommonTools.getLoginUserId(request);
					}
					lqm.addLoreQuestion(loreId, loreType, queNum, queTitle, queSub, queAnswer, queTipId, lexId, queResolution, queType,
							queOrder, queType2, answerA, answerB, answerC, answerD, answerE, answerF, operateUserName, operateDate, queClassTeaId);
					msg = "success";
				}
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 上传知识讲解视频mp4,flv
	 * @author wm
	 * @date 2019-5-26 下午12:11:51
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward uploadFile(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		String msg = "";
		boolean upFlag = false;
		String fileUrl = "";
		String filename = "";
		Map<String,Object> map = new HashMap<String,Object>();
		Integer loreId = CommonTools.getFinalInteger("loreId", request);//知识点编号
		if(loreId > 0){
			if (ServletFileUpload.isMultipartContent(request)){// 判断是否是上传文件
				DiskFileItemFactory diskFileItemFactory = new DiskFileItemFactory();// 创建工厂对象
				ServletFileUpload fileUpload = new ServletFileUpload(diskFileItemFactory); // 创建上传对象
				try {
					List<FileItem> filelist = fileUpload.parseRequest(request);
					ListIterator<FileItem> iterator = filelist.listIterator();
					String userPath = WebUrl.DIAGNOSIS_DATA_URL + "/" + loreId;
					String filePre = "";
					while (iterator.hasNext()) {
						FileItem fileItem = iterator.next();// 获取文件对象
						// 处理文件上传
						filename = fileItem.getName();// 获取名字
						Integer lastIndex = filename.lastIndexOf(".");
						String suffix = filename.substring(lastIndex+1);
						filePre = filename.substring(0, lastIndex);
						filename = filePre + "_" + CurrentTime.getRadomTime() + "." + suffix;
						CheckImage ci = new CheckImage();
						//xls,xlsx
						if(suffix.equals("mp4") || suffix.equals("flv")){//文件限制50M
							upFlag = ci.checkItemSize(fileItem, 50 * 1024 * 1024);
							if(!upFlag){
								msg = "outSize";
							}
						}else{
							msg = "suffixError";//上传文件必须是xlsx格式
						}
						if(upFlag){
							byte[] data = fileItem.get();// 获取数据
							//没有该文件夹先创建文件夹
				    		File file = new File(userPath);
				    		if(!file.exists()){
				    			file.mkdirs();
				    		}
				    		FileOutputStream fileOutputStream = new FileOutputStream(userPath + "/" + filename);
							fileOutputStream.write(data);// 写入文件
							fileOutputStream.close();// 关闭文件流
							msg = "success";
							fileUrl +=  WebUrl.NEW_DIAGNOSIS_DATA_URL  + loreId + "/" + filename + ",";
							if(!fileUrl.equals("")){
								fileUrl = fileUrl.substring(0, fileUrl.length() - 1);
							}
							map.put("data", fileUrl);
							map.put("fileName", filename);
							map.put("code", 0);
						}
					}
					map.put("msg", msg);
					CommonTools.getJsonPkg(map, response);
				}catch (FileUploadException e) {
					e.printStackTrace();
				}catch (FileNotFoundException e) {
					e.printStackTrace();
				}catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
		return null;
	}
	
	/**
	 * 获取是否能增加主题、重点、难点，关键点，易混点、知识讲解的能力
	 * @author wm
	 * @date 2019-5-12 下午05:06:25
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward checkAddInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		LoreQuestionManager lqm = (LoreQuestionManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_QUESTION_INFO);
		Integer loreId = CommonTools.getFinalInteger("loreId", request);
		String loreType = Transcode.unescape_new1("loreType", request);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "noAdd";
		List<LoreQuestion> lqList = lqm.listInfoByLoreId(loreId, loreType, -1);
		if(lqList.size() == 0){//未增加过
			//都能增加
			msg = "add";
		}else{
			if(!loreType.equals("知识讲解")){
				List<LoreQuestionSubInfo> lqsList = lqm.listLQSInfoByLqId(lqList.get(0).getId(), "主题");
				if(lqsList.size() > 0){
					//存在主题信息，不能增加点拨指导
					msg = "editZt";
				}else{//不存在主题信息
					//多出一种情况(子表全被删除了)
					if(lqm.listLQSInfoByLqId(lqList.get(0).getId(), "").size() == 0){
						//没有子表任何信息
						msg = "add";//都能增加
					}else{
						//存在重点，难点，关键点，易混点
						msg = "addLast";//只能增加重点，难点，关键点，易混点
					}
				}
			}else{
				List<LoreQuestionSubInfo> lqsList = lqm.listLQSInfoByLqId(lqList.get(0).getId(), loreType);
				if(lqsList.size() ==  0){
					msg = "add";
				}
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 根据知识点拼音编码/名称模糊获取知识点列表（通用版）
	 * @author wm
	 * @date 2019-5-13 下午04:36:46
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getLoreList(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		LoreInfoManager lm = (LoreInfoManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_INFO);
		String loreName = Transcode.unescape_new1("loreName", request);
		String loreNamePy = CommonTools.getFinalStr("loreNamePy", request);
		Integer ediId = CommonTools.getFinalInteger("ediId", request);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "noInfo";
		List<LoreInfo> lqList = lm.listInfoByLorePyOrName(loreNamePy, loreName,ediId);
		if(lqList.size() > 0){
			msg = "success";
			List<Object> list_d = new ArrayList<Object>();
			for(Iterator<LoreInfo> it = lqList.iterator() ; it.hasNext();){
				LoreInfo lore = it.next();
				Map<String,Object> map_d = new HashMap<String,Object>();
				Chapter cpt = lore.getChapter();
				Education edu = cpt.getEducation();
				GradeSubject gs = edu.getGradeSubject();
				map_d.put("loreId", lore.getId());//知识点编号
				map_d.put("loreName", lore.getLoreName());//知识点名称
				map_d.put("inUse", lore.getInUse().equals(0) ? "启用" : "未启用");//状态
				map_d.put("ediName", edu.getEdition().getEdiName());//出版社名称
				map_d.put("cptName", cpt.getChapterName());//章节名称
				map_d.put("eduName", edu.getEduVolume());//教材
				map_d.put("subName", gs.getSubject().getSubName());//学科
				map_d.put("gradeName", gs.getGradeName());//年级
				list_d.add(map_d);
			}
			map.put("loreList", list_d);
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 导向生成其他版本知识点页面
	 * @author wm
	 * @date 2019-5-14 上午08:50:00
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward goNewEdiLorePage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		return mapping.findForward("newEdiLorePage");
	}
	
	/**
	 * 增加其他版本知识点目录（并自动创建新版本的知识点的关联）
	 * @author wm
	 * @date 2019-5-14 上午08:52:17
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward addNewEdiLoreCatalog(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		LoreInfoManager lm = (LoreInfoManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_INFO);
		ChapterManager cm = (ChapterManager) AppFactory.instance(null).getApp(Constants.WEB_CHAPTER_INFO);
		LoreRelateManager lrm = (LoreRelateManager)AppFactory.instance(null).getApp(Constants.WEB_LORE_RELATE_INFO);
		Map<String,String> map = new HashMap<String,String>();
		Integer cptId = CommonTools.getFinalInteger("cptId", request);
		String loreCatalogNameStr = Transcode.unescape_new1("loreCatalogNameStr", request);//新版本的loreName,通用版的loreId并在页面通过arrayToJson封装
		String msg = "error";
		Integer cptOrder = 0;
		Integer ediId = 0;
		Integer subId = 0;
		String subIdCode = "";
		String gradeName = "";
		String gradeCode = "";
		String eduVolume = "";
		String loreCode = "";
		String loreOrderCode = "";//知识点顺序
		if(cptId > 0 && !loreCatalogNameStr.equals("")){
			Integer loreOrder = lm.getCurrentMaxOrderByCptId(cptId);
			Chapter c = cm.getEntityById(cptId);
			if(c != null){
				msg = "success";
				cptOrder = c.getChapterOrder();
				Education edu = c.getEducation();
				ediId = edu.getEdition().getId();
				subId = edu.getGradeSubject().getSubject().getId();
				gradeName = edu.getGradeSubject().getGradeName();
				gradeCode = Convert.ChineseConvertNumber(gradeName);
				eduVolume = edu.getEduVolume();
				if(subId < 10){
					subIdCode = "0" + subId;
				}
				String paraCode = "";//学段号
				Integer gradeNum = Integer.parseInt(gradeCode);
				if(gradeNum < 7){
					paraCode = "01";
				}else if(gradeNum >= 7 && gradeNum <= 9){
					paraCode = "02";
				}else{
					paraCode = "03";
				}
				String eduVolumeCode = "02";//教材编号
				if(eduVolume.equals("上册")){
					eduVolumeCode = "01";
				}
				
				String ediIdCode = "";//出版社号
				if(ediId < 10){
					ediIdCode = "0" + ediId;
				}
				String cptOrderCode = "";//章节号
				if(cptOrder < 10){
					cptOrderCode = "0" + cptOrder;
				}
				JSONArray loreCatalogArray = JSON.parseArray(loreCatalogNameStr);
				Integer size = loreCatalogArray.size();
				//下面三个数组为一一对应
				Integer[] newLoreIdArr = new Integer[size];//新版本知识点loreId数组
				Integer[] tyLoreIdArr = new Integer[size];//新版本知识点对应的通用版loreId数组
				String[] newLoreCodeArr = new String[size];//新版本知识点知识点编码
				for(int i = 0 ; i < size ; i++){
					loreOrder += i;
					if(loreOrder < 10){
						loreOrderCode = "0" + loreOrder;
					}
					loreCode = subIdCode + "-" + ediIdCode + "-" + paraCode + "-" + gradeCode + "-" + eduVolumeCode + "-"  + cptOrderCode + "-" + loreOrderCode;
					String[] newLoreCatalogNameArray = loreCatalogArray.get(i).toString().split(",");//格式loreName,loreId
					String newLoreCatalogName = newLoreCatalogNameArray[0];
					Integer quoteLoreId = Integer.parseInt(newLoreCatalogNameArray[1]);//通用版知识点
					//增加其他版本知识点目录
					Integer newLoreId = lm.addLore(cptId, newLoreCatalogName, Convert.getFirstSpell(newLoreCatalogName), loreOrder, quoteLoreId, loreCode);
					newLoreIdArr[i] = newLoreId;
					tyLoreIdArr[i] = quoteLoreId;
				}
				for(Integer j = 0 ; j < newLoreIdArr.length ; j++){//循环新增加的新版本知识点
					List<LoreRelateInfo> lrList = lrm.listRelateInfoByOpt(tyLoreIdArr[j], 0, -1,"");//获取通用版的关联
					if(lrList.size() > 0){
						for(Iterator<LoreRelateInfo> it = lrList.iterator() ; it.hasNext();){
							LoreRelateInfo lr = it.next();
							Integer roolLoreId_ty = lr.getRootLoreInfo().getId();//获取通用版的关联知识点
							LoreInfo lore = lm.getLoreInfoByOpt(roolLoreId_ty, ediId);//根据通用版的关联知识点获取新版本下对应的知识点
							if(lore != null){
								Integer loreId_root_edi = lore.getId();
								String loreCode_root_edi = lore.getLoreCode();
								if(Long.parseLong(newLoreCodeArr[j]) > Long.parseLong(loreCode_root_edi)){
									//检查有无此条记录，没有就增加
									if(lrm.listRelateInfoByOpt(newLoreIdArr[j], loreId_root_edi, -1, "").size() == 0){
										lrm.addLoreRelate(newLoreIdArr[j], loreId_root_edi, "auto");
									}
								}
							}
						}
					}
				}
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
}