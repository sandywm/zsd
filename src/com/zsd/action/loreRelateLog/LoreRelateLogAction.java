/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.zsd.action.loreRelateLog;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.zsd.action.base.Transcode;
import com.zsd.factory.AppFactory;
import com.zsd.module.Education;
import com.zsd.module.LoreRelateLogInfo;
import com.zsd.page.PageConst;
import com.zsd.service.LoreRelateLogManager;
import com.zsd.tools.CommonTools;
import com.zsd.util.Constants;

/** 
 * MyEclipse Struts
 * Creation date: 11-11-2019
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class LoreRelateLogAction extends DispatchAction {
	
	/**
	 * 导向知识点关联日志页面
	 * @author wm
	 * @date 2019-11-11 下午04:38:13
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward goLRLPage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		return mapping.findForward("lrlPage");
	}
	
	/**
	 * 分页获取知识点关联日志列表
	 * @author wm
	 * @date 2019-11-11 下午04:39:13
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception 
	 */
	public ActionForward getLRLData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		LoreRelateLogManager lrlm = (LoreRelateLogManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_RELATE_LOG_INFO);
		String lorePyCode = CommonTools.getFinalStr("lorePyCode", request);
		String loreName = Transcode.unescape_new1("loreName", request);
		Integer ediId = CommonTools.getFinalInteger("ediId", request);//0表示全部
		Integer relateStatus = CommonTools.getFinalInteger("relateStatus", request);//关联状态(0:失败，1：成功，-1：表示全部)
		String msg = "暂无记录";
		Map<String,Object> map = new HashMap<String,Object>();
		Integer count = lrlm.getCountByOpt(lorePyCode, loreName, ediId,relateStatus);
		if(count>0){
			Integer pageSize = PageConst.getPageSize(String.valueOf(request.getParameter("limit")), 10);//等同于pageSize
			Integer pageNo = CommonTools.getFinalInteger("page", request);//等同于pageNo
			List<LoreRelateLogInfo> lrlList = lrlm.listPageInfoByOpt(lorePyCode, loreName, ediId, relateStatus,pageNo, pageSize);
			List<Object> list_d = new ArrayList<Object>();
			for(LoreRelateLogInfo lrl : lrlList){
				Map<String,Object> map_d = new HashMap<String,Object>();
				map_d.put("lrlId", lrl.getId());
				map_d.put("loreName", lrl.getLoreInfo().getLoreName());
				Education edu = lrl.getLoreInfo().getChapter().getEducation();
				Integer schoolType = edu.getGradeSubject().getSchoolType();
				String schoolTypeChi = "";
				if(schoolType.equals(1)){
					schoolTypeChi = "小学";
				}else if(schoolType.equals(1)){
					schoolTypeChi = "初中";
				}else if(schoolType.equals(1)){
					schoolTypeChi = "高中";
				}
				map_d.put("schoolType", schoolTypeChi);//学段
				map_d.put("gradeName", edu.getGradeSubject().getGradeName());//年级
				map_d.put("subName", edu.getGradeSubject().getSubject().getSubName());//学科
				map_d.put("ediName", edu.getEdition().getEdiName());//出版社
				map_d.put("cptName", lrl.getLoreInfo().getChapter().getChapterName());//章节
				map_d.put("eduVolume",edu.getEduVolume());//上下册
				map_d.put("relateResult", lrl.getRelateResult());
				map_d.put("relateStatus", lrl.getRelateStatus());
				map_d.put("relateDate", lrl.getRelateTime());
				map_d.put("relateUser", lrl.getRelateUser());
				list_d.add(map_d);
			}
			map.put("data", list_d);
			map.put("count", count);
			map.put("code", 0);
			msg = "success";
		}
		map.put("msg", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 根据通用版知识典关联编号获取其他版本关联信息
	 * @author wm
	 * @date 2019-11-22 下午01:35:55
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getSpecLRLData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		LoreRelateLogManager lrlm = (LoreRelateLogManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_RELATE_LOG_INFO);
		String msg = "error";
		Map<String,Object> map = new HashMap<String,Object>();
		Integer lrId = CommonTools.getFinalInteger("lrId", request);
		if(lrId > 0){
			List<LoreRelateLogInfo> lrlList = lrlm.listInfoByLrId(lrId);
			if(lrlList.size() > 0){
				msg = "success";
				List<Object> list_d = new ArrayList<Object>();
				for(LoreRelateLogInfo lrl : lrlList){
					Map<String,Object> map_d = new HashMap<String,Object>();
					map_d.put("resultStatus",lrl.getRelateStatus());
					map_d.put("relateResult", lrl.getRelateResult());
					list_d.add(map_d);
				}
				map.put("relateList", list_d);
			}else{
				msg = "noInfo";
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
}