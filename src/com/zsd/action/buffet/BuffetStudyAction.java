/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.zsd.action.buffet;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.zsd.action.base.Transcode;
import com.zsd.factory.AppFactory;
import com.zsd.module.BuffetLoreRelateInfo;
import com.zsd.module.BuffetLoreStudyDetailInfo;
import com.zsd.module.BuffetLoreStudyLogInfo;
import com.zsd.module.BuffetQueInfo;
import com.zsd.module.BuffetSendInfo;
import com.zsd.module.BuffetStudyDetailInfo;
import com.zsd.module.LoreInfo;
import com.zsd.module.LoreQuestion;
import com.zsd.module.LoreQuestionSubInfo;
import com.zsd.module.StudentParentInfo;
import com.zsd.module.StudyLogInfo;
import com.zsd.module.json.LoreTreeMenuJson;
import com.zsd.service.BuffetLoreRelateInfoManager;
import com.zsd.service.BuffetLoreStudyDetailManager;
import com.zsd.service.BuffetLoreStudyLogManager;
import com.zsd.service.BuffetSendInfoManager;
import com.zsd.service.BuffetStudyDetailManager;
import com.zsd.service.LoreInfoManager;
import com.zsd.service.LoreQuestionManager;
import com.zsd.service.StudentParentInfoManager;
import com.zsd.service.UserManager;
import com.zsd.tools.CommonTools;
import com.zsd.tools.Convert;
import com.zsd.tools.CurrentTime;
import com.zsd.util.Constants;

/** 
 * MyEclipse Struts
 * Creation date: 06-25-2019
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class BuffetStudyAction extends DispatchAction {
	
	/**
	 * 自助餐在线学习页面
	 * @author wm
	 * @date 2019-6-25 上午11:19:48
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward goBuffetStudyPage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		return mapping.findForward("buffetStudyPage");
	}
	
	/**
	 * 获取网络导师、班内老师发布的自助餐数据
	 * @author wm
	 * @date 2019-6-25 上午11:20:51
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception 
	 */
	public ActionForward getBuffetSendData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		BuffetSendInfoManager bsm = (BuffetSendInfoManager)AppFactory.instance(null).getApp(Constants.WEB_BUFFET_SEND_INFO);
		StudentParentInfoManager spm = (StudentParentInfoManager)AppFactory.instance(null).getApp(Constants.WEB_STUDENT_PARENT_INFO);
		Integer userId = CommonTools.getLoginUserId(request);
		Integer roleId = CommonTools.getLoginRoleId(request);
		Integer subId = CommonTools.getFinalInteger("subId", request);
		Integer comStatus = CommonTools.getFinalInteger("comStatus", request);//完成状态，默认未全部0
		String sDate = CommonTools.getFinalStr("sDate", request);
		String eDate = CommonTools.getFinalStr("eDate", request);
		String opt = CommonTools.getFinalStr("opt", request);//默认为正常滑动，其他的时候为做完题后返回
		Integer pageNo = CommonTools.getFinalInteger("pageNo", request);//默认为1
		Integer pageSize = CommonTools.getFinalInteger("pageSize", request);//默认为10
		if(pageSize <= 0){
			pageSize = 10;
		}
		if(subId.equals(0)){
			subId = 2;//默认为数学
		}
		if(sDate.equals("") && eDate.equals("")){
			eDate = CurrentTime.getStringDate();
			sDate = CurrentTime.getFinalDate(-2);
		}
		if(comStatus.equals(0)){
			comStatus = -1;
		}
		String msg = "error";
		Map<String,Object> map = new HashMap<String,Object>();
		if(userId > 0){
			if(!opt.equals("")){//做完题后自动返回
				pageSize = pageNo * pageSize;
				pageNo = 1;
			}
			if(roleId.equals(Constants.PATENT_ROLE_ID)){//家长角色需要获取自己孩子的userId
				StudentParentInfo sp = spm.getEntityByParId(userId);
				if(sp != null){
					userId = sp.getStu().getId();//孩子的Id
				}
			}
			List<BuffetSendInfo> bsList = bsm.listPageInfoByOption(userId, subId, comStatus, sDate, eDate, pageNo, pageSize);
//			Integer count = bsm.listBsInfoByOption(userId, subId, comStatus, sDate, eDate).size();
			if(bsList.size() > 0){
				msg = "success";
//				Integer countPage = PageConst.getPageCount(count, pageSize);
//				pageNo = PageConst.getPageNo(pageNo, countPage);
				List<Object> list_d = new ArrayList<Object>();
				for(BuffetSendInfo bs : bsList){
					Map<String,Object> map_d = new HashMap<String,Object>();
					map_d.put("bsId", bs.getId());
					map_d.put("subName", bs.getStudyLogInfo().getSubject().getSubName());
					map_d.put("loreName", bs.getStudyLogInfo().getLoreInfo().getLoreName());
					map_d.put("studyResult", bs.getStudyResult());//1:未完成，2:已完成
					map_d.put("allNumber", bs.getSendNumber());
					map_d.put("comNumber", bs.getComNumber());
					map_d.put("sendUserInfo", bs.getUser().getRealName());
					map_d.put("sendDate", bs.getSendTime().substring(0, 10));
					list_d.add(map_d);
				}
				map.put("studyList", list_d);
//				map.put("countPage", countPage);
			}else{
				msg = "noInfo";
			}
		}
		map.put("result", msg);
		map.put("sDate", sDate);
		map.put("eDate", eDate);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 获取指定发送的自助餐题库
	 * @author wm
	 * @date 2019-6-26 上午10:13:55
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getBuffetQueData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		BuffetStudyDetailManager bsdm = (BuffetStudyDetailManager) AppFactory.instance(null).getApp(Constants.WEB_BUFFET_STUDY_DETAIL_INFO);
		Integer bsId = CommonTools.getFinalInteger("bsId", request);
		Integer userId = CommonTools.getLoginUserId(request);
		String msg = "noInfo";
		Map<String,Object> map = new HashMap<String,Object>();
		List<BuffetStudyDetailInfo> bsdList = bsdm.listInfoByBsId(bsId);
		if(bsdList.size() > 0){
			if(bsdList.get(0).getBuffetSendInfo().getStudyLogInfo().getUser().getId().equals(userId)){
				msg = "success";
				List<Object> list_d = new ArrayList<Object>();
				for(BuffetStudyDetailInfo bsd : bsdList){
					Map<String,Object> map_d = new HashMap<String,Object>();
					map_d.put("bsdId", bsd.getId());
					map_d.put("bsId", bsId);
					StudyLogInfo sl = bsd.getBuffetSendInfo().getStudyLogInfo();
					map_d.put("studyLogId", sl.getId());
					LoreInfo lore = sl.getLoreInfo();
					map_d.put("ediLoreId", lore.getId());//出版社下的知识点编号
					map_d.put("ediLoreName", lore.getLoreName());
					BuffetQueInfo buff = bsd.getBuffetQueInfo();
					map_d.put("buffetId", buff.getId());
					map_d.put("quoteLoreId", buff.getLoreInfo().getId());//通用版下的知识点编号
					String lqType = buff.getQueType();
					map_d.put("queType", lqType);
					map_d.put("buffTypeId", buff.getBuffetTypeInfo().getId());
					map_d.put("buffTypeName", buff.getBuffetTypeInfo().getTypes());
					map_d.put("title", buff.getTitle());
					map_d.put("subject", buff.getSubject());
					map_d.put("answerA", buff.getA());
					map_d.put("answerB", buff.getB());
					map_d.put("answerC", buff.getC());
					map_d.put("answerD", buff.getD());
					map_d.put("answerE", buff.getE());
					map_d.put("answerF", buff.getF());
					map_d.put("resolution", buff.getResolution());
					map_d.put("myAnswer", bsd.getMyAnswer());
					if(!bsd.getMyAnswer().equals("")){//说明该题已做
						//答案选项选用做题时的答案选项
						map_d.put("answerA", bsd.getA());
						map_d.put("answerB", bsd.getB());
						map_d.put("answerC", bsd.getC());
						map_d.put("answerD", bsd.getD());
						map_d.put("answerE", bsd.getE());
						map_d.put("answerF", bsd.getF());
						map_d.put("realAnswer", bsd.getRealAnswer());
					}
					map_d.put("studyResult", bsd.getResult());
					map_d.put("traceComStatus", bsd.getTraceComStatus());
					map_d.put("currComStatus", bsd.getCurrComStatus());
					if(lqType.equals("单选题") || lqType.equals("多选题") || lqType.equals("判断题") || lqType.equals("填空题") || lqType.equals("问答题")){
						map_d.put("answerNum", 1);
					}else{//填空选择题
						map_d.put("answerNum", bsd.getRealAnswer().split(",").length);
					}
					if(lqType.equals("填空题") || lqType.equals("问答题")){
						map_d.put("realAnswer", bsd.getRealAnswer());
					}
					list_d.add(map_d);
				}
				map.put("bsdList", list_d);
				map.put("loreName", bsdList.get(0).getBuffetSendInfo().getStudyLogInfo().getLoreInfo().getLoreName());
				map.put("subDetail", "针对该知识点而设定的自助餐诊断题目共"+bsdList.size()+"题");
			}else{
				msg = "error";
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 做自助餐题，修改自助餐题库信息
	 * @author wm
	 * @date 2019-6-26 下午03:22:51
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward updateBuffetStudyDetail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		BuffetStudyDetailManager bsdm = (BuffetStudyDetailManager) AppFactory.instance(null).getApp(Constants.WEB_BUFFET_STUDY_DETAIL_INFO);
		BuffetSendInfoManager bsm = (BuffetSendInfoManager)AppFactory.instance(null).getApp(Constants.WEB_BUFFET_SEND_INFO);
		UserManager um = (UserManager)AppFactory.instance(null).getApp(Constants.WEB_USER_INFO);
		Integer userId = CommonTools.getLoginUserId(request);
		Integer bsdId = CommonTools.getFinalInteger("bsdId", request);
		String myAnswer = Transcode.unescape_new1("myAnswer", request);
		String answerOptionArrayStr = Transcode.unescape_new1("answerOptionArray",request);
		String[] answerOptionStr = {"","","","","",""};
		String msg = "error";
		boolean flag = false;
		Integer result = 0;//0为错,1为对
		String dataBaseAnswerChar = "";
		Map<String,Object> map = new HashMap<String,Object>();
		if(userId > 0 && bsdId > 0){
			msg = "success";
			BuffetStudyDetailInfo bsd = bsdm.getEntityById(bsdId);
			if(bsd != null){
				if(bsd.getResult().equals(-1)){
					Integer bsId = bsd.getBuffetSendInfo().getId();
					BuffetQueInfo bq = bsd.getBuffetQueInfo();
					String buffetType = bq.getBuffetTypeInfo().getTypes();
					String realAnswer = bq.getAnswer();
					if(buffetType.equals("问答题") || buffetType.equals("填空题")){
						if(myAnswer.indexOf("正确") >= 0){
							result = 1;
						}else{
							result = 0;
						}
						dataBaseAnswerChar = answerOptionArrayStr;
					}else{
						JSONArray answerOptionArray = JSON.parseArray(answerOptionArrayStr);
						String[] dataBaseAnswerArray = realAnswer.split(",");
						for(int j = 0; j < dataBaseAnswerArray.length; j++){
							for(int i = 0; i < answerOptionArray.size(); i++){
								String answerOption = answerOptionArray.get(i).toString();
								if(answerOption.indexOf("Module/commonJs/ueditor/jsp/lore") >= 0){
									//表示答案选项是图片--截取前面的路径
									answerOption = answerOption.replace("Module/commonJs/ueditor/jsp/lore/", "");
								}
								if(dataBaseAnswerArray[j].equals(answerOption)){
									dataBaseAnswerChar += Convert.NumberConvertBigChar(i)+",";
									break;
								}
							}
						}
						dataBaseAnswerChar = dataBaseAnswerChar.substring(0, dataBaseAnswerChar.length() - 1);
						if(buffetType.equals("多选题")){
							flag = false;//顺序可以不同
						}else{//不是多选题答案需要完全匹配(填空选择题、单选题，判断题)
							flag = true;
						}
						if(flag){//完全匹配
							if(dataBaseAnswerChar.equals(myAnswer)){
								result = 1;
							}else{
								result = 0;
							}
						}else{//答案顺序可以不同
							String[] myAnserArray = myAnswer.split(",");
							String[] realAnswerArray = dataBaseAnswerChar.split(",");
							String newMyAnswer = CommonTools.arraySort(myAnserArray);//排序后我的答案
							String newRealAnswer = CommonTools.arraySort(realAnswerArray);//排序后后台正确答案
							if(newMyAnswer.equals(newRealAnswer)){
								result = 1;
							}else{
								result = 0;
							}
						}
						for(int i = 0 ; i < answerOptionArray.size() ; i++){
							answerOptionStr[i] = answerOptionArray.get(i).toString();
						}
					}
					//修改自助餐答题情况
					boolean upFlag = bsdm.updateBuffetStudyDetailById(bsdId, myAnswer, result, CurrentTime.getCurrentTime(), 
							answerOptionStr[0], answerOptionStr[1], answerOptionStr[2],
					        answerOptionStr[3], answerOptionStr[4], answerOptionStr[5]);
					if(bsd.getResult().equals(0)){//第一次做巴菲特题时才修改状态
						bsm.updateBuffetSend(bsId, 1, 0);
					}
					Integer coin = 0;//自助餐不增加金币数
					Integer experience = Constants.EXPERIENCE;
					if(upFlag){
						if(result.equals(1)){
							experience += Constants.EXPERIENCE;
							//当巴菲特题直接正确时--需要修改buffetStudyDetail中的traceCompleteFlag和currCompleteFlag的值为1
							bsdm.updateStatusById(bsdId, 1, 1);
							//修改自助餐发送记录中的完成次数
							bsm.updateBuffetSend(bsId, 0, 1);
						}
						um.updateUser(userId, coin, experience, 0, 0);
					}
					map.put("studyResult", result);
				}else{
					msg = "reSubmit";//不能重复提交
				}
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 获取当前自助餐下的关联知识点（筛去没有的）
	 * @author wm
	 * @date 2019-6-27 上午08:05:49
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward showRelationByBuffetAndLore(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		BuffetLoreRelateInfoManager blrm = (BuffetLoreRelateInfoManager) AppFactory.instance(null).getApp(Constants.WEB_BUFFET_LORE_RELATE_INFO);
//		BuffetQueInfoManager bm = (BuffetQueInfoManager)  AppFactory.instance(null).getApp(Constants.WEB_BUFFET_QUE_INFO);
//		JoinLoreRelationManager jlrm = (JoinLoreRelationManager) AppFactory.instance(null).getApp(Constants.WEB_JOIN_LORE_RELATE_INFO);
		LoreInfoManager lm = (LoreInfoManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_INFO);
		Integer buffetId = CommonTools.getFinalInteger("buffetId", request);
		Integer currLoreId = CommonTools.getFinalInteger("currLoreId", request);;//出版社下知识点编号(最初学习记录中的知识点编号)
//		Integer currBasicLoreId = 0;//通用知识点--自助餐属于该知识点名下
		String relateLoreIdStr = "";//该出版社下的关联知识点
		Integer editionId = 0;//当前知识点所在的出版社
		String msg = "error";
		Map<String,String> map = new HashMap<String,String>();
		if(buffetId > 0){
//			currBasicLoreId = bm.getEntityById(buffetId).getLoreInfo().getId();//该自助餐在哪个知识点名下(通用版)
			List<BuffetLoreRelateInfo> blrList = blrm.listInfoByOpt(buffetId, 0);
//			if(blrList.size() == 0){//表示该巴菲特下没有关联，需要查询与之合并的知识点，查询合并的知识点有无巴菲特题
//				//step1:根据通用知识点获取与之合并的其他知识点
//				JoinLoreRelation jlr = jlrm.getInfoByLoreId(currBasicLoreId);
//				if(jlr != null){
//					String[] loreIdArray = jlr.getLoreIdArray().split(",");
//					for(Integer i = 0 ; i < loreIdArray.length ; i++){
//						Integer joinLoreId = Integer.parseInt(loreIdArray[i]);
//						//step2:查询合并的知识点下面有无关联知识点（合并知识点共用关联知识点）
//						if(!currBasicLoreId.equals(joinLoreId)){
//							blrList = blrm.listInfoByOpt(buffetId, joinLoreId);
//							if(blrList.size() > 0){
//								break;
//							}
//						}
//					}
//				}
//			}
			if(blrList.size() > 0){
				LoreInfo lore = lm.getEntityById(currLoreId);
				if(lore != null){
					editionId = lore.getChapter().getEducation().getEdition().getId();
					//通用版关联的知识点
					for(BuffetLoreRelateInfo blr : blrList){
						List<LoreInfo> loreList = lm.listInfoByMainLoreId(blr.getLoreInfoByLoreId().getId());
						for(LoreInfo lore_tmp : loreList){
							Integer relateLoreId = lore_tmp.getId();
							Integer inUse = lore_tmp.getInUse();
							if(inUse.equals(0)){//获取知识点的启用状态0：启用
								//通过通用版知识点编号获取被引用的知识点所在的出版社
								Integer joinLoreEditionId = lore_tmp.getChapter().getEducation().getEdition().getId();
								if(editionId.equals(joinLoreEditionId)){//两个出版社必须保持一致
									relateLoreIdStr += relateLoreId + ",";
									break;
								}
							}
						}
					}
				}
			}else{
				msg = "noInfo";
			}
			if(!relateLoreIdStr.equals("")){
				relateLoreIdStr = relateLoreIdStr.substring(0, relateLoreIdStr.length() - 1);
				msg = "success";
				map.put("relateLoreIdStr", relateLoreIdStr);
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 获取当前巴菲特发布记录的详细完成情况（opt=trace时必须traceFlag完成，防止恶意提交。opt=currCom主要用于提交后页面不刷新时答题状态不变化）
	 * false:1,true:0
	 * @author wm
	 * @date 2019-6-27 上午09:41:16
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getCurrBuffetInfo(ActionMapping mapping ,ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		BuffetStudyDetailManager bsdm = (BuffetStudyDetailManager) AppFactory.instance(null).getApp(Constants.WEB_BUFFET_STUDY_DETAIL_INFO);
		Integer bsdId = CommonTools.getFinalInteger("bsdId", request);
		String opt = CommonTools.getFinalStr("opt", request);//trace(溯源完成标记),currCom(当前自助餐完成标记)
		Integer userId = CommonTools.getLoginUserId(request);
		BuffetStudyDetailInfo bsd = bsdm.getEntityById(bsdId);
		boolean flag = true;
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "error";
		if(bsd != null){
			Integer realUserId = bsd.getBuffetSendInfo().getStudyLogInfo().getUser().getId();
			if(realUserId.equals(userId)){
				if(opt.equals("trace")){
					Integer status = bsd.getTraceComStatus();//0:未完成,1:已完成
					if(status.equals(1)){
						flag = false;
					}
					map.put("status", flag);
					msg = "success";
				}else if(opt.equals("currCom")){
					map.put("status", bsd.getCurrComStatus());
					msg = "success";
				}
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 根据巴菲特学习记录编号修改当前巴菲特学习记录已完成currCompleteFlag=1
	 * @author wm
	 * @date 2019-6-27 上午10:04:21
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward updateCurrCompleteFlag(ActionMapping mapping ,ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		BuffetStudyDetailManager bsdm = (BuffetStudyDetailManager) AppFactory.instance(null).getApp(Constants.WEB_BUFFET_STUDY_DETAIL_INFO);
		BuffetSendInfoManager bsm = (BuffetSendInfoManager)AppFactory.instance(null).getApp(Constants.WEB_BUFFET_SEND_INFO);
		Integer bsdId = CommonTools.getFinalInteger("bsdId", request);
		Integer userId = CommonTools.getLoginUserId(request);
		boolean flag = false;
		if(bsdId > 0){
			BuffetStudyDetailInfo bsd = bsdm.getEntityById(bsdId);
			if(bsd != null){
				BuffetSendInfo bs = bsdm.getEntityById(bsdId).getBuffetSendInfo();
				Integer realUserId = bs.getStudyLogInfo().getUser().getId();
				if(realUserId.equals(userId)){
					Integer bsId = bs.getId();
					Integer allNumber = bs.getSendNumber();//已发送的自助餐题量
					Integer comNumber = bs.getComNumber();//已完成的自助餐题量
					Integer isFinish = 0;
					Integer result = bs.getStudyResult();//自助餐完成情况--1：未完成，2：已完成
					if(result.equals(2)){//发布自助餐全部完成时不能修改
						flag = true;//不修改数据库直接返回
					}else{
						if(bsd.getCurrComStatus().equals(0)){//溯源回来修改数据
							flag = bsdm.updateStatusById(bsdId, 1, 1);//自助餐都完成了，肯定溯源也完成
							if(flag){
								Integer newComNumber = 0;
								//2:答题错误，进入溯源，溯源完成后，点击完成，这时completeNumber没+1，所以要执行增加
								newComNumber = 1;
								if(allNumber.equals(comNumber + 1)){//最后一题
									isFinish = 2;
								}
								flag = bsm.updateBuffetSend(bsId, isFinish, newComNumber);//溯源回来加1
							}
						}else{
							//一次性做正确时在insert方法中就修改了完成状态和溯源状态并修改了完成数，此时只需要修改结果状态
							//之前提交过，不能再次修改或者之前一次性做对了
							flag = true;
							if(allNumber.equals(comNumber)){//最后一题
								if(!result.equals(2)){
									flag = bsm.updateBuffetSend(bsId, 2, 0);
								}
							}
						}
					}
				}
			}
		}
//		
//		boolean flag = bsdm.updateStatusById(bsdId, 1, 1);//自助餐都完成了，肯定溯源也完成
//		if(flag){
//			BuffetSendInfo bs = bsdm.getEntityById(bsdId).getBuffetSendInfo();
//			Integer bsId = bs.getId();
//			Integer allNumber = bs.getSendNumber();//已发送的自助餐题量
//			Integer comNumber = bs.getComNumber();//已完成的自助餐题量
//			Integer isFinish = 0;
//			Integer result = bs.getStudyResult();//自助餐完成情况--0:错误，1：正确
//			Integer newComNumber = 0;
//			if(result.equals(0)){//溯源回来修改
//				//2:答题错误，进入溯源，溯源完成后，点击完成，这时completeNumber没+1，所以要执行增加
//				newComNumber = 1;
//				if(allNumber.equals(comNumber + 1)){//最后一题
//					isFinish = 2;
//				}
//			}else if(result.equals(1)){//直接做题正确修改
//				//1:直接答题正确，这时completeNumber已经+1，所以不能再执行增加
//				newComNumber = 0;
//				if(allNumber.equals(comNumber)){//做对自助餐题并且是最后一题
//					isFinish = 2;
//				}
//			}
//			flag = bsm.updateBuffetSend(bsId, isFinish, newComNumber);//溯源回来加1
//		}
		Map<String,Boolean> map = new HashMap<String,Boolean>();
		map.put("result", flag);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 自助餐答题错误后导向关联知识点的溯源页面（同在线学习的学习地图页面）
	 * @author wm
	 * @date 2019-6-29 上午09:22:35
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward goBuffetLoreStudyMapPage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
	
		return mapping.findForward("buffetStudyMapPage");
	}
	
	/**
	 * 自助餐答题错误后的学习地图页面数据
	 * @author wm
	 * @date 2019-6-29 上午09:26:39
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getBuffetLoreStudyMapData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		BuffetStudyDetailManager bsdm = (BuffetStudyDetailManager) AppFactory.instance(null).getApp(Constants.WEB_BUFFET_STUDY_DETAIL_INFO);
		BuffetLoreStudyLogManager blslm = (BuffetLoreStudyLogManager) AppFactory.instance(null).getApp(Constants.WEB_BUFFET_LORE_STUDY_LOG_INFO);
		BuffetLoreStudyDetailManager blsdm = (BuffetLoreStudyDetailManager) AppFactory.instance(null).getApp(Constants.WEB_BUFFET_LORE_STUDY_DETAIL_INFO);
		LoreInfoManager lm = (LoreInfoManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_INFO);
		LoreQuestionManager lqm = (LoreQuestionManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_QUESTION_INFO);
		Map<String,Object> map = new HashMap<String,Object>();
		String nextLoreIdArray = "";//下级知识典编号数组
		Integer isFinish = 0;
		Integer task = 1;//第几个任务数（课后复习任务数）
		Integer money = Constants.COIN;
		String loreTaskName = "";
		String buttonValue = "开始挑战";
		String path = "";//顺序路线图(诊断时)
		String pathChi = "";
		String studyPath = "";//反序路线图(学习时)
		Integer stepCount = 0;//知识点有多少级
		Integer loreCount = 0;//有多少知识点
		String pathType = "diagnosis";//类型:diagnosis--诊断，study--学习
		String loreTypeName = "针对性诊断";
		Integer access = -1;
		Integer bsdId = CommonTools.getFinalInteger("bsdId", request);
		Integer userId = CommonTools.getLoginUserId(request);
		String buffetName = "";
		Integer buffetLorestudyLogId = 0;
		String loreName = "";
		String subDetail = "";
		Integer basicLoreId = 0;
		String msg = "error";
		BuffetStudyDetailInfo bsd = bsdm.getEntityById(bsdId);
		if(bsd != null){
			loreName = bsd.getBuffetQueInfo().getTitle();
			subDetail = "检测你对该知识点的掌握情况";
			StudyLogInfo sLog = bsd.getBuffetSendInfo().getStudyLogInfo();
			basicLoreId = sLog.getLoreInfo().getId();//发布巴菲特的学习的知识点编号
			Integer realUserId = sLog.getUser().getId();
			if(realUserId.equals(userId)){
				msg = "success";
				Integer buffetId = bsd.getBuffetQueInfo().getId();
				buffetName = bsd.getBuffetQueInfo().getTitle();
				String[] pathArr = CommonTools.getBuffetLorePath(buffetId, buffetName, basicLoreId, "diagnosis");
				path =  pathArr[0];
				pathChi = pathArr[1];
				LoreTreeMenuJson ltmj = new LoreTreeMenuJson();
				if(!path.equals("")){
					stepCount = path.split(":").length;//多少级
					loreCount = ltmj.getLoreNum(path);//多少个知识点
				}
				//通过buffet_study_detail_id获取buffet_lore_study_log_id
				BuffetLoreStudyLogInfo blsl = blslm.getEntityByBsdId(bsdId);
				if(blsl == null){//表示第一次，还未进行巴菲特知识点学习
					task = 1;
					loreTaskName = "针对性诊断";
					loreTypeName = "针对性诊断";
					//和知识点做题不同，直接进行第2级答题，第一级为巴菲特
					Integer answerNumber = 0;
					String[] pathArray = path.split(":");
					if(pathArray.length == 1){
						//表示当前巴菲特题还没有做关联知识点
					}else{
						String[] nextPathArray = pathArray[1].split(",");
						Integer nextPathLength = nextPathArray.length;
						buttonValue = "启动溯源";
						loreTaskName = "1级关联知识点诊断";
						for(Integer k = 0 ; k < nextPathLength ; k++){
							String[] nextDetailPathArray = nextPathArray[k].split("\\|");
							for(Integer l = 0 ; l < nextDetailPathArray.length ; l++){
								nextLoreIdArray += nextDetailPathArray[l] + ",";
								Integer quoteLoreId = CommonTools.getQuoteLoreId(Integer.parseInt(nextDetailPathArray[l]));
								List<LoreQuestion> lqList = lqm.listInfoByLoreId(quoteLoreId, loreTypeName, 0);
								answerNumber += lqList.size();
							}
						}
						money *= answerNumber;
						nextLoreIdArray = nextLoreIdArray.substring(0, nextLoreIdArray.length() - 1);
					}
				}else{//表示已有记录
					buffetLorestudyLogId = blsl.getId();
					isFinish = blsl.getIsFinish();
					if(isFinish.equals(2)){//完成后不显示，无动作
						
					}else{//未通过，需要定位到现在需要学习的地方
						Integer step = blsl.getStep();
						Integer stepComplelte = blsl.getStepComlete();//本阶段整体完成情况
						//access:1--当前级全部正确，2:当前级部分正确或者无正确
						access = blsl.getAccess();//本阶段详细完成情况（溯源诊断时分级完成情况）
						//从detail表中获取指定logId的最后一条详情
						List<BuffetLoreStudyDetailInfo> blsdList = blsdm.listLastInfoByLogId(buffetLorestudyLogId);
						//获取该题对应的知识点编号
						Integer currentLoreId = blsdList.get(0).getLoreInfo().getId();
						if(stepComplelte.equals(0)){//0:表示本阶段未完成（未做完题标记）
							if(step.equals(1)){//诊断题未做完---loreId==currentLoreId
								//无需第一阶段
							}else if(step.equals(2)){//表示已经开始下级关联子知识点的诊断loreId不等于currentLoreId
								Integer answerNumber = 0;
								String[] pathArray = path.split(":");
								Integer currentI = CommonTools.getCurrentStep(pathArray, currentLoreId);
								String[] currentPathArray = null;
								if(access == 0){//表示关联性诊断当前级还未完成。
									currentPathArray = pathArray[currentI].split("\\|");
								}else{//表示关联性诊断当前级已经完成，需要进行关联性诊断的下一级子知识点的关联性诊断
									currentPathArray = pathArray[currentI + 1].split("\\|");
									currentI = currentI + 1;
								}
								Integer currentPathLength = currentPathArray.length;
								task = currentI + 1;
								buttonValue = "继续诊断";
								loreTypeName = "针对性诊断";
								loreTaskName = task - 1+"级关联知识点诊断";
								for(Integer k = 0 ; k < currentPathLength ; k++){
									nextLoreIdArray += currentPathArray[k] + ",";
									//获取该知识典所有类型为针对性诊断的题型[0为题状态为有效状态]
									Integer quoteLoreId = CommonTools.getQuoteLoreId(Integer.parseInt(currentPathArray[k]));
									List<LoreQuestion> lqList = lqm.listInfoByLoreId(quoteLoreId, loreTypeName, 0);
									answerNumber += lqList.size();
								}
								money *= answerNumber;
								nextLoreIdArray = nextLoreIdArray.substring(0, nextLoreIdArray.length() - 1);
							}else if(step.equals(3)){//关联知识点的学习阶段
								if(access.equals(0)){//当前阶段未做完题
									task = blsl.getTaskNumber();
									pathType = "diagnosis";
									buttonValue = "继续诊断";
									loreTypeName = "再次诊断";
									String[] pathArray = path.split(":");
									
									Integer currentStep = CommonTools.getCurrentStep(pathArray, currentLoreId);
									Integer stepNumber = currentStep;//因为是当前知识点的下一级

									LoreInfo lore = lm.getEntityById(currentLoreId);
									loreTaskName = stepNumber +"级关联知识点("+lore.getLoreName()+")诊断";
									//做过的题和剩下的题拼装
									//全部题
									//根据全部再次诊断题除去该知识典做对的题就是目前需要在测试的再次诊断题
									//获取该知识典所有类型为loreTypeName的题型[0为题状态为有效状态]
									List<LoreQuestion> lqList_all = lqm.listInfoByLoreId(CommonTools.getQuoteLoreId(currentLoreId), loreTypeName, 0);
									//获取最后（最近）的一条答题详情
									BuffetLoreStudyDetailInfo lastInfo = blsdList.get(0);
									 List<BuffetLoreStudyDetailInfo> sdList_pre_right = new ArrayList<BuffetLoreStudyDetailInfo>();
									 if(lastInfo != null){//表示存在最后一次诊断记录(列出的题为)
										 if(lastInfo.getLoreQuestion().getLoreTypeName().equals("再次诊断")){//说明最后做的一道题是再次诊断题，表示题还未做完
											 //当前阶段刚做过的再次诊断题列表
											 Integer completeTimes = lastInfo.getCompleteTimes();
											 //获取不是当前级别所有做正确的再次诊断题
											 sdList_pre_right = blsdm.listPretRightInfoByLogId(buffetLorestudyLogId, currentLoreId, loreTypeName, completeTimes);
										 }
									 }
									money *= (lqList_all.size() - sdList_pre_right.size());//一直显示全部题的金币数
									nextLoreIdArray = String.valueOf(currentLoreId);
								}else if(access.equals(1)){//当前知识点的再次诊断完成，需要定位到下一个知识
									task = blsl.getTaskNumber();
									pathType = "study";
									loreTypeName = "再次诊断";
									String[] pathArray = path.split(":");
									String[] studyPathArr = ltmj.getStudyPath(path, pathChi);
									studyPath = studyPathArr[0];
									String studyPath_new = CommonTools.getCurrentStudyPath_new(studyPath, currentLoreId);//获取当前知识点以后的知识点
									if(studyPath_new.split(":").length == 1){
										buttonValue = "本知识点学习";
										loreTaskName = "学习本知识点";
										money = 0;
										nextLoreIdArray = String.valueOf(currentLoreId);
									}else{
										buttonValue = "开始学习";
										Integer currentLoreId_new = Integer.parseInt(studyPath_new.split(":")[0].split("\\|")[0]);
										Integer currentStep = CommonTools.getCurrentStep(pathArray, currentLoreId_new);
										Integer stepNumber = currentStep;
										LoreInfo lore = lm.getEntityById(currentLoreId_new);
										loreTaskName = stepNumber +"级关联知识点("+lore.getLoreName()+")学习";
										money = 0;
										nextLoreIdArray = String.valueOf(currentLoreId_new);
									}
								}else if(access.equals(2)){//五步学习
									
								}else if(access.equals(3)){//之前有做过再次诊断，但未全部正确（做错题的不重复列表）
									task = blsl.getTaskNumber();
									pathType = "diagnosis";
									buttonValue = "继续诊断";
									loreTypeName = "再次诊断";
									String[] pathArray = path.split(":");
									
									Integer currentStep = CommonTools.getCurrentStep(pathArray, currentLoreId);
									Integer  stepNumber = currentStep;
									LoreInfo lore = lm.getEntityById(currentLoreId);
									loreTaskName = stepNumber +"级关联知识点("+lore.getLoreName()+")诊断";
									//获取该知识典所有类型为loreTypeName的题型[0为题状态为有效状态]
									//最对的题
									List<BuffetLoreStudyDetailInfo> sdList_current_right = blsdm.listCurrentRightInfoByLogId(buffetLorestudyLogId, currentLoreId, loreTypeName);
									//该知识点类型为再次诊断的全部题
									List<LoreQuestion> zcList = lqm.listInfoByLoreId(CommonTools.getQuoteLoreId(currentLoreId), loreTypeName, 0);
									//该知识点答对的题
									money *= zcList.size() - sdList_current_right.size();
									nextLoreIdArray = String.valueOf(currentLoreId);
								}else if(access.equals(31)){//未做完巩固训练
									task = blsl.getTaskNumber();
									pathType = "study";
									buttonValue = "继续学习";
									loreTypeName = "再次诊断";
									String[] pathArray = path.split(":");
									
									Integer currentStep = CommonTools.getCurrentStep(pathArray, currentLoreId);
									Integer  stepNumber = currentStep;
									LoreInfo lore = lm.getEntityById(currentLoreId);
									loreTaskName = stepNumber +"级关联知识点("+lore.getLoreName()+")学习";
									money = 0;//学习的没金币
									nextLoreIdArray = String.valueOf(currentLoreId);
								}else if(access.equals(4)){//第一次进入再次诊断(列出再次诊断的全部试题)
									task = blsl.getTaskNumber();
									pathType = "diagnosis";
									buttonValue = "再次诊断";
									loreTypeName = "再次诊断";
									String[] pathArray = path.split(":");
									
									Integer currentStep = CommonTools.getCurrentStep(pathArray, currentLoreId);
									Integer stepNumber = currentStep;

									LoreInfo lore = lm.getEntityById(currentLoreId);
									loreTaskName = stepNumber +"级关联知识点("+lore.getLoreName()+")诊断";
									//2014-10-22日修改（获取该知识典所有类型为loreTypeName的题型[0为题状态为有效状态]）
									List<LoreQuestion> zcList = lqm.listInfoByLoreId(CommonTools.getQuoteLoreId(currentLoreId), loreTypeName, 0);
									money *= zcList.size();
									nextLoreIdArray = String.valueOf(currentLoreId);
								}else if(access.equals(41)){
									
								}
							}else if(step.equals(4)){
								//进入巴菲特题库列表页面，溯源替换成看解析，点击我会了，修改buffetLoreStudyLog表中为完成状态，并直接进入下一题
								
							}
						}else{//1:表示本阶段已经完成（做完题标记）
							//对于本阶段已经完成而全部没完成的，step完成的范围只能是1-3
							if(step.equals(1)){//第一阶段--本知识点针对性诊断已经做完题，还没进入下一步
								//无需第一阶段
							}else if(step.equals(2)){//关联知识典完成--进入关联知识典的学习
								//关联性诊断已经完成，可能是2种情况。
								//1：当前题全部做对，直接进入第三步-当前知识典的上一级关联知识典的学习
								//2：关联性诊断题全部做完，需要进入到第三步--关联知识典的学习
								if(access.equals(1)){//当前题全部正确
									String[] studyPathArr = ltmj.getStudyPath(path, pathChi);
									String[] studyPath_new_arr = CommonTools.getStudyPath_new(studyPathArr[0],studyPathArr[1], currentLoreId);
									studyPath = studyPath_new_arr[0];
									if(studyPath.split(":").length == 2){//表示一级关联知识点全部正确，表示溯源已完成
										//直接进入巴菲特题库页面
										
									}else{//表示进入上一级关联知识点进行溯源
										Integer stepNumber = CommonTools.getCurrentStep(path.split(":"), currentLoreId) - 1;
										
										//获取studyPath_new的第二组的数据中的第一组数据
										nextLoreIdArray = studyPath.split(":")[1].split("\\|")[0];
										currentLoreId = Integer.parseInt(nextLoreIdArray);
										String currentLoreName = lm.getEntityById(currentLoreId).getLoreName();
										loreTaskName = stepNumber+"级关联知识点("+currentLoreName+")学习";
									}
								}else{//关联性诊断题全部做完(诊断的最后一级)
									String[] studyPathArr = ltmj.getStudyPath(path, pathChi);
									studyPath = studyPathArr[0];
									String[] pathArray = studyPath.split(":");
									Integer stepNumber = pathArray.length  - 1;
									String currentLoreName = lm.getEntityById(currentLoreId).getLoreName();
									loreTaskName = stepNumber+"级关联知识点("+currentLoreName+")学习";
								}
								task = stepCount + 1;
								buttonValue = "开始学习";
								pathType = "study";
								money = 0;
								nextLoreIdArray = String.valueOf(currentLoreId);
							}else if(step.equals(3)){//表示第3步刚刚完成，需要进入第4步本知识典的学习(替换为巴菲特题的查看解析上)
								
							}
						}
					}
				}
			}
		}
		if(msg.equals("success")){
			map.put("bsdId", bsdId);
			map.put("buffetName", buffetName);
			map.put("task", task);
			map.put("loreTaskName", loreTaskName);
			map.put("money", money);
			map.put("stepCount", stepCount);
			map.put("loreCount", loreCount);
			map.put("buttonValue", buttonValue);
			map.put("pathType", pathType);
			map.put("loreType", loreTypeName);
			map.put("nextLoreIdArray", nextLoreIdArray);
			map.put("studyLogId", buffetLorestudyLogId);
			map.put("loreName", loreName);
			map.put("subDetail", subDetail);
			map.put("basicLoreId", basicLoreId);
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 自助餐答题错误后导向关联知识点的溯源路线图页面
	 * @author wm
	 * @date 2019-6-27 上午10:33:29
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward goBuffetLoreTracePage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
	
		return mapping.findForward("buffetTracePage");
	}
	
	
	/**
	 * 自助餐答题错误后获取关联知识点的溯源路线图数据
	 * @author wm
	 * @date 2019-6-27 上午10:35:28
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getBuffetLoreTraceData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		BuffetStudyDetailManager bsdm = (BuffetStudyDetailManager) AppFactory.instance(null).getApp(Constants.WEB_BUFFET_STUDY_DETAIL_INFO);
		BuffetLoreStudyLogManager blslm = (BuffetLoreStudyLogManager) AppFactory.instance(null).getApp(Constants.WEB_BUFFET_LORE_STUDY_LOG_INFO);
		BuffetLoreStudyDetailManager blsdm = (BuffetLoreStudyDetailManager) AppFactory.instance(null).getApp(Constants.WEB_BUFFET_LORE_STUDY_DETAIL_INFO);
		LoreInfoManager lm = (LoreInfoManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_INFO);
		Integer bsdId = CommonTools.getFinalInteger("bsdId", request);
		Integer userId = CommonTools.getLoginUserId(request);
		Map<String,Object> map = new HashMap<String,Object>();
		String nextLoreIdArray = "";//下级知识典编号数组
		Integer studyLogId = 0;
		Integer totalMoney = -1;
		String path = "";//顺序路线图(诊断时)
		String pathChi = "";
		String studyPath = "";//学习的路线
		String studyPathChi = "";
		Integer step = 0;
		Integer stepComplete = 0;
		Integer access = -1;
		Integer currentLoreId = 0;
		Integer option = 0;//1--诊断,2--学习
		String successStep = "";
		Integer success = -1;//0:正确,1:不正确
		String nextLoreStep = "上一级的关联知识点";
		String currentloreName_study = "";//当前5步学习法时的知识典名称
		Integer basicLoreId = 0;
		Integer buffetId = 0;
		String buffetName = "";
		String loreName = "";
		String subDetail = "";
		String msg = "error";
		BuffetStudyDetailInfo bsd = bsdm.getEntityById(bsdId);
		if(bsd != null){
			loreName = bsd.getBuffetQueInfo().getTitle();
			subDetail = "当前自助餐的“溯源路线图”如下";
			StudyLogInfo sLog = bsd.getBuffetSendInfo().getStudyLogInfo();
			basicLoreId = sLog.getLoreInfo().getId();////发布巴菲特的学习的知识点编号
			Integer realUserId = sLog.getUser().getId();
			if(realUserId.equals(userId)){
				msg = "success";
				buffetId = bsd.getBuffetQueInfo().getId();
				buffetName = bsd.getBuffetQueInfo().getTitle();
				String[] pathArr = CommonTools.getBuffetLorePath(buffetId, buffetName, basicLoreId, "diagnosis");
				path =  pathArr[0];
				pathChi = pathArr[1];
				LoreTreeMenuJson ltmj = new LoreTreeMenuJson();
				//通过buffet_study_detail_id获取buffet_lore_study_log_id
				BuffetLoreStudyLogInfo blsl = blslm.getEntityByBsdId(bsdId);
				if(blsl == null){//表示第一次，还未进行巴菲特知识点学习
					option = 1;
					currentLoreId = buffetId;//目的为了获取当前级别(把第一级巴菲特编号赋值给currLoreId)
					String[] pathArray = path.split(":");
					Integer currentI = CommonTools.getCurrentStep(pathArray, currentLoreId);
					if(currentI + 1 == pathArray.length){
						//表示是最后一级（只有一级）
						//溯源完成，开始学习
					}else{
						nextLoreIdArray = "";
						String[] nextPathArray = pathArray[currentI + 1].split(",");
						Integer nextPathLength = nextPathArray.length;
						for(Integer k = 0 ; k < nextPathLength ; k++){
							String[] nextDetailPathArray = nextPathArray[k].split("\\|");
							for(Integer l = 0 ; l < nextDetailPathArray.length ; l++){
								nextLoreIdArray += nextDetailPathArray[l] + ",";
							}
						}
						if(nextLoreIdArray.length() > 0){
							nextLoreIdArray = nextLoreIdArray.substring(0, nextLoreIdArray.length() - 1);
						}
						successStep = buffetName;
						success = 1;
					}
				}else{
					totalMoney = blsl.getCurrentGold() * 10;
					stepComplete = blsl.getStepComlete();
					step = blsl.getStep();
					access = blsl.getAccess();
					studyLogId = blsl.getId();
					if(blsl.getIsFinish().equals(1)){//表示未全部完成,2:已完成
						//从detail表中获取指定logId的最后一条详情
						List<BuffetLoreStudyDetailInfo> bsdList = blsdm.listLastInfoByLogId(studyLogId);
						//获取该题对应的知识点编号
						currentLoreId = bsdList.get(0).getLoreInfo().getId();
						if(stepComplete > 0){//本阶段答题已完成(还未进行下一级)
							if(step.equals(1)){
								//通过当前知识点获取下级子知识点
								String[] pathArray = path.split(":");
								Integer currentI = CommonTools.getCurrentStep(pathArray, currentLoreId);
								if(currentI + 1 == pathArray.length){
									
								}else{
									option = 1;
									nextLoreIdArray = "";
									String[] nextPathArray = pathArray[currentI + 1].split(",");
									Integer nextPathLength = nextPathArray.length;
									for(Integer k = 0 ; k < nextPathLength ; k++){
										String[] nextDetailPathArray = nextPathArray[k].split("\\|");
										for(Integer l = 0 ; l < nextDetailPathArray.length ; l++){
											nextLoreIdArray += nextDetailPathArray[l] + ",";
										}
									}
									if(nextLoreIdArray.length() > 0){
										nextLoreIdArray = nextLoreIdArray.substring(0, nextLoreIdArray.length() - 1);
									}
									successStep = "本知识点";
									success = 1;
								}
							}else if(step.equals(2)){//表示关联知识点诊断完成/或者是某一级的关联知识点全部正确，需要进入学习阶段
								String[] studyPathArr = ltmj.getStudyPath(path,pathChi);
								studyPath = studyPathArr[0];
								studyPathChi = studyPathArr[1];
								String[] studyPath_new_arr = CommonTools.getStudyPath_new(studyPath,studyPathChi, currentLoreId);
								studyPath = studyPath_new_arr[0];
								studyPathChi = studyPath_new_arr[1];
								//根据当前currentLoreId截取studyPath
								option = 2;
								if(access == 1){//当前关联知识典诊断全部正确，进入当前知识典的下级进行学习
									Integer stepNumber = CommonTools.getCurrentStep(path.split(":"), currentLoreId);
									successStep = stepNumber+"级关联知识点的诊断题";
									success = 3;
									//获取studyPath_new的第二组的数据中的第一组数据
									nextLoreIdArray = studyPath.split(":")[1].split("\\|")[0];
									if(nextLoreIdArray.equals(String.valueOf(basicLoreId))){
										nextLoreStep = "本知识点";
									}
								}else{//学习完了所有的关联知识典，返回逆序进行全部学习access=2
									Integer stepNumber = CommonTools.getCurrentStep(path.split(":"), currentLoreId);
									successStep = stepNumber+"级关联知识点的诊断题";
									nextLoreIdArray = String.valueOf(currentLoreId);
									success = 2;
								}
							}else if(step.equals(3)){
								option = 2;
								success = 5;
								nextLoreIdArray = String.valueOf(basicLoreId);
								String[] studyPathArr = ltmj.getStudyPath(path,pathChi);
								studyPath = studyPathArr[0];
								studyPathChi = studyPathArr[1];
							}
						}else{//本阶段答题完成，但本知识点所有的关联性诊断未完成
							//不会存在access=1的情况，1表示当前题全部正确，如果是全部正确的话，那么stepComplete>0
							if(step == 3){//
								String[] studyPathArr = ltmj.getStudyPath(path,pathChi);
								studyPath = studyPathArr[0];
								studyPathChi = studyPathArr[1];
								if(access.equals(4)){//第一次进入再次诊断（列出再次诊断全部题）
									option = 2;
									success = 4;
									nextLoreIdArray = String.valueOf(currentLoreId);
									Integer stepNumber = CommonTools.getCurrentStep(path.split(":"), currentLoreId);
									successStep = stepNumber+"级关联知识点的诊断题";
									//获取studyPath_new的第二组的数据中的第一组数据
									currentloreName_study = lm.getEntityById(Integer.parseInt(nextLoreIdArray)).getLoreName();
									if(nextLoreIdArray.equals(String.valueOf(buffetId))){
										nextLoreStep = "本知识点";
									}
								}else if(access.equals(41)){
									option = 2;
									success = 4;
									nextLoreIdArray = String.valueOf(currentLoreId);
									Integer stepNumber = CommonTools.getCurrentStep(path.split(":"), currentLoreId);
									String currentLoreName = lm.getEntityById(currentLoreId).getLoreName();
									successStep = stepNumber+"级关联知识点("+currentLoreName+")";
									//获取studyPath_new的第二组的数据中的第一组数据
									currentloreName_study = lm.getEntityById(Integer.parseInt(nextLoreIdArray)).getLoreName();
									if(nextLoreIdArray.equals(String.valueOf(buffetId))){
										nextLoreStep = "本知识点";
									}
								}else if(access.equals(3)){//之前没把再次诊断全部做对（列出做错的再次诊断题）
									option = 2;
									success = 4;
									nextLoreIdArray = String.valueOf(currentLoreId);
									Integer stepNumber = CommonTools.getCurrentStep(path.split(":"), currentLoreId);
									String currentLoreName = lm.getEntityById(currentLoreId).getLoreName();
									successStep = stepNumber+"级关联知识点("+currentLoreName+")";
									//获取studyPath_new的第二组的数据中的第一组数据
									currentloreName_study = lm.getEntityById(Integer.parseInt(nextLoreIdArray)).getLoreName();
									if(nextLoreIdArray.equals(String.valueOf(buffetId))){
										nextLoreStep = "本知识点";
									}
								}else if(access.equals(31)){//再次诊断完成提交后（31）
									option = 2;
									success = 2;
									nextLoreIdArray = String.valueOf(currentLoreId);
									Integer stepNumber = CommonTools.getCurrentStep(path.split(":"), currentLoreId);
									String currentLoreName = lm.getEntityById(currentLoreId).getLoreName();
									successStep = stepNumber+"级关联知识点("+currentLoreName+")";
									//获取studyPath_new的第二组的数据中的第一组数据
									currentloreName_study = lm.getEntityById(Integer.parseInt(nextLoreIdArray)).getLoreName();
									if(nextLoreIdArray.equals(String.valueOf(buffetId))){
										nextLoreStep = "本知识点";
									}
								}else if(access.equals(2)){//进入5步学习法
									
								}else if(access.equals(1)){//题做完，全部正确（需要定位到下一个知识点）
									String studyPath_new = CommonTools.getCurrentStudyPath_new(studyPath, currentLoreId);//获取当前知识点以后的知识点
									Integer currentLoreId_new = Integer.parseInt(studyPath_new.split(":")[0].split("\\|")[0]);
									option = 2;
									nextLoreIdArray = String.valueOf(currentLoreId_new);
									success = 5;//进入5步学习法
									//获取studyPath_new的第二组的数据中的第一组数据
									currentloreName_study = lm.getEntityById(Integer.parseInt(nextLoreIdArray)).getLoreName();
									if(nextLoreIdArray.equals(String.valueOf(buffetId))){
										nextLoreStep = "本知识点";
									}
								}else if(access.equals(0)){//表示已经做了再次诊断题，但是没做完（将已做的题和未做的列出来）
									//根据当前currentLoreId截取studyPath
									option = 2;
									nextLoreIdArray = String.valueOf(currentLoreId);
									Integer stepNumber = CommonTools.getCurrentStep(path.split(":"), currentLoreId);
									successStep = stepNumber+"级关联知识点";
									success = 0;//再次诊断未做完
									//获取studyPath_new的第二组的数据中的第一组数据
									currentloreName_study = lm.getEntityById(Integer.parseInt(nextLoreIdArray)).getLoreName();
									if(nextLoreIdArray.equals(String.valueOf(buffetId))){//同上，如何判定当前到了巴菲特的阶段
										nextLoreStep = "本知识点";
									}
								}
							}else if(step.equals(4)){//到4结束
								if(access.equals(2)){//溯源完成
									option = 2;
									nextLoreIdArray = String.valueOf(buffetId);
									success = 6;//进入巴菲特的解析
									String[] studyPathArr = ltmj.getStudyPath(path,pathChi);
									studyPath = studyPathArr[0];
									studyPathChi = studyPathArr[1];
								}
							}else{
								if(blsl.getAccess().equals(2)){//本阶段题部分正确
									nextLoreIdArray = "";
									option = 1;
									String[] pathArray = path.split(":");
									Integer currentI = CommonTools.getCurrentStep(pathArray, currentLoreId);
									String[] currentPathArray = pathArray[currentI+1].split("\\|");
									for(Integer i = 0 ; i < currentPathArray.length ; i++){
										nextLoreIdArray += currentPathArray[i]+",";
									}
									if(nextLoreIdArray.length() > 0){
										nextLoreIdArray = nextLoreIdArray.substring(0, nextLoreIdArray.length() - 1);
									}
									Integer stepNumber = CommonTools.getCurrentStep(path.split(":"), currentLoreId);
									successStep = stepNumber+"级关联知识点的诊断题";
									success = 1;
								}else{//本阶段还未点最后的提交，access为0
									nextLoreIdArray = "";
									option = 1;
									String[] pathArray = path.split(":");
									Integer currentI = CommonTools.getCurrentStep(pathArray, currentLoreId);											
									String[] currentPathArray = pathArray[currentI].split("\\|");
									for(Integer i = 0 ; i < currentPathArray.length ; i++){
										nextLoreIdArray += currentPathArray[i]+",";
									}
									if(nextLoreIdArray.length() > 0){
										nextLoreIdArray = nextLoreIdArray.substring(0, nextLoreIdArray.length() - 1);
									}
									Integer stepNumber = CommonTools.getCurrentStep(path.split(":"), currentLoreId);
									if(stepNumber == 0){
										successStep = "本知识点";
										success = 0;
									}else{
										success = 1;
										successStep = stepNumber+"级关联知识点的诊断题";
									}
								}
							}
						}
					}else if(blsl.getIsFinish().equals(2)){//表示全部完成
						step = blsl.getStep();
						//从detail表中获取指定logId的最后一条详情
						List<BuffetLoreStudyDetailInfo> blsdList = blsdm.listLastInfoByLogId(studyLogId);
						//获取最后（最近）的一条答题详情
						BuffetLoreStudyDetailInfo blsdLastInfo = blsdList.get(0);
						//获取该题对应的知识点编号
						currentLoreId = blsdLastInfo.getLoreQuestion().getLoreInfo().getId();
						studyPath = "";
						if(step == 1){//表示是本知识典诊断时一次性全部正确通过
							option = 1;
							success = 2;
							path = String.valueOf(currentLoreId);
							nextLoreIdArray = String.valueOf(currentLoreId);
						}else{//通过溯源完成的

							option = 2;
							nextLoreIdArray = "0";
							successStep = "本知识点的诊断题";
							success = 6;//全部完成
						}
					}
				}
			}
		}
		if(msg.equals("success")){
			map.put("option", option);
			map.put("totalMoney", totalMoney);
			map.put("success", success);
			map.put("path", path);
			map.put("pathChi", pathChi);
			map.put("studyPath", studyPath);
			map.put("studyPathChi", studyPathChi);
			map.put("nextLoreIdArray", nextLoreIdArray);
			map.put("successStep", successStep);
			map.put("nextLoreStep", nextLoreStep);
			map.put("currentloreName_study", currentloreName_study);
			map.put("access", access);
			map.put("buffetId", buffetId);
			map.put("buffetName", buffetName);
			map.put("bsdId", bsdId);
			map.put("loreName", loreName);
			map.put("subDetail", subDetail);
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 导向自助餐溯源时的知识点题库页面
	 * @author wm
	 * @date 2019-6-29 上午11:18:13
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward goBuffetLoreQuestionPage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		return mapping.findForward("blqPage");
	}
	
	/**
	 * 获取自助餐下溯源时的知识点题库列表（针对性和再次诊断有用）
	 * @author wm
	 * @date 2019-7-2 下午06:08:37
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getBuffetLoreQuestionData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		BuffetStudyDetailManager bsdm = (BuffetStudyDetailManager) AppFactory.instance(null).getApp(Constants.WEB_BUFFET_STUDY_DETAIL_INFO);
		BuffetLoreStudyLogManager blslm = (BuffetLoreStudyLogManager) AppFactory.instance(null).getApp(Constants.WEB_BUFFET_LORE_STUDY_LOG_INFO);
		BuffetLoreStudyDetailManager blsdm = (BuffetLoreStudyDetailManager) AppFactory.instance(null).getApp(Constants.WEB_BUFFET_LORE_STUDY_DETAIL_INFO);
		LoreQuestionManager lqm = (LoreQuestionManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_QUESTION_INFO);
		LoreInfoManager lm = (LoreInfoManager)AppFactory.instance(null).getApp(Constants.WEB_LORE_INFO);
		Integer bsdId = CommonTools.getFinalInteger("bsdId", request);
		String nextLoreIdArray = CommonTools.getFinalStr("nextLoreIdArray", request);
		String loreType = Transcode.unescape_new1("loreType", request);//针对性诊断和再次诊断
		Integer userId = CommonTools.getLoginUserId(request);
		Integer loreId = 0;
		Integer currentLoreId = 0;
		String loreName = "";
		String msg = "error";
		Map<String,Object> map = new HashMap<String,Object>();
		BuffetStudyDetailInfo bsd = bsdm.getEntityById(bsdId);
		if(bsd != null){
			if(loreType.equals("")){
				loreType = "针对性诊断";
			}
			if(loreId > 0 && loreType.equals("针对性诊断")){
				LoreInfo lore = lm.getEntityById(loreId);
				if(lore != null){
					loreName = lore.getLoreName();
					String[] pathArr = CommonTools.getLorePath(loreId, "diagnosis");
					map.put("path", pathArr[0]);
				}
			}
			loreName = bsd.getBuffetQueInfo().getTitle();
			Integer realUserId = bsd.getBuffetSendInfo().getStudyLogInfo().getUser().getId();
			if(realUserId.equals(userId)){
				msg = "success";
				Integer basicLoreId = bsd.getBuffetSendInfo().getStudyLogInfo().getLoreInfo().getId();//学习记录中的最初知识点
				Integer buffetId = bsd.getBuffetQueInfo().getId();
				String buffetName = bsd.getBuffetQueInfo().getTitle();
				String[] pathArr = CommonTools.getBuffetLorePath(buffetId, buffetName, basicLoreId, "diagnosis");
				String path =  pathArr[0];
				map.put("path", path);
				List<LoreQuestion> lqList_old = new ArrayList<LoreQuestion>();
				List<BuffetLoreStudyDetailInfo> sdList_used = new ArrayList<BuffetLoreStudyDetailInfo>();
				BuffetLoreStudyLogInfo blsl = blslm.getEntityByBsdId(bsdId);
				Integer buffetStudyLogId = 0;
				if(blsl != null){
					buffetStudyLogId = blsl.getId();
				}
				List<Object> list_d = new ArrayList<Object>();
				if(buffetStudyLogId > 0){//表示是继续之前的操作
					if(!nextLoreIdArray.equals("")){
						 String[] nextLoreIdArray_1 = nextLoreIdArray.split(",");
						 for(Integer i = 0 ; i < nextLoreIdArray_1.length ; i++){
							 loreId = Integer.parseInt(nextLoreIdArray_1[i]);
							 currentLoreId = loreId;
							 //获取该知识典所有类型为loreType的题型[0为题状态为有效状态]
							 lqList_old.addAll(lqm.listInfoByLoreId( CommonTools.getQuoteLoreId(currentLoreId), loreType, 0));//全部题列表
							 if(loreType.equals("再次诊断")){//获取上次的学习情况(根据logId+nextLoreIdArray+loreType)获取答题正确的题
								sdList_used.addAll(blsdm.listCurrentRightInfoByLogId(buffetStudyLogId, currentLoreId, loreType));
							 }else{//获取上次的学习情况(根据logId+nextLoreIdArray+loreType)--针对性诊断
								sdList_used.addAll(blsdm.listExistInfoByOption(buffetStudyLogId, currentLoreId, loreType));
							 }
						 }
					}else{
						//获取该知识典所有类型为loreType的题型[0为题状态为有效状态]
						//要是没有下一级loreId就是发布自助餐时的学习记录中的知识点编号
						loreId = blsl.getBuffetStudyDetailInfo().getBuffetSendInfo().getStudyLogInfo().getLoreInfo().getMainLoreId();
						lqList_old.addAll(lqm.listInfoByLoreId(loreId, loreType, 0));//全部题列表
					}
					if(loreType.equals("针对性诊断")){//将做过的题的情况和未做过的题都列出来
						for(Integer i = 0 ; i < lqList_old.size() ; i++){
							LoreQuestion lq = lqList_old.get(i);
							Map<String,Object> map_d = new HashMap<String,Object>();
							Integer lqId_old = lq.getId();
							map_d.put("lqId", lqId_old);
							Integer quoteLoreId = lq.getLoreInfo().getId();
							String[] loreInfo = CommonTools.getRealLoreInfo(quoteLoreId, loreId);//当前题库的指定版本下的知识点
							map_d.put("currLoreId", Integer.parseInt(loreInfo[0]));
							map_d.put("currLoreName", loreInfo[1]);
							String lqType = lq.getQueType();
							map_d.put("lqType", lqType);
							map_d.put("loreType", lq.getLoreTypeName());
							map_d.put("lqSub", lq.getQueSub());
							map_d.put("answerA", lq.getA());
							map_d.put("answerB", lq.getB());
							map_d.put("answerC", lq.getC());
							map_d.put("answerD", lq.getD());
							map_d.put("answerE", lq.getE());
							map_d.put("answerF", lq.getF());
							Integer completeStatus = 0;//做题状态(0:已做,1:未做)
							for(Integer j = 0 ; j < sdList_used.size() ; j++){
								BuffetLoreStudyDetailInfo sd = sdList_used.get(j);
								LoreQuestion lq_use = sd.getLoreQuestion();
								if(lqId_old.equals(lq_use.getId())){//做过
									completeStatus = 1;
									map_d.put("realAnswer", sd.getRealAnswer());
									map_d.put("myAnswer", sd.getMyAnswer());
									map_d.put("result", sd.getResult());//答案对错0:错，1:对
									map_d.put("questionStep", sd.getQueStep());
									break;
								}
							}
							map_d.put("completeStatus", completeStatus);//做题状态(0:已做,1:未做)
							if(completeStatus.equals(0)){
								if(lqType.equals("单选题") || lqType.equals("多选题") || lqType.equals("判断题") || lqType.equals("填空题") || lqType.equals("问答题")){
									map_d.put("answerNum", 1);
								}else{//填空选择题
									map_d.put("answerNum", lq.getQueAnswer().split(",").length);
								}
							}
							if(lqType.equals("填空题") || lqType.equals("问答题")){
								map_d.put("realAnswer", lq.getQueAnswer());
							}
							list_d.add(map_d);
						}
					}else if(loreType.equals("巩固训练")){
						
					}else if(loreType.equals("再次诊断")){//再次诊断()：
						//分三种情况(当是再次诊断时，不会有2和1的状态)
						//0:诊断题未做完，下次的诊断题列表为做过的+剩下的题
						//3:诊断题做完，继续诊断的话，之前该知识点没有做对的题（全部题-做对的题）
						//4:诊断题没做,下次的诊断题是该知识点所有的再次诊断题
						Integer access = blsl.getAccess();
						if(access == 4){
							for(Integer i = 0 ; i < lqList_old.size() ; i++){
								LoreQuestion lq = lqList_old.get(i);
								Map<String,Object> map_d = new HashMap<String,Object>();
								map_d.put("lqId", lq.getId());
								Integer quoteLoreId = lq.getLoreInfo().getId();
								String[] loreInfo = CommonTools.getRealLoreInfo(quoteLoreId, loreId);//当前题库的指定版本下的知识点
								map_d.put("currLoreId", Integer.parseInt(loreInfo[0]));
								map_d.put("currLoreName", loreInfo[1]);
								String lqType = lq.getQueType();
								map_d.put("lqType", lqType);
								map_d.put("loreType", lq.getLoreTypeName());
								map_d.put("lqSub", lq.getQueSub());
								map_d.put("answerA", lq.getA());
								map_d.put("answerB", lq.getB());
								map_d.put("answerC", lq.getC());
								map_d.put("answerD", lq.getD());
								map_d.put("answerE", lq.getE());
								map_d.put("answerF", lq.getF());
								map_d.put("completeStatus", 0);//做题状态(0:未做,1:已做)
								if(lqType.equals("单选题") || lqType.equals("多选题") || lqType.equals("判断题") || lqType.equals("填空题") || lqType.equals("问答题")){
									map_d.put("answerNum", 1);
								}else{//填空选择题
									map_d.put("answerNum", lq.getQueAnswer().split(",").length);
								}
								if(lqType.equals("填空题") || lqType.equals("问答题")){
									map_d.put("realAnswer", lq.getQueAnswer());
								}
								list_d.add(map_d);
							}
						}else if(access == 3){
							//获取做对的再次诊断题
							for(Integer i = 0 ; i < lqList_old.size() ; i++){
								LoreQuestion lq = lqList_old.get(i);
								Map<String,Object> map_d = new HashMap<String,Object>();
								Integer lqId_old = lq.getId();
								Integer status = 1;
								for(Integer j = 0 ; j < sdList_used.size() ; j++){
									BuffetLoreStudyDetailInfo sd = sdList_used.get(j);
									if(lqId_old.equals(sd.getLoreQuestion().getId())){//做对过
										status = 0;
										break;
									}
								}
								if(status.equals(1)){//过滤掉已做正确的题
									map_d.put("lqId", lqId_old);
									Integer quoteLoreId = lq.getLoreInfo().getId();
									String[] loreInfo = CommonTools.getRealLoreInfo(quoteLoreId, loreId);//当前题库的指定版本下的知识点
									map_d.put("currLoreId", Integer.parseInt(loreInfo[0]));
									map_d.put("currLoreName", loreInfo[1]);
									String lqType = lq.getQueType();
									map_d.put("lqType", lqType);
									map_d.put("loreType", lq.getLoreTypeName());
									map_d.put("lqSub", lq.getQueSub());
									map_d.put("answerA", lq.getA());
									map_d.put("answerB", lq.getB());
									map_d.put("answerC", lq.getC());
									map_d.put("answerD", lq.getD());
									map_d.put("answerE", lq.getE());
									map_d.put("answerF", lq.getF());
									map_d.put("completeStatus", 0);//做题状态(0:未做,1:已做)
									if(lqType.equals("单选题") || lqType.equals("多选题") || lqType.equals("判断题") || lqType.equals("填空题") || lqType.equals("问答题")){
										map_d.put("answerNum", 1);
									}else{//填空选择题
										map_d.put("answerNum", lq.getQueAnswer().split(",").length);
									}
									if(lqType.equals("填空题") || lqType.equals("问答题")){
										map_d.put("realAnswer", lq.getQueAnswer());
									}
									list_d.add(map_d);
								}
							}
						}else if(access == 0){
							//表示题还未做完-显示答题正确的题和未做的题
							//?需要思考（接下来的题库列表为正确的+最后一次做错的+剩下没做的）
							//获取最后一道已做过的题
							List<BuffetLoreStudyDetailInfo> lastList = blsdm.listLastInfoByLogId(buffetStudyLogId);
							 if(lastList.size() > 0){//表示存在最后一次诊断记录(列出的题为)
								 if(lastList.get(0).getLoreQuestion().getLoreTypeName().equals("再次诊断")){//说明最后做的一道题是再次诊断题，表示题还未做完
									//当前阶段刚做过的再次诊断题列表
									 Integer completeTimes = lastList.get(0).getCompleteTimes();
									//当前级别新做的再次诊断题
									 List<BuffetLoreStudyDetailInfo> sdList_new = blsdm.listLastInfoByOption(buffetStudyLogId, loreId, loreType, completeTimes);
									//获取不是当前级别所有做正确的再次诊断题
									 List<BuffetLoreStudyDetailInfo> sdList_pre_right = blsdm.listPretRightInfoByLogId(buffetStudyLogId, loreId, loreType, completeTimes);
									 
									 for(Integer i = 0 ; i < lqList_old.size() ; i++){
										LoreQuestion lq = lqList_old.get(i);
										Map<String,Object> map_d = new HashMap<String,Object>();
										Integer lqId_old = lq.getId();
										Integer status = 1;
										for(Integer j = 0 ; j < sdList_pre_right.size() ; j++){
											BuffetLoreStudyDetailInfo sd = sdList_pre_right.get(j);
											if(lqId_old.equals(sd.getLoreQuestion().getId())){//做对过
												status = 0;
												break;
											}
										}
										if(status.equals(1)){//过滤掉已做正确的题
											map_d.put("lqId", lqId_old);
											Integer quoteLoreId = lq.getLoreInfo().getId();
											String[] loreInfo = CommonTools.getRealLoreInfo(quoteLoreId, loreId);//当前题库的指定版本下的知识点
											map_d.put("currLoreId", Integer.parseInt(loreInfo[0]));
											map_d.put("currLoreName", loreInfo[1]);
											String lqType = lq.getQueType();
											map_d.put("lqType", lqType);
											map_d.put("loreType", lq.getLoreTypeName());
											map_d.put("lqSub", lq.getQueSub());
											map_d.put("answerA", lq.getA());
											map_d.put("answerB", lq.getB());
											map_d.put("answerC", lq.getC());
											map_d.put("answerD", lq.getD());
											map_d.put("answerE", lq.getE());
											map_d.put("answerF", lq.getF());
											Integer completeStatus = 0;//做题状态(0:已做,1:未做)
											for(Integer k = 0 ; k < sdList_new.size() ; k++){
												BuffetLoreStudyDetailInfo sd_new = sdList_new.get(k);
												if(lqId_old.equals(sd_new.getLoreQuestion().getId())){
													completeStatus = 1;
													map_d.put("realAnswer", sd_new.getRealAnswer());
													map_d.put("myAnswer", sd_new.getMyAnswer());
													map_d.put("result", sd_new.getResult());//答案对错0:错，1:对
													map_d.put("questionStep", sd_new.getQueStep());
													break;
												}
											}
											map_d.put("completeStatus", completeStatus);//做题状态(0:未做,1:已做)
											if(completeStatus.equals(0)){
												if(lqType.equals("单选题") || lqType.equals("多选题") || lqType.equals("判断题") || lqType.equals("填空题") || lqType.equals("问答题")){
													map_d.put("answerNum", 1);
												}else{//填空选择题
													map_d.put("answerNum", lq.getQueAnswer().split(",").length);
												}
											}
											if(lqType.equals("填空题") || lqType.equals("问答题")){
												map_d.put("realAnswer", lq.getQueAnswer());
											}
											list_d.add(map_d);
										}
									}
								 }else{//表示是刚从5步学习法过来
									//将已答题和数据库中的原题中未答的题组合在一起(巴菲特时用)
									 for(Integer i = 0 ; i < lqList_old.size() ; i++){
										 LoreQuestion lq = lqList_old.get(i);
										 Integer lqId_old = lq.getId();
										 Map<String,Object> map_d = new HashMap<String,Object>();
										 map_d.put("lqId", lqId_old);
										Integer quoteLoreId = lq.getLoreInfo().getId();
										String[] loreInfo = CommonTools.getRealLoreInfo(quoteLoreId, loreId);//当前题库的指定版本下的知识点
										map_d.put("currLoreId", Integer.parseInt(loreInfo[0]));
										map_d.put("currLoreName", loreInfo[1]);
										String lqType = lq.getQueType();
										map_d.put("lqType", lqType);
										map_d.put("loreType", lq.getLoreTypeName());
										map_d.put("lqSub", lq.getQueSub());
										map_d.put("answerA", lq.getA());
										map_d.put("answerB", lq.getB());
										map_d.put("answerC", lq.getC());
										map_d.put("answerD", lq.getD());
										map_d.put("answerE", lq.getE());
										map_d.put("answerF", lq.getF());
										map_d.put("realAnswer", "");
										map_d.put("myAnswer", "");
										map_d.put("result", 0);//答案对错0:错，1:对
										map_d.put("questionStep", 0);
										Integer completeStatus = 0;//做题状态(0:已做,1:未做)
										 for(Integer j = 0 ; j < sdList_used.size() ; j++){
											 BuffetLoreStudyDetailInfo sd = sdList_used.get(j);
											 LoreQuestion lq_use = sd.getLoreQuestion();
											 if(lqId_old.equals(lq_use.getId())){
												completeStatus = 1;
												 //表示已做过
												map_d.put("answerA", lq_use.getA());
												map_d.put("answerB", lq_use.getB());
												map_d.put("answerC", lq_use.getC());
												map_d.put("answerD", lq_use.getD());
												map_d.put("answerE", lq_use.getE());
												map_d.put("answerF", lq_use.getF());
												map_d.put("realAnswer", sd.getRealAnswer());
												map_d.put("myAnswer", sd.getMyAnswer());
												map_d.put("result", sd.getResult());//答案对错0:错，1:对
												map_d.put("questionStep", sd.getQueStep());
												break;
											 }
										 }
										 map_d.put("completeStatus", completeStatus);//做题状态(0:未做,1:已做)
										if(completeStatus.equals(0)){
											if(lqType.equals("单选题") || lqType.equals("多选题") || lqType.equals("判断题") || lqType.equals("填空题") || lqType.equals("问答题")){
												map_d.put("answerNum", 1);
											}else{//填空选择题
												map_d.put("answerNum", lq.getQueAnswer().split(",").length);
											}
										}
										if(lqType.equals("填空题") || lqType.equals("问答题")){
											map_d.put("realAnswer", lq.getQueAnswer());
										}
										list_d.add(map_d);
									 }
								 }
							 }
						}
					}
				}else{//新的挑战
					if(!nextLoreIdArray.equals("")){
						 String[] nextLoreIdArray_1 = nextLoreIdArray.split(",");
						 for(Integer i = 0 ; i < nextLoreIdArray_1.length ; i++){
							 loreId = Integer.parseInt(nextLoreIdArray_1[i]);
							 currentLoreId = loreId;
							 //获取该知识典所有类型为loreType的题型[0为题状态为有效状态]
							 lqList_old.addAll(lqm.listInfoByLoreId(CommonTools.getQuoteLoreId(loreId), loreType, 0));
							 if(loreType.equals("再次诊断")){//获取上次的学习情况(根据logId+nextLoreIdArray+loreType)获取答题正确的题
								 sdList_used.addAll(blsdm.listCurrentRightInfoByLogId(buffetStudyLogId, loreId, loreType));
							 }else{//获取上次的学习情况(根据logId+nextLoreIdArray+loreType)
								 sdList_used.addAll(blsdm.listExistInfoByOption(buffetStudyLogId, currentLoreId, loreType));
							 }
						 }
					}
					for(Integer i = 0 ; i < lqList_old.size() ; i++){
						LoreQuestion lq = lqList_old.get(i);
						Integer lqId_old = lq.getId();
						Map<String,Object> map_d = new HashMap<String,Object>();
						map_d.put("lqId", lqId_old);
						Integer quoteLoreId = lq.getLoreInfo().getId();
						String[] loreInfo = CommonTools.getRealLoreInfo(quoteLoreId, loreId);//当前题库的指定版本下的知识点
						map_d.put("currLoreId", Integer.parseInt(loreInfo[0]));
						map_d.put("currLoreName", loreInfo[1]);
						String lqType = lq.getQueType();
						map_d.put("lqType", lqType);
						map_d.put("loreType", lq.getLoreTypeName());
						map_d.put("lqSub", lq.getQueSub());
						map_d.put("answerA", lq.getA());
						map_d.put("answerB", lq.getB());
						map_d.put("answerC", lq.getC());
						map_d.put("answerD", lq.getD());
						map_d.put("answerE", lq.getE());
						map_d.put("answerF", lq.getF());
						map_d.put("realAnswer", "");
						map_d.put("myAnswer", "");
						map_d.put("result", 0);//答案对错0:错，1:对
						map_d.put("questionStep", 0);
						Integer completeStatus = 0;//做题状态(0:已做,1:未做)
						 for(Integer j = 0 ; j < sdList_used.size() ; j++){
							 BuffetLoreStudyDetailInfo sd = sdList_used.get(j);
							 LoreQuestion lq_use = sd.getLoreQuestion();
							 if(lqId_old.equals(lq_use.getId())){
								completeStatus = 1;
								 //表示已做过
								map_d.put("answerA", lq_use.getA());
								map_d.put("answerB", lq_use.getB());
								map_d.put("answerC", lq_use.getC());
								map_d.put("answerD", lq_use.getD());
								map_d.put("answerE", lq_use.getE());
								map_d.put("answerF", lq_use.getF());
								map_d.put("realAnswer", sd.getRealAnswer());
								map_d.put("myAnswer", sd.getMyAnswer());
								map_d.put("result", sd.getResult());//答案对错0:错，1:对
								map_d.put("questionStep", sd.getQueStep());
								break;
							 }
						 }
						 map_d.put("completeStatus", completeStatus);//做题状态(0:未做,1:已做)
						if(completeStatus.equals(0)){
							if(lqType.equals("单选题") || lqType.equals("多选题") || lqType.equals("判断题") || lqType.equals("填空题") || lqType.equals("问答题")){
								map_d.put("answerNum", 1);
							}else{//填空选择题
								map_d.put("answerNum", lq.getQueAnswer().split(",").length);
							}
						}
						if(lqType.equals("填空题") || lqType.equals("问答题")){
							map_d.put("realAnswer", lq.getQueAnswer());
						}
						list_d.add(map_d);
					 }
				}
				map.put("lqList", list_d);
				map.put("bsdId", bsdId);
				map.put("loreName", loreName);
				map.put("subDetail", "针对该知识点而设定的题目共计"+list_d.size()+"题");
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 将溯源学习时的答题记录插入数据库
	 * @author wm
	 * @date 2019-7-2 下午06:39:11
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward insertStudyInfo(ActionMapping mapping ,ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		BuffetStudyDetailManager bsdm = (BuffetStudyDetailManager) AppFactory.instance(null).getApp(Constants.WEB_BUFFET_STUDY_DETAIL_INFO);
		BuffetLoreStudyLogManager blslm = (BuffetLoreStudyLogManager) AppFactory.instance(null).getApp(Constants.WEB_BUFFET_LORE_STUDY_LOG_INFO);
		BuffetLoreStudyDetailManager blsdm = (BuffetLoreStudyDetailManager) AppFactory.instance(null).getApp(Constants.WEB_BUFFET_LORE_STUDY_DETAIL_INFO);
		LoreQuestionManager lqm = (LoreQuestionManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_QUESTION_INFO);
		UserManager um = (UserManager)AppFactory.instance(null).getApp(Constants.WEB_USER_INFO);
		Integer bsdId = CommonTools.getFinalInteger("bsdId", request);//自助餐学习记录编号
		Integer questionStep = Integer.parseInt(request.getParameter("questionStep"));//题的顺序
		String myAnswer = Transcode.unescape_new1("myAnswer",request);//选择的答案
		String answerOptionArrayStr = Transcode.unescape_new1("answerOptionArray",request);//做题时的选项
		Integer lqId = CommonTools.getFinalInteger("lqId", request);//做题的编号
		String loreType = "";//针对性诊断，巩固训练，再次诊断
		Integer stuId = CommonTools.getLoginUserId(request);
		Integer result = 0;//0为错,1为对
		boolean flag = false;
		String[] answerOptionStr = {"","","","","",""};
		String currTime = CurrentTime.getCurrentTime();
		Integer currentLoreId = 0;
		Integer subjectId = 0;
		Integer step = 1;
		Integer stepComplete = 0;//0:未做完题，1:做完题
		Integer isFinish = 1;//0:未做过,1:未通过，2:通过
		Integer oldStepMoney = 0;//该阶段得分
		String questionType = "";
		String dataBaseAnswer = "";
		String dataBaseAnswerChar = "";
		Integer studyLogId = 0;
		boolean updateFlag = false;
		String msg = "error";
		Map<String,Object> map = new HashMap<String,Object>();
		if(bsdId > 0 && lqId > 0){
			BuffetStudyDetailInfo bsd = bsdm.getEntityById(bsdId);
			if(bsd != null){
				LoreQuestion lq = lqm.getEntityByLqId(lqId);
				if(lq != null){
					loreType = lq.getLoreTypeName();
					subjectId = bsd.getBuffetSendInfo().getStudyLogInfo().getSubject().getId();
					dataBaseAnswer = lq.getQueAnswer();
					questionType = lq.getQueType();
					Integer quoteLoreId = lq.getLoreInfo().getId();
					Integer loreId = bsd.getBuffetSendInfo().getStudyLogInfo().getLoreInfo().getId();
					String[] loreInfo = CommonTools.getRealLoreInfo(quoteLoreId, loreId);//当前题库的指定版本下的知识点
					currentLoreId = Integer.parseInt(loreInfo[0]);
					if(questionType.equals("问答题") || questionType.equals("填空题")){
						if(myAnswer.indexOf("正确") >= 0){
							result = 1;
						}else{
							result = 0;
						}
						dataBaseAnswerChar = dataBaseAnswer;
					}else{
						JSONArray answerOptionArray = JSON.parseArray(answerOptionArrayStr);
						String[] dataBaseAnswerArray = dataBaseAnswer.split(",");
						for(int j = 0; j < dataBaseAnswerArray.length; j++){
							for(int i = 0; i < answerOptionArray.size(); i++){
								String answerOption = answerOptionArray.get(i).toString();
								if(answerOption.indexOf("Module/commonJs/ueditor/jsp/lore") >= 0){
									//表示答案选项是图片--截取前面的路径
									answerOption = answerOption.replace("Module/commonJs/ueditor/jsp/lore/", "");
								}
								if(dataBaseAnswerArray[j].equals(answerOption)){
									dataBaseAnswerChar += Convert.NumberConvertBigChar(i)+",";
									break;
								}
							}
						}
						dataBaseAnswerChar = dataBaseAnswerChar.substring(0, dataBaseAnswerChar.length() - 1);
						if(questionType.equals("多选题")){
							//顺序可以不同
							flag = false;
						}else{//不是多选题答案需要完全匹配(填空选择题、单选题，判断题)
							flag = true;
						}
						if(flag){//完全匹配
							if(dataBaseAnswerChar.equals(myAnswer)){
								result = 1;
							}else{
								result = 0;
							}
						}else{//答案顺序可以不同
							String[] myAnserArray = myAnswer.split(",");
							String[] realAnswerArray = dataBaseAnswerChar.split(",");
							String newMyAnswer = CommonTools.arraySort(myAnserArray);//排序后我的答案
							String newRealAnswer = CommonTools.arraySort(realAnswerArray);//排序后后台正确答案
							if(newMyAnswer.equals(newRealAnswer)){
								result = 1;
							}else{
								result = 0;
							}
						}
						for(int i = 0 ; i < answerOptionArray.size() ; i++){
							answerOptionStr[i] = answerOptionArray.get(i).toString();
						}
						BuffetLoreStudyLogInfo blsl = blslm.getEntityByBsdId(bsdId); 
						if(blsl != null){
							isFinish = blsl.getIsFinish();
							if(isFinish.equals(2)){//如果状态为2，说明是新开的题，studyLogId清0.
								studyLogId = 0;
							}else{
								studyLogId = blsl.getId();
							}
						}
						if(studyLogId > 0){//表示是继续之前的未做完的题（修改log里面的记录）
							if(blsdm.listLastInfoByLogId(studyLogId).get(0).getLoreQuestion().getId().equals(lqId)){
								updateFlag = false;
								msg = "reSubmit";//不能重复提交
							}else{
								updateFlag = true;
								step = blsl.getStep();
								if(isFinish.equals(1)){//表示本知识点还未完成
									if(stepComplete.equals(1)){//表示该阶段已经完成
										//将step增加1，stepComplete重新清0
										step++;
										stepComplete = 0;
										oldStepMoney = 0;
									}
								}
								if(loreType.equals("巩固训练")){
									//巩固训练只修改access状态为31，只要不是最后的提交，下次还会继续停留在学习当前知识点的状态
									//-1表示不修改对应值
									updateFlag = blslm.updateStudyLog(studyLogId, 3, 0, -1, -1, 31, "");
								}else{//
									updateFlag = blslm.updateStudyLog(studyLogId, step, stepComplete, isFinish, oldStepMoney, 0, currTime);
								}
							}
						}else{//表示新开的题
							//step值为1，stepComplete为0，isFinish为1;
							if(result == 1){
								oldStepMoney++;
							}
							//此处由于是巴菲特关联知识点，巴菲特作为第一节，知识点作为第2节，所有首次插入巴菲特知识点学习记录时step默认数值为2
							step = 2;
							studyLogId = blslm.addBLSLog(stuId, bsdId, subjectId, step, stepComplete, isFinish, oldStepMoney, 0, currTime, 1);
							if(studyLogId > 0){
								updateFlag = true;
							}
						}
						if(studyLogId > 0 &&  updateFlag == true){
							Integer questionNumber_curr = blsdm.getQuestionNumberByOption(studyLogId, lqId) + 1;
							blsdm.addBLSDetail(stuId, studyLogId, currentLoreId, lqId, questionStep, dataBaseAnswerChar, result, 
									currTime, myAnswer, answerOptionStr[0],answerOptionStr[1],answerOptionStr[2],answerOptionStr[3],
									answerOptionStr[4], answerOptionStr[5],questionNumber_curr);
							//修改用户中的经验和金币数（答一题增加1经验，答对一题再增加1经验）
							Integer coin = 0;
							Integer experience = Constants.EXPERIENCE;
							if(result == 1){//答题正确
								if(loreType.equals("巩固训练")){//巩固训练不计分
									coin = 0;
									experience = 0;
								}else{
									coin =  10;
									experience += Constants.EXPERIENCE;
								}
							}
							//修改用户的经验、金币数（不增加）
							um.updateUser(stuId, coin, experience, 0, 0);
							msg = "success";
						}
					}
				}
			}
		}
		map.put("result", msg);
		map.put("studyResult", result);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 当前阶段完成(最后提交动作)，修改指定logId的stepComplete,isFinish状态
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward updateLogStatus(ActionMapping mapping ,ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		BuffetStudyDetailManager bsdm = (BuffetStudyDetailManager) AppFactory.instance(null).getApp(Constants.WEB_BUFFET_STUDY_DETAIL_INFO);
		BuffetLoreStudyLogManager blslm = (BuffetLoreStudyLogManager) AppFactory.instance(null).getApp(Constants.WEB_BUFFET_LORE_STUDY_LOG_INFO);
		BuffetLoreStudyDetailManager blsdm = (BuffetLoreStudyDetailManager) AppFactory.instance(null).getApp(Constants.WEB_BUFFET_LORE_STUDY_DETAIL_INFO);
		Integer bsdId = CommonTools.getFinalInteger("bsdId", request);//自助餐学习记录编号
		Integer stepComplete = Integer.parseInt(request.getParameter("stepComplete"));
		Integer isFinish = CommonTools.getFinalInteger("isFinish", request);
		Integer access = CommonTools.getFinalInteger("access", request);
		Integer step = CommonTools.getFinalInteger("step", request);
		String submitType = CommonTools.getFinalStr("type", request);;//study(巩固训练),diagnosis(针对性诊断和再次诊断)
		Integer currentLoreId = CommonTools.getFinalInteger("currentLoreId", request);//当前做题的知识点编号
		Integer loreId = 0;//自助餐题库属于那个知识点名下（指定出版社下）
		BuffetLoreStudyLogInfo blsl = blslm.getEntityByBsdId(bsdId);
		Map<String,String> map = new HashMap<String,String>();
		String msg = "error";
		Integer studyLogId = 0;
		Integer taskNumber = 0;
		Integer traceCompleteFlag = -1;
		Integer currCompleteFlag = -1;
		if(blsl != null){
			msg = "success";
			studyLogId = blsl.getId();
			LoreInfo lore_init = blsl.getBuffetStudyDetailInfo().getBuffetSendInfo().getStudyLogInfo().getLoreInfo();//获取当初发送自助餐的学习记录中的知识点
			loreId = lore_init.getId();
			taskNumber = blsl.getTaskNumber() + 1;
			BuffetQueInfo bq = blsl.getBuffetStudyDetailInfo().getBuffetQueInfo();
			Integer buffetId = bq.getId();
			String buffetName = bq.getTitle();
			if(step.equals(3)){//再次诊断时用
				if(access.equals(1)){//再次诊断全部正确
					String[] studyPath = CommonTools.getBuffetLorePath(buffetId, buffetName, loreId, "sutdy");
					String studyPath_new = CommonTools.getCurrentStudyPath_new(studyPath[0], currentLoreId);
					if(studyPath_new.split(":").length == 1){//表示当前知识点是本知识点之前的最后一个知识点
						//表示当前层完成，stepComplete = 1;
						stepComplete = 0;
						access = 2;
						step = 4;
						isFinish = 1;
						traceCompleteFlag = 1;
					}
				}else{
					//根据学习记录编号获取有无当前知识点指定类型的答题记录
					List<BuffetLoreStudyDetailInfo>  blsdList = blsdm.listExistInfoByOption(studyLogId, currentLoreId, "再次诊断");
					if(submitType.equals("study")){//5步学习法学完后的提交动作
						if(blsdList.size() > 0){//表示之前有做过的答题记录
							access = 3;
						}else{//表示还没做过再次诊断
							access = 4;
						}
					}else{//再次诊断时(针对性诊断的step不可能是3)再次诊断后的提交动作
						if(blsdList.size() > 0){//表示之前有做过的答题记录
							access = 31;
						}else{//表示还没做过再次诊断
							access = 41;
						}
					}
				}
			}else if(step.equals(4)){
				if(access == 1){//再次诊断全部正确
					stepComplete = 0;
					access = 2;
					step = 4;
					isFinish = 1;
					traceCompleteFlag = 1;
				}else{
					//根据学习记录编号获取有无当前知识点指定类型的答题记录
					List<BuffetLoreStudyDetailInfo>  blsdList = blsdm.listExistInfoByOption(studyLogId, currentLoreId, "再次诊断");
					if(submitType.equals("study")){//5步学习法学完后的提交动作
						if(blsdList.size() > 0){//表示之前有做过的答题记录
							access = 3;
						}else{//表示还没做过再次诊断
							access = 4;
						}
					}else{//再次诊断时(针对性诊断的step不可能是3)再次诊断后的提交动作
						if(blsdList.size() > 0){//表示之前有做过的答题记录
							access = 31;
						}else{//表示还没做过再次诊断
							access = 41;
						}
					}
				}
			}
			//step=0表示不对step进行修改
			boolean flag = blslm.updateLogStatus(studyLogId, step, stepComplete, isFinish, access, taskNumber);
			if(flag){
				msg = "success";
				if(traceCompleteFlag.equals(1)){
					flag = bsdm.updateStatusById(bsdId, traceCompleteFlag, currCompleteFlag);
					if(!flag){
						msg = "error";
					}
				}
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 自助餐题库界面查看解析后点击做完了动作--表示该自助餐完成（所有题必须traceFlag都要完成，防止恶意提交）
	 * @author wm
	 * @date 2019-7-4 下午05:42:57
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward checkAllBuffetCompleteFlag(ActionMapping mapping ,ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		BuffetStudyDetailManager bsdm = (BuffetStudyDetailManager) AppFactory.instance(null).getApp(Constants.WEB_BUFFET_STUDY_DETAIL_INFO);
		Integer bsdId = CommonTools.getFinalInteger("bsdId", request);
		boolean flag = true;
		Map<String,Object> map = new HashMap<String,Object>();
		BuffetStudyDetailInfo bsd_curr = bsdm.getEntityById(bsdId);
		if(bsd_curr != null){
			List<BuffetStudyDetailInfo> bsdList = bsdm.listInfoByBsId(bsd_curr.getBuffetSendInfo().getId());
			if(bsdList.size() > 0){
				for(BuffetStudyDetailInfo bsd : bsdList){
					Integer traceFlag = bsd.getTraceComStatus();
					if(traceFlag.equals(1)){//该巴菲特题已经完成
						flag = false;
					}else{//被人恶意提交
						flag = true;
						break;
					}
				}
			}
		}
		map.put("result", flag);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	
	/**
	 * 获取五步学习法内容
	 * @author wm
	 * @date 2019-7-4 上午11:37:46
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getStepStudyData(ActionMapping mapping ,ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		LoreQuestionManager lqm = (LoreQuestionManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_QUESTION_INFO);
		LoreInfoManager lm = (LoreInfoManager)AppFactory.instance(null).getApp(Constants.WEB_LORE_INFO);
		BuffetStudyDetailManager bsdm = (BuffetStudyDetailManager) AppFactory.instance(null).getApp(Constants.WEB_BUFFET_STUDY_DETAIL_INFO);
		String loreTypeName = CommonTools.getFinalStr("loreTypeName", request);//五步类型video,guide,loreList,example,practice
		Integer currLoreId = CommonTools.getFinalInteger("currentLoreId", request);//即将要学习的知识点（就是map接口中的nextLoreIdArray--学习时为单个id）
		Integer bsdId = CommonTools.getFinalInteger("bsdId", request);
		String msg = "noInfo";
		Map<String,Object> map = new HashMap<String,Object>();
		Integer quoteLoreId = CommonTools.getQuoteLoreId(currLoreId);
		BuffetStudyDetailInfo bsd = bsdm.getEntityById(bsdId);
		if(bsd != null){
			map.put("loreName", bsd.getBuffetQueInfo().getTitle());
			map.put("subDetail", "检测你对该知识点的掌握情况");
		}
		if(loreTypeName.equals("video")){//视频讲解
			List<LoreQuestion> lqList = lqm.listInfoByLoreId(quoteLoreId, "知识讲解", 0);
			if(lqList.size() > 0){
				msg = "success";
				map.put("sourceDetail", lqList.get(0).getQueAnswer());
				map.put("loreTypeName", loreTypeName);
			}else{
				msg = "noInfo";
			}
		}else if(loreTypeName.equals("guide") || loreTypeName.equals("loreList")){//点拨指导//知识清单
			if(loreTypeName.equals("guide")){
				loreTypeName = "点拨指导";
			}else{
				loreTypeName = "知识清单";
			}
			msg = "success";
			List<LoreQuestion> lqList = lqm.listInfoByLoreId(quoteLoreId, loreTypeName, 0);
			if(lqList.size() > 0){
				Integer lqId = lqList.get(0).getId();
				List<LoreQuestionSubInfo> lqsList = lqm.listLQSInfoByLqId(lqId, "");
				if(lqsList.size() > 0){
					List<Object> list_d = new ArrayList<Object>();
					for(LoreQuestionSubInfo lqs : lqsList){
						String loreType = lqs.getLoreTypeName();
						Map<String,Object> map_d = new HashMap<String,Object>();
						map_d.put("loreType", loreType);
						map_d.put("lqsTitle", lqs.getLqsTitle());
						map_d.put("lqsContent", lqs.getLqsContent());
						list_d.add(map_d);
					}
					map.put("sourceDetail", list_d);
					map.put("loreTypeName", loreTypeName);
				}else{
					msg = "noInfo";
				}
			}
		}else if(loreTypeName.equals("example")){//解题示范
			loreTypeName = "解题示范";
			msg = "success";
			List<LoreQuestion> lqList = lqm.listInfoByLoreId(quoteLoreId, loreTypeName, 0);
			if(lqList.size() > 0){
				List<Object> list_d = new ArrayList<Object>();
				for(LoreQuestion lq : lqList){
					Map<String,Object> map_d = new HashMap<String,Object>();
					map_d.put("queSub", lq.getQueSub());
					map_d.put("queAnswer", lq.getQueAnswer());
					map_d.put("queResolution", lq.getQueResolution());
					list_d.add(map_d);
				}
				map.put("sourceDetail", list_d);
				map.put("loreTypeName", loreTypeName);
			}else{
				msg = "noInfo";
			}
		}else if(loreTypeName.equals("practice")){//巩固训练
			loreTypeName = "巩固训练";
			msg = "success";
			if(currLoreId > 0){
				List<LoreQuestion> lqList = lqm.listInfoByLoreId(quoteLoreId, loreTypeName, 0);
				if(lqList.size() > 0){
					List<Object> list_d = new ArrayList<Object>();
					for(LoreQuestion lq : lqList){
						Map<String,Object> map_d = new HashMap<String,Object>();
						map_d.put("lqId", lq.getId());
						LoreInfo lore = lm.getEntityById(currLoreId);
						map_d.put("currLoreId", currLoreId);
						map_d.put("currLoreName", lore.getLoreName());
						String lqType = lq.getQueType();
						map_d.put("loreType", lq.getLoreTypeName());
						map_d.put("lqType", lqType);
						map_d.put("lqType", lq.getQueType());
						map_d.put("lqSub", lq.getQueSub());
						map_d.put("answerA", lq.getA());
						map_d.put("answerB", lq.getB());
						map_d.put("answerC", lq.getC());
						map_d.put("answerD", lq.getD());
						map_d.put("answerE", lq.getE());
						map_d.put("answerF", lq.getF());
						if(lqType.equals("单选题") || lqType.equals("多选题") || lqType.equals("判断题") || lqType.equals("填空题") || lqType.equals("问答题")){
							map_d.put("answerNum", 1);
						}else{//填空选择题
							map_d.put("answerNum", lq.getQueAnswer().split(",").length);
						}
						if(lqType.equals("填空题") || lqType.equals("问答题")){
							map_d.put("realAnswer", lq.getQueAnswer());
						}
						//巩固训练全部都需要重新做
						list_d.add(map_d);
					}
					map.put("sourceDetail", list_d);
					map.put("loreTypeName", loreTypeName);
					map.put("bsdId", bsdId);
				}else{
					msg = "noInfo";
				}
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	
}