/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.zsd.action.buffet;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.zsd.action.base.Transcode;
import com.zsd.factory.AppFactory;
import com.zsd.module.BuffetLoreRelateInfo;
import com.zsd.module.BuffetQueInfo;
import com.zsd.module.BuffetSendInfo;
import com.zsd.module.BuffetStudyDetailInfo;
import com.zsd.module.JoinLoreRelation;
import com.zsd.module.LoreInfo;
import com.zsd.module.StudyLogInfo;
import com.zsd.module.json.LoreTreeMenuJson;
import com.zsd.page.PageConst;
import com.zsd.service.BuffetLoreRelateInfoManager;
import com.zsd.service.BuffetSendInfoManager;
import com.zsd.service.BuffetStudyDetailManager;
import com.zsd.service.JoinLoreRelationManager;
import com.zsd.service.LoreInfoManager;
import com.zsd.service.UserManager;
import com.zsd.tools.CommonTools;
import com.zsd.tools.Convert;
import com.zsd.tools.CurrentTime;
import com.zsd.util.Constants;

/** 
 * MyEclipse Struts
 * Creation date: 06-25-2019
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class BuffetStudyAction extends DispatchAction {
	
	/**
	 * 自助餐在线学习页面
	 * @author wm
	 * @date 2019-6-25 上午11:19:48
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward goBuffetStudyPage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		return mapping.findForward("buffetStudyPage");
	}
	
	/**
	 * 获取网络导师、班内老师发布的自助餐数据
	 * @author wm
	 * @date 2019-6-25 上午11:20:51
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception 
	 */
	public ActionForward getBuffetSendData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		BuffetSendInfoManager bsm = (BuffetSendInfoManager)AppFactory.instance(null).getApp(Constants.WEB_BUFFET_SEND_INFO);
		Integer userId = CommonTools.getLoginUserId(request);
		Integer subId = CommonTools.getFinalInteger("subId", request);
		Integer comStatus = CommonTools.getFinalInteger("comStatus", request);//完成状态，默认未全部0
		String sDate = CommonTools.getFinalStr("sDate", request);
		String eDate = CommonTools.getFinalStr("eDate", request);
		Integer pageNo = CommonTools.getFinalInteger("pageNo", request);//默认为1
		Integer pageSize = CommonTools.getFinalInteger("pageSize", request);//默认为10
		if(pageSize <= 0){
			pageSize = 10;
		}
		if(subId.equals(0)){
			subId = 2;//默认为数学
		}
		String msg = "error";
		Map<String,Object> map = new HashMap<String,Object>();
		if(userId > 0){
			Integer count = bsm.listBsInfoByOption(userId, subId, comStatus, sDate, eDate).size();
			if(count > 0){
				msg = "success";
				Integer countPage = PageConst.getPageCount(count, pageSize);
				pageNo = PageConst.getPageNo(pageNo, countPage);
				List<BuffetSendInfo> bsList = bsm.listPageInfoByOption(userId, subId, comStatus, sDate, eDate, pageNo, pageSize);
				List<Object> list_d = new ArrayList<Object>();
				for(BuffetSendInfo bs : bsList){
					Map<String,Object> map_d = new HashMap<String,Object>();
					map_d.put("bsId", bs.getId());
					map_d.put("subName", bs.getStudyLogInfo().getSubject().getSubName());
					map_d.put("loreName", bs.getStudyLogInfo().getLoreInfo().getLoreName());
					map_d.put("studyResult", bs.getStudyResult());//1:未完成，2:已完成
					map_d.put("allNumber", bs.getSendNumber());
					map_d.put("comNumber", bs.getComNumber());
					map_d.put("sendUserInfo", bs.getUser().getNickName());
					map_d.put("sendDate", bs.getSendTime().substring(0, 10));
					list_d.add(map_d);
				}
				map.put("studyList", list_d);
				map.put("countPage", countPage);
			}else{
				msg = "noInfo";
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 获取指定发送的自助餐题库
	 * @author wm
	 * @date 2019-6-26 上午10:13:55
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getBuffetQueData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		BuffetStudyDetailManager bsdm = (BuffetStudyDetailManager) AppFactory.instance(null).getApp(Constants.WEB_BUFFET_STUDY_DETAIL_INFO);
		Integer bsId = CommonTools.getFinalInteger("bsId", request);
		Integer userId = CommonTools.getLoginUserId(request);
		String msg = "noInfo";
		Map<String,Object> map = new HashMap<String,Object>();
		List<BuffetStudyDetailInfo> bsdList = bsdm.listInfoByBsId(bsId);
		if(bsdList.size() > 0){
			if(bsdList.get(0).getBuffetSendInfo().getStudyLogInfo().getUser().getId().equals(userId)){
				msg = "success";
				List<Object> list_d = new ArrayList<Object>();
				for(BuffetStudyDetailInfo bsd : bsdList){
					Map<String,Object> map_d = new HashMap<String,Object>();
					map_d.put("bsId", bsId);
					StudyLogInfo sl = bsd.getBuffetSendInfo().getStudyLogInfo();
					map_d.put("studyLogId", sl.getId());
					LoreInfo lore = sl.getLoreInfo();
					map_d.put("ediLoreId", lore.getId());//出版社下的知识点编号
					map_d.put("ediLoreName", lore.getLoreName());
					BuffetQueInfo buff = bsd.getBuffetQueInfo();
					map_d.put("buffetId", buff.getId());
					map_d.put("quoteLoreId", buff.getLoreInfo().getId());//通用版下的知识点编号
					map_d.put("queType", buff.getQueType());
					map_d.put("buffTypeId", buff.getBuffetTypeInfo().getId());
					map_d.put("buffTypeName", buff.getBuffetTypeInfo().getTypes());
					map_d.put("title", buff.getTitle());
					map_d.put("subject", buff.getSubject());
					map_d.put("answerA", buff.getA());
					map_d.put("answerB", buff.getB());
					map_d.put("answerC", buff.getC());
					map_d.put("answerD", buff.getD());
					map_d.put("answerE", buff.getE());
					map_d.put("answerF", buff.getF());
					map_d.put("resolution", buff.getResolution());
					map_d.put("myAnswer", bsd.getMyAnswer());
					if(!bsd.getMyAnswer().equals("")){//说明该题已做
						//答案选项选用做题时的答案选项
						map_d.put("answerA", bsd.getA());
						map_d.put("answerB", bsd.getB());
						map_d.put("answerC", bsd.getC());
						map_d.put("answerD", bsd.getD());
						map_d.put("answerE", bsd.getE());
						map_d.put("answerF", bsd.getF());
					}
					map_d.put("realAnswer", bsd.getRealAnswer());
					map_d.put("studyResult", bsd.getResult());
					map_d.put("traceComStatus", bsd.getTraceComStatus());
					map_d.put("currComStatus", bsd.getCurrComStatus());
					list_d.add(map_d);
				}
				map.put("bsdList", list_d);
			}else{
				msg = "error";
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 做自助餐题，修改自助餐题库信息
	 * @author wm
	 * @date 2019-6-26 下午03:22:51
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward updateBuffetStudyDetail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		BuffetStudyDetailManager bsdm = (BuffetStudyDetailManager) AppFactory.instance(null).getApp(Constants.WEB_BUFFET_STUDY_DETAIL_INFO);
		BuffetSendInfoManager bsm = (BuffetSendInfoManager)AppFactory.instance(null).getApp(Constants.WEB_BUFFET_SEND_INFO);
		UserManager um = (UserManager)AppFactory.instance(null).getApp(Constants.WEB_USER_INFO);
		Integer userId = CommonTools.getLoginUserId(request);
		Integer bsdId = CommonTools.getFinalInteger("bsdId", request);
		String myAnswer = Transcode.unescape_new1("myAnswer", request);
		String answerOptionArrayStr = Transcode.unescape_new1("answerOptionArray",request);
		String[] answerOptionStr = {"","","","","",""};
		String msg = "noInfo";
		boolean flag = false;
		Integer result = 0;//0为错,1为对
		String dataBaseAnswerChar = "";
		Map<String,Object> map = new HashMap<String,Object>();
		if(userId > 0 && bsdId > 0){
			msg = "success";
			BuffetStudyDetailInfo bsd = bsdm.getEntityById(bsdId);
			if(bsd != null){
				Integer bsId = bsd.getBuffetSendInfo().getId();
				BuffetQueInfo bq = bsd.getBuffetQueInfo();
				String buffetType = bq.getBuffetTypeInfo().getTypes();
				String realAnswer = bq.getAnswer();
				if(buffetType.equals("问答题") || buffetType.equals("填空题")){
					if(myAnswer.indexOf("正确") >= 0){
						result = 1;
					}else{
						result = 0;
					}
					dataBaseAnswerChar = answerOptionArrayStr.replaceAll("&#wmd;", "'");
				}else{
					JSONArray answerOptionArray = JSON.parseArray(answerOptionArrayStr);
					String[] dataBaseAnswerArray = realAnswer.split(",");
					for(int j = 0; j < dataBaseAnswerArray.length; j++){
						for(int i = 0; i < answerOptionArray.size(); i++){
							String answerOption = answerOptionArray.get(i).toString();
							if(answerOption.indexOf("Module/commonJs/ueditor/jsp/lore") >= 0){
								//表示答案选项是图片--截取前面的路径
								answerOption = answerOption.replace("Module/commonJs/ueditor/jsp/lore/", "");
							}
							if(dataBaseAnswerArray[j].equals(answerOption)){
								dataBaseAnswerChar += Convert.NumberConvertBigChar(i)+",";
								break;
							}
						}
					}
					dataBaseAnswerChar = dataBaseAnswerChar.substring(0, dataBaseAnswerChar.length() - 1);
					if(buffetType.equals("多选题")){
						flag = false;//顺序可以不同
					}else{//不是多选题答案需要完全匹配(填空选择题、单选题，判断题)
						flag = true;
					}
					if(flag){//完全匹配
						if(dataBaseAnswerChar.equals(myAnswer)){
							result = 1;
						}else{
							result = 0;
						}
					}else{//答案顺序可以不同
						String[] myAnserArray = myAnswer.split(",");
						String[] realAnswerArray = dataBaseAnswerChar.split(",");
						String newMyAnswer = CommonTools.arraySort(myAnserArray);//排序后我的答案
						String newRealAnswer = CommonTools.arraySort(realAnswerArray);//排序后后台正确答案
						if(newMyAnswer.equals(newRealAnswer)){
							result = 1;
						}else{
							result = 0;
						}
					}
					for(int i = 0 ; i < answerOptionArray.size() ; i++){
						answerOptionStr[i] = answerOptionArray.get(i).toString().replaceAll("&#wmd;", "'");
					}
				}
				//修改自助餐答题情况
				boolean upFlag = bsdm.updateBuffetStudyDetailById(bsdId, myAnswer, result, CurrentTime.getCurrentTime(), 
						answerOptionStr[0], answerOptionStr[1], answerOptionStr[2],
				        answerOptionStr[3], answerOptionStr[4], answerOptionStr[5]);
				Integer coin = 0;//自助餐不增加金币数
				Integer experience = Constants.EXPERIENCE;
				if(upFlag){
					if(result.equals(1)){
						experience += Constants.EXPERIENCE;
						//当巴菲特题直接正确时--需要修改buffetStudyDetail中的traceCompleteFlag和currCompleteFlag的值为1
						bsdm.updateStatusById(bsdId, 1, 1);
						//修改自助餐发送记录中的完成次数
						bsm.updateBuffetSend(bsId, 0, 1);
					}
					um.updateUser(userId, coin, experience, 0, 0);
				}
			}
		}
		map.put("result", msg);
		map.put("studyResult", result);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 获取当前自助餐下的关联知识点（筛去没有的）
	 * @author wm
	 * @date 2019-6-27 上午08:05:49
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward showRelationByBuffetAndLore(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		BuffetLoreRelateInfoManager blrm = (BuffetLoreRelateInfoManager) AppFactory.instance(null).getApp(Constants.WEB_BUFFET_LORE_RELATE_INFO);
		JoinLoreRelationManager jlrm = (JoinLoreRelationManager) AppFactory.instance(null).getApp(Constants.WEB_JOIN_LORE_RELATE_INFO);
		LoreInfoManager lm = (LoreInfoManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_INFO);
		Integer buffetId = CommonTools.getFinalInteger("buffetId", request);
		Integer currBasicLoreId = CommonTools.getFinalInteger("currBasicLoreId", request);;//通用知识点
		Integer currLoreId = CommonTools.getFinalInteger("currLoreId", request);;//出版社下知识点编号
		String relateLoreIdStr = "";//该出版社下的关联知识点
		Integer editionId = 0;//当前知识点所在的出版社
		String msg = "noInfo";
		List<BuffetLoreRelateInfo> blrList = blrm.listInfoByOpt(buffetId, currBasicLoreId);
		if(blrList.size() == 0){//表示该巴菲特下没有关联，需要查询与之合并的知识点，查询合并的知识点有无巴菲特题
			//step1:根据通用知识点获取与之合并的其他知识点
			JoinLoreRelation jlr = jlrm.getInfoByLoreId(currBasicLoreId);
			if(jlr != null){
				String[] loreIdArray = jlr.getLoreIdArray().split(",");
				for(Integer i = 0 ; i < loreIdArray.length ; i++){
					Integer joinLoreId = Integer.parseInt(loreIdArray[i]);
					//step2:查询合并的知识点下面有无关联知识点（合并知识点共用关联知识点）
					if(!currBasicLoreId.equals(joinLoreId)){
						blrList = blrm.listInfoByOpt(buffetId, joinLoreId);
						if(blrList.size() > 0){
							break;
						}
					}
				}
			}
		}
		if(blrList.size() > 0){
			LoreInfo lore = lm.getEntityById(currLoreId);
			if(lore != null){
				editionId = lore.getChapter().getEducation().getEdition().getId();
				//通用版关联的知识点
				for(BuffetLoreRelateInfo blr : blrList){
					List<LoreInfo> loreList = lm.listInfoByMainLoreId(blr.getLoreInfoByLoreId().getId());
					for(LoreInfo lore_tmp : loreList){
						Integer relateLoreId = lore_tmp.getId();
						Integer inUse = lore_tmp.getInUse();
						if(inUse.equals(0)){//获取知识点的启用状态0：启用
							//通过通用版知识点编号获取被引用的知识点所在的出版社
							Integer joinLoreEditionId = lore_tmp.getChapter().getEducation().getEdition().getId();
							if(editionId.equals(joinLoreEditionId)){//两个出版社必须保持一致
								relateLoreIdStr += relateLoreId + ",";
								break;
							}
						}
					}
				}
			}
		}
		if(!relateLoreIdStr.equals("")){
			relateLoreIdStr = relateLoreIdStr.substring(0, relateLoreIdStr.length() - 1);
			msg = "success";
		}
		Map<String,String> map = new HashMap<String,String>();
		map.put("result", msg);
		map.put("relateLoreIdStr", relateLoreIdStr);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 获取当前巴菲特发布记录的详细完成情况（opt=trace时必须traceFlag完成，防止恶意提交。opt=currCom主要用于提交后页面不刷新时答题状态不变化）
	 * false:1,true:0
	 * @author wm
	 * @date 2019-6-27 上午09:41:16
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getCurrBuffetFlag(ActionMapping mapping ,ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		BuffetStudyDetailManager bsdm = (BuffetStudyDetailManager) AppFactory.instance(null).getApp(Constants.WEB_BUFFET_STUDY_DETAIL_INFO);
		Integer bsdId = CommonTools.getFinalInteger("bsdId", request);
		String opt = CommonTools.getFinalStr("opt", request);//trace(溯源完成标记),currCom(当前自助餐完成标记)
		BuffetStudyDetailInfo bsd = bsdm.getEntityById(bsdId);
		boolean flag = true;
		Integer status = 0;//0:未完成,1:已完成
		if(bsd != null){
			if(opt.equals("trace")){
				status = bsd.getTraceComStatus();
			}else if(opt.equals("currCom")){
				status = bsd.getCurrComStatus();
			}
			if(status.equals(1)){
				flag = false;
			}
		}
		Map<String,Boolean> map = new HashMap<String,Boolean>();
		map.put("result", flag);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 根据巴菲特学习记录编号修改当前巴菲特学习记录已完成currCompleteFlag=1
	 * @author wm
	 * @date 2019-6-27 上午10:04:21
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward updateCurrCompleteFlag(ActionMapping mapping ,ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		BuffetStudyDetailManager bsdm = (BuffetStudyDetailManager) AppFactory.instance(null).getApp(Constants.WEB_BUFFET_STUDY_DETAIL_INFO);
		BuffetSendInfoManager bsm = (BuffetSendInfoManager)AppFactory.instance(null).getApp(Constants.WEB_BUFFET_SEND_INFO);
		Integer bsdId = CommonTools.getFinalInteger("bsdId", request);
		boolean flag = bsdm.updateStatusById(bsdId, 1, 1);//自助餐都完成了，肯定溯源也完成
		if(flag){
			BuffetSendInfo bs = bsdm.getEntityById(bsdId).getBuffetSendInfo();
			Integer bsId = bs.getId();
			Integer allNumber = bs.getSendNumber();
			if(allNumber > bs.getComNumber()){
				//分两种情况（当最后一道题）
				//1:直接答题正确，这时completeNumber已经+1，所以不能再执行增加
				//2:答题错误，进入溯源，溯源完成后，点击完成，这时completeNumber没+1，所以要执行增加
				Integer isFinish = 0;
//				if(allNumber.equals(bs.getComNumber() + 1)){//最后一题
//					isFinish = 2;//学习完成
//				}
				flag = bsm.updateBuffetSend(bsId, isFinish, 1);
			}
		}
		Map<String,Boolean> map = new HashMap<String,Boolean>();
		map.put("result", flag);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 自助餐答题错误后导向关联知识点的溯源页面
	 * @author wm
	 * @date 2019-6-27 上午10:33:29
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward goBuffetLoreTracePage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
	
		return mapping.findForward("buffetTracePage");
	}
	
	/**
	 * 自助餐答题错误后获取关联知识点的溯源数据
	 * @author wm
	 * @date 2019-6-27 上午10:35:28
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getBuffetLoreTraceDate(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		BuffetStudyDetailManager bsdm = (BuffetStudyDetailManager) AppFactory.instance(null).getApp(Constants.WEB_BUFFET_STUDY_DETAIL_INFO);
		BuffetSendInfoManager bsm = (BuffetSendInfoManager)AppFactory.instance(null).getApp(Constants.WEB_BUFFET_SEND_INFO);
		BuffetLoreRelateInfoManager blrm = (BuffetLoreRelateInfoManager) AppFactory.instance(null).getApp(Constants.WEB_BUFFET_LORE_RELATE_INFO);
		JoinLoreRelationManager jlrm = (JoinLoreRelationManager) AppFactory.instance(null).getApp(Constants.WEB_JOIN_LORE_RELATE_INFO);
		LoreInfoManager lm = (LoreInfoManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_INFO);
		Integer bsdId = CommonTools.getFinalInteger("bsdId", request);
		BuffetStudyDetailInfo bsd = bsdm.getEntityById(bsdId);
		if(bsd != null){
			Integer basicLoreId = bsd.getBuffetSendInfo().getStudyLogInfo().getLoreInfo().getId();//发布巴菲特的学习的知识点编号
			Integer buffetId = bsd.getBuffetQueInfo().getId();
			String buffetName = bsd.getBuffetQueInfo().getTitle();
			String nextLoreIdArray = "";//下级知识典编号数组
			Integer isFinish = 0;
			Integer task = 1;//第几个任务数（课后复习任务数）
			Integer money = Constants.COIN;
			String loreTaskName = "";
			String buttonValue = "开始挑战";
			String path = "";//顺序路线图(诊断时)
			String pathChi = "";
			String studyPath = "";//学习的路线
			String studyPathChi = "";
			Integer stepCount = 0;//知识点有多少级
			Integer loreCount = 0;//有多少知识点
			String pathType = "diagnosis";//类型:diagnosis--诊断，study--学习
			String loreTypeName = "针对性诊断";
			Integer access = -1;
			String page = "detailList";
			String[] pathArr = CommonTools.getBuffetLorePath(buffetId, buffetName, basicLoreId, pathType);
			path =  pathArr[0];
			pathChi = pathArr[1];
			LoreTreeMenuJson ltmj = new LoreTreeMenuJson();
			if(!path.equals("")){
				stepCount = path.split(":").length;//多少级
				loreCount = ltmj.getLoreNum(path);//多少个知识点
			}
			//通过buffet_study_detail_id获取buffet_lore_study_log_id
			
		}
		return null;
	}
}