/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.zsd.action.base;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import jxl.Cell;
import jxl.Sheet;
import jxl.Workbook;
import jxl.WorkbookSettings;
import jxl.read.biff.BiffException;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.util.HSSFColor;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.zsd.factory.AppFactory;
import com.zsd.module.ClassInfo;
import com.zsd.module.Edition;
import com.zsd.module.Education;
import com.zsd.module.GradeSubject;
import com.zsd.module.InviteCodeInfo;
import com.zsd.module.NetTeacherInfo;
import com.zsd.module.NetTeacherStudent;
import com.zsd.module.RoleInfo;
import com.zsd.module.School;
import com.zsd.module.StudyLogInfo;
import com.zsd.module.Subject;
import com.zsd.module.User;
import com.zsd.module.UserClassInfo;
import com.zsd.page.PageConst;
import com.zsd.service.BuffetSendInfoManager;
import com.zsd.service.ClassInfoManager;
import com.zsd.service.EditionManager;
import com.zsd.service.EducationManager;
import com.zsd.service.EmailManager;
import com.zsd.service.GradeSubjectManager;
import com.zsd.service.HwStudyTjManager;
import com.zsd.service.InviteCodeInfoManager;
import com.zsd.service.NetTeacherInfoManager;
import com.zsd.service.NetTeacherStudentManager;
import com.zsd.service.ParentClubManager;
import com.zsd.service.RoleInfoManager;
import com.zsd.service.RoleUserInfoManager;
import com.zsd.service.SchoolManager;
import com.zsd.service.StudentParentInfoManager;
import com.zsd.service.StudyLogManager;
import com.zsd.service.SubjectManager;
import com.zsd.service.UserClassInfoManager;
import com.zsd.service.UserManager;
import com.zsd.tools.CommonTools;
import com.zsd.tools.Convert;
import com.zsd.tools.CurrentTime;
import com.zsd.tools.InviteCode;
import com.zsd.util.Constants;

/** 
 * MyEclipse Struts
 * Creation date: 04-29-2019
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class CommonAction extends DispatchAction {
	
	/**
	 * 班级列表按照降序排列（九年级1班）
	 * @author Administrator
	 * @createDate 2019-8-3
	 */
	@SuppressWarnings({ "unchecked", "rawtypes" })
	private class SortCName implements Comparator {
		@Override
	    public int compare(Object obj0, Object obj1) {
	      Map<String, String> map0 = (Map) obj0;
	      Map<String, String> map1 = (Map) obj1;
	      int flag = map0.get("cName").toString().compareTo(map1.get("cName").toString());
	      return flag; // 不取反，则按正序排列
	    }
	 }
	
	/**
	 * 导向出版社页面
	 * @author  Administrator
	 * @ModifiedBy  
	 * @date  2019-5-1 下午04:32:47
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward goEditionPage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		return mapping.findForward("ediPage");
	}
	
	/**
	 * 根据条件获取出版社列表
	 * @description
	 * @author Administrator
	 * @date 2019-4-28 下午03:52:00
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception 
	 */
	public ActionForward getEditionData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		EditionManager em = (EditionManager) AppFactory.instance(null).getApp(Constants.WEB_EDITION_INFO);
		Integer showStatus = CommonTools.getFinalInteger("showStatus", request);//-1表示全部,0：显示，1：隐藏
		Integer opt = CommonTools.getFinalInteger("opt", request);//显示内容0:全部，1：只显示通用版，2：只显示除通用版以外的其他版本
		List<Edition> ediList = em.listInfoByShowStatus(0, showStatus);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "error";
		Integer count = ediList.size();
		if(count > 0){
			msg = "success";
			List<Object> list_d = new ArrayList<Object>();
			for(Iterator<Edition> it = ediList.iterator() ; it.hasNext();){
				Edition edi = it.next();
				Map<String,Object> map_d = new HashMap<String,Object>();
				if(opt.equals(1)){//1：只显示通用版
					if(edi.getEdiName().equals("通用版")){
						map_d.put("id", edi.getId());
						map_d.put("ediName", edi.getEdiName());
						map_d.put("ediOrder", edi.getEdiOrder());
						if(edi.getShowStatus().equals(0)){
							map_d.put("showStatusChi", "显示");
						}else{
							map_d.put("showStatusChi", "隐藏");
						}
						map_d.put("showStatus", edi.getShowStatus());
						list_d.add(map_d);
						count = 1;
						list_d.add(map_d);
						break;
					}
				}else if(opt.equals(2)){//2：只显示除通用版以外的其他版本
					if(!edi.getEdiName().equals("通用版")){
						map_d.put("id", edi.getId());
						map_d.put("ediName", edi.getEdiName());
						map_d.put("ediOrder", edi.getEdiOrder());
						if(edi.getShowStatus().equals(0)){
							map_d.put("showStatusChi", "显示");
						}else{
							map_d.put("showStatusChi", "隐藏");
						}
						map_d.put("showStatus", edi.getShowStatus());
						list_d.add(map_d);
					}
				}else{//全部时
					map_d.put("id", edi.getId());
					map_d.put("ediName", edi.getEdiName());
					map_d.put("ediOrder", edi.getEdiOrder());
					if(edi.getShowStatus().equals(0)){
						map_d.put("showStatusChi", "显示");
					}else{
						map_d.put("showStatusChi", "隐藏");
					}
					map_d.put("showStatus", edi.getShowStatus());
					list_d.add(map_d);
				}
			}
			map.put("data", list_d);
			if(opt.equals(2)){
				count -= 1;
			}
			map.put("count", count);
			map.put("code", 0);
		}else{
			msg = "暂无记录";
		}
		map.put("msg", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 获取指定出版社详情
	 * @author wm
	 * @date 2019-5-4 下午10:11:36 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getEditionDetail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		EditionManager em = (EditionManager) AppFactory.instance(null).getApp(Constants.WEB_EDITION_INFO);
		Integer ediId = CommonTools.getFinalInteger("ediId", request);
		List<Edition> ediList = em.listInfoByShowStatus(ediId, -1);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "error";
		if(ediList.size() > 0){
			msg = "success";
			Edition edi = ediList.get(0);
			map.put("id", edi.getId());
			map.put("ediName", edi.getEdiName());
			map.put("ediOrder", edi.getEdiOrder());
			map.put("showStatus", edi.getShowStatus());
		}else{
			msg = "noInfo";
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 导向学科页面
	 * @author  Administrator
	 * @ModifiedBy  
	 * @date  2019-5-1 下午04:33:58
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward goSubjectPage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		return mapping.findForward("subjectPage");
	}
	
	/**
	 * 获取学科列表
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getSubjectData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		SubjectManager sm = (SubjectManager) AppFactory.instance(null).getApp(Constants.WEB_SUBJECT_INFO);
		Integer showStatus = CommonTools.getFinalInteger("showStatus", request);//-1表示全部,0：显示，1：隐藏
		List<Subject> sList = sm.listInfoByDisplayStatus(showStatus);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "error";
		if(sList.size() > 0){
			msg = "success";
			List<Object> list_d = new ArrayList<Object>();
			for(Iterator<Subject> it = sList.iterator() ; it.hasNext();){
				Subject sub = it.next();
				Map<String,Object> map_d = new HashMap<String,Object>();
				map_d.put("id", sub.getId());
				map_d.put("subName", sub.getSubName());
				map_d.put("subOrder", sub.getSubOrder());
				if(sub.getDisplayStatus().equals(0)){
					map_d.put("showStatusChi", "显示");
				}else{
					map_d.put("showStatusChi", "隐藏");
				}
				list_d.add(map_d);
			}
			map.put("data", list_d);
			map.put("count", sList.size());
			map.put("code", 0);
		}else{
			msg = "暂无记录";
		}
		map.put("msg", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 导向年级学科页面
	 * @author  Administrator
	 * @ModifiedBy  
	 * @date  2019-5-1 下午04:34:47
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward goGSubjectPage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		return mapping.findForward("gsPage");
	}
	
	/**
	 * 分页获取年级学科列表
	 * @author wm
	 * @date 2019-4-28 下午10:15:54 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getGSubjectData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		GradeSubjectManager gsm = (GradeSubjectManager) AppFactory.instance(null).getApp(Constants.WEB_GRADE_SUBJECT_INFO);
		String gName = Transcode.unescape_new("gName", request);
		Integer subId = CommonTools.getFinalInteger("subId", request);
		Integer showStatus = CommonTools.getFinalInteger("showStatus", request);//-1表示全部,0：显示，1：隐藏
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "error";
		Integer count = gsm.getCountByOpt(gName, subId, 0, showStatus);
		if(count > 0){
			Integer pageSize = PageConst.getPageSize(String.valueOf(request.getParameter("limit")), 10);//等同于pageSize
			Integer pageNo = CommonTools.getFinalInteger("page", request);//等同于pageNo
			List<GradeSubject> gsList = gsm.listPageInfoByOpt(gName, subId, 0, showStatus, pageNo, pageSize);
			msg = "success";
			List<Object> list_d = new ArrayList<Object>();
			for(Iterator<GradeSubject> it = gsList.iterator() ; it.hasNext();){
				GradeSubject gs = it.next();
				Map<String,Object> map_d = new HashMap<String,Object>();
				map_d.put("id", gs.getId());
				map_d.put("gName", gs.getGradeName());
				map_d.put("subName", gs.getSubject().getSubName());
				Integer schoolType = gs.getSchoolType();
				String schoolTypeChi = "";
				if(schoolType.equals(1)){
					schoolTypeChi = "小学";
				}else if(schoolType.equals(2)){
					schoolTypeChi = "初中";
				}else if(schoolType.equals(3)){
					schoolTypeChi = "高中";
				}
				map_d.put("schoolTypeChi", schoolTypeChi);
				if(gs.getDisplayStatus().equals(0)){
					map_d.put("showStatusChi", "可见");
				}else{
					map_d.put("showStatusChi", "隐藏");
				}
				list_d.add(map_d);
			}
			map.put("data", list_d);
			map.put("count", count);
			map.put("code", 0);
		}else{
			msg = "暂无记录";
		}
		map.put("msg", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 根据年级名称获取学科列表
	 * @author wm
	 * @date 2019-5-7 上午09:57:56
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getSubjectDataByGname(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		GradeSubjectManager gsm = (GradeSubjectManager) AppFactory.instance(null).getApp(Constants.WEB_GRADE_SUBJECT_INFO);
		String gName = Transcode.unescape_new("gName", request);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "noInfo";
		List<GradeSubject> gsList = gsm.listSpecInfoByGname(gName);
		if(gsList.size() > 0){
			msg = "success";
			List<Object> list_d = new ArrayList<Object>();
			for(Iterator<GradeSubject> it = gsList.iterator() ; it.hasNext();){
				GradeSubject gs = it.next();
				Map<String,Object> map_d = new HashMap<String,Object>();
				map_d.put("subId", gs.getSubject().getId());
				map_d.put("subName", gs.getSubject().getSubName());
				list_d.add(map_d);
			}
			map.put("subList", list_d);
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	/**
	 * 根据学段获取学科列表
	 * @author zong
	 * 2019-6-10下午05:54:24
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getSubjectDataBySchType(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		GradeSubjectManager gsm = (GradeSubjectManager) AppFactory.instance(null).getApp(Constants.WEB_GRADE_SUBJECT_INFO);
		Integer schType = CommonTools.getFinalInteger("schType", request);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "noInfo";
		List<GradeSubject> gsList = gsm.findSpecInfoByschType(schType);
		if(gsList.size() > 0){
			msg = "success";
			List<Object> list_d = new ArrayList<Object>();
			for(Iterator<GradeSubject> it = gsList.iterator() ; it.hasNext();){
				GradeSubject gs = it.next();
				Map<String,Object> map_d = new HashMap<String,Object>();
				map_d.put("subId", gs.getSubject().getId());
				map_d.put("subName", gs.getSubject().getSubName());
				list_d.add(map_d);
			}
			map.put("subList", list_d);
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 根据学科编号获取年级列表
	 * @author wm
	 * @date 2019-5-7 下午05:22:53
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getGradeDataBySubId(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		GradeSubjectManager gsm = (GradeSubjectManager) AppFactory.instance(null).getApp(Constants.WEB_GRADE_SUBJECT_INFO);
		Integer subId = CommonTools.getFinalInteger("subId", request);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "noInfo";
		List<GradeSubject> gsList = gsm.listSpecInfoBySubId(subId);
		if(gsList.size() > 0){
			msg = "success";
			List<Object> list_d = new ArrayList<Object>();
			for(Iterator<GradeSubject> it = gsList.iterator() ; it.hasNext();){
				GradeSubject gs = it.next();
				Map<String,Object> map_d = new HashMap<String,Object>();
				map_d.put("gsId", gs.getId());
				map_d.put("gName", gs.getGradeName());
				list_d.add(map_d);
			}
			map.put("gList", list_d);
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 获取指定年级学科编号详情
	 * @author wm
	 * @date 2019-4-28 下午10:34:39 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getGSubjectDetail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		GradeSubjectManager gsm = (GradeSubjectManager) AppFactory.instance(null).getApp(Constants.WEB_GRADE_SUBJECT_INFO);
		SubjectManager sm = (SubjectManager) AppFactory.instance(null).getApp(Constants.WEB_SUBJECT_INFO);
		Integer gsId = CommonTools.getFinalInteger("gsId", request);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "error";
		List<GradeSubject> gsList = gsm.listSpecInfoById(gsId);
		if(gsList.size() > 0){
			msg = "success";
			GradeSubject gs = gsList.get(0);
			map.put("id", gs.getId());
			Integer subId = gs.getSubject().getId();
			map.put("subId", subId);
			//获取所有学科列表
			List<Subject> sList = sm.listInfoByDisplayStatus(0);
			List<Object> list_sub_d = new ArrayList<Object>();
			for(Iterator<Subject> it = sList.iterator() ; it.hasNext();){
				Subject sub = it.next();
				Map<String,Object> map_sub_d = new HashMap<String,Object>();
				map_sub_d.put("subId", sub.getId());
				map_sub_d.put("subName", sub.getSubName());
				if(subId.equals(sub.getId())){
					map_sub_d.put("selStatus", true);
				}else{
					map_sub_d.put("selStatus", false);
				}
				list_sub_d.add(map_sub_d);
			}
			map.put("subList", list_sub_d);
			Integer schoolType = gs.getSchoolType();
			map.put("schoolType", schoolType);
			map.put("gName", gs.getGradeName());
			map.put("showStatus", gs.getDisplayStatus());
		}else{
			msg = "noInfo";
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 获取指定学科下的学科年级列表
	 * @author wm
	 * @date 2019-4-28 下午11:16:06 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getGSubjectBySubId(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		GradeSubjectManager gsm = (GradeSubjectManager) AppFactory.instance(null).getApp(Constants.WEB_GRADE_SUBJECT_INFO);
		Integer subId = CommonTools.getFinalInteger("subId", request);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "error";
		List<GradeSubject> gsList = gsm.listSpecInfoBySubId(subId);
		if(gsList.size() > 0){
			msg = "success";
			List<Object> list_d = new ArrayList<Object>();
			for(Iterator<GradeSubject> it = gsList.iterator() ; it.hasNext();){
				Map<String,Object> map_d = new HashMap<String,Object>();
				GradeSubject gs = it.next();
				map_d.put("gId", gs.getId());
				Integer schoolType = gs.getSchoolType();
				String schoolTypeChi = "";
				if(schoolType.equals(1)){
					schoolTypeChi = "小学:";
				}else if(schoolType.equals(2)){
					schoolTypeChi = "初中:";
				}else if(schoolType.equals(3)){
					schoolTypeChi = "高中:";
				}
				map_d.put("gName", schoolTypeChi+gs.getGradeName());
				list_d.add(map_d);
			}
			map.put("gsList", list_d);
		}else{
			msg = "noInfo";
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 修改指定的年级学科信息
	 * @author wm
	 * @date 2019-4-28 下午10:31:31 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward updateGSubjectInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		GradeSubjectManager gsm = (GradeSubjectManager) AppFactory.instance(null).getApp(Constants.WEB_GRADE_SUBJECT_INFO);
		Integer gsId = CommonTools.getFinalInteger("gsId", request);
		String gName = Transcode.unescape_new("gName", request);
		Integer subId = CommonTools.getFinalInteger("subId", request);
		Integer showStatus = CommonTools.getFinalInteger("showStatus", request);//0：显示，1：隐藏
		Integer schoolType = CommonTools.getFinalInteger("schoolType", request);
		List<GradeSubject> gsList_1 = gsm.listSpecInfoById(gsId);
		boolean existFlag = false;
		Map<String,String> map = new HashMap<String,String>();
		if(gsList_1.size() > 0){
			GradeSubject gs = gsList_1.get(0);
			if(gName.equals(gs.getGradeName()) && subId.equals(gs.getSubject().getId()) && schoolType.equals(gs.getSchoolType())){
				//都没发生变化，不用检查
			}else{
				//有变化，需要检查
				List<GradeSubject> gsList = gsm.listSpecInfoByOpt(gName, subId, schoolType);
				if(gsList.size() > 0){
					existFlag = true;
				}
			}
		}
		if(!existFlag){
			gsm.updateGSub(gsId, gName, subId, schoolType, showStatus);
			map.put("result", "success");
		}else{
			map.put("result", "existInfo");
		}
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 增加年级学科信息
	 * @author Administrator
	 * @date 2019-5-5 上午09:45:52
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward addGSubjectInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		GradeSubjectManager gsm = (GradeSubjectManager) AppFactory.instance(null).getApp(Constants.WEB_GRADE_SUBJECT_INFO);
		String gName = Transcode.unescape_new("gName", request);
		Integer subId = CommonTools.getFinalInteger("subId", request);
		Integer schoolType = CommonTools.getFinalInteger("schoolType", request);
		List<GradeSubject> gsList = gsm.listSpecInfoByOpt(gName, subId, schoolType);
		Map<String,String> map = new HashMap<String,String>();
		if(gsList.size() > 0){
			map.put("result", "existInfo");
		}else{
			gsm.addGSub(gName, subId, schoolType);
			map.put("result", "success");
		}
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 导向教材页面
	 * @author  Administrator
	 * @ModifiedBy  
	 * @date  2019-5-1 下午04:35:32
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward goEducationPage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		return mapping.findForward("eduPage");
	}
	
	/**
	 * 分页获取指定条件的教材信息列表
	 * @author Administrator
	 * @date 2019-4-29 上午11:01:30
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getEducationData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		EducationManager em = (EducationManager) AppFactory.instance(null).getApp(Constants.WEB_EDUCATION_INFO);
		Integer ediId = CommonTools.getFinalInteger("ediId", request);
		Integer gsId = CommonTools.getFinalInteger("gsId", request);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "error";
		Integer count = em.getCountByOpt(ediId, gsId);
		if(count > 0){
			Integer pageSize = PageConst.getPageSize(String.valueOf(request.getParameter("limit")), 10);//等同于pageSize
			Integer pageNo = CommonTools.getFinalInteger("page", request);//等同于pageNo
			List<Education> eList = em.listPageInfoByOpt(ediId, gsId, pageNo, pageSize);
			msg = "success";
			List<Object> list_d = new ArrayList<Object>();
			for(Iterator<Education> it = eList.iterator() ; it.hasNext();){
				Education edu = it.next();
				Map<String,Object> map_d = new HashMap<String,Object>();
				map_d.put("eduId", edu.getId());
				map_d.put("ediName", edu.getEdition().getEdiName());
				GradeSubject gs = edu.getGradeSubject();
				Subject sub = gs.getSubject();
				map_d.put("subName", sub.getSubName());
				Integer schoolType = gs.getSchoolType();
				String schoolTypeChi = "";
				if(schoolType.equals(1)){
					schoolTypeChi = "小学";
				}else if(schoolType.equals(2)){
					schoolTypeChi = "初中";
				}else if(schoolType.equals(3)){
					schoolTypeChi = "高中";
				}
				map_d.put("schoolType", schoolTypeChi);
				map_d.put("gradeName", gs.getGradeName());
				Integer showStatus = edu.getDisplayStatus();
				if(showStatus.equals(0)){
					map_d.put("showStatusChi", "可见");
				}else{
					map_d.put("showStatusChi", "隐藏");
				}
				map_d.put("eduColume", edu.getEduVolume());
				list_d.add(map_d);
			}
			map.put("data", list_d);
			map.put("count", count);
			map.put("code", 0);
		}else{
			msg = "暂无记录";
		}
		map.put("msg", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 获取教材详情
	 * @author Administrator
	 * @date 2019-4-29 上午11:15:08
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getEducationDetail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		EducationManager em = (EducationManager) AppFactory.instance(null).getApp(Constants.WEB_EDUCATION_INFO);
		SubjectManager sm = (SubjectManager) AppFactory.instance(null).getApp(Constants.WEB_SUBJECT_INFO);
		EditionManager edim = (EditionManager) AppFactory.instance(null).getApp(Constants.WEB_EDITION_INFO);
		GradeSubjectManager gsm = (GradeSubjectManager) AppFactory.instance(null).getApp(Constants.WEB_GRADE_SUBJECT_INFO);
		Integer eduId = CommonTools.getFinalInteger("eduId", request);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "error";
		List<Education> eList = em.listSpecInfoById(eduId);
		if(eList.size() > 0){
			msg = "success";
			Education edu = eList.get(0);
			map.put("eduId", edu.getId());
			Integer subId = edu.getGradeSubject().getSubject().getId();
			map.put("subId", subId);
			//获取所有学科列表
			List<Subject> sList = sm.listInfoByDisplayStatus(0);
			List<Object> list_sub_d = new ArrayList<Object>();
			for(Iterator<Subject> it = sList.iterator() ; it.hasNext();){
				Subject sub = it.next();
				Map<String,Object> map_sub_d = new HashMap<String,Object>();
				map_sub_d.put("subId", sub.getId());
				map_sub_d.put("subName", sub.getSubName());
				if(subId.equals(sub.getId())){
					map_sub_d.put("selStatus", true);
				}else{
					map_sub_d.put("selStatus", false);
				}
				list_sub_d.add(map_sub_d);
			}
			map.put("subList", list_sub_d);
			Integer gradeId = edu.getGradeSubject().getId();
			map.put("gradeId", gradeId);
			//获取指定学科的年级学科列表
			List<GradeSubject> gsList = gsm.listSpecInfoBySubId(subId);
			if(gsList.size() > 0){
				List<Object> list_g_d = new ArrayList<Object>();
				for(Iterator<GradeSubject> it = gsList.iterator() ; it.hasNext();){
					Map<String,Object> map_g_d = new HashMap<String,Object>();
					GradeSubject gs = it.next();
					map_g_d.put("gId", gs.getId());
					Integer schoolType = gs.getSchoolType();
					String schoolTypeChi = "";
					if(schoolType.equals(1)){
						schoolTypeChi = "小学:";
					}else if(schoolType.equals(2)){
						schoolTypeChi = "初中:";
					}else if(schoolType.equals(3)){
						schoolTypeChi = "高中:";
					}
					map_g_d.put("gName", schoolTypeChi+gs.getGradeName());
					if(gradeId.equals(gs.getId())){
						map_g_d.put("selStatus", true);
					}else{
						map_g_d.put("selStatus", false);
					}
					list_g_d.add(map_g_d);
				}
				map.put("gList", list_g_d);
			}
			//获取所有出版社列表
			Integer ediId = edu.getEdition().getId();
			map.put("ediId", ediId);
			List<Edition> ediList = edim.listInfoByShowStatus(0, 0);
			if(ediList.size() > 0){
				List<Object> list_edi_d = new ArrayList<Object>();
				for(Iterator<Edition> it = ediList.iterator() ; it.hasNext();){
					Edition edi = it.next();
					Map<String,Object> map_edi_d = new HashMap<String,Object>();
					map_edi_d.put("ediId", edi.getId());
					map_edi_d.put("ediName", edi.getEdiName());
					if(ediId.equals(edi.getId())){
						map_edi_d.put("selStatus", true);
					}else{
						map_edi_d.put("selStatus", false);
					}
					list_edi_d.add(map_edi_d);
				}
				map.put("ediList", list_edi_d);
			}
			map.put("showStatus", edu.getDisplayStatus());
			map.put("eduColume", edu.getEduVolume());
			map.put("eduImg", edu.getEduImg());
		}else{
			msg = "noInfo";
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 修改指定教材的信息
	 * @author Administrator
	 * @date 2019-4-29 上午11:26:57
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward updateEducationInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		EducationManager em = (EducationManager) AppFactory.instance(null).getApp(Constants.WEB_EDUCATION_INFO);
		Integer ediId = CommonTools.getFinalInteger("ediId", request);
		Integer eduId = CommonTools.getFinalInteger("eduId", request);
		Integer gradeId = CommonTools.getFinalInteger("gradeId", request);
		String eduVolume = Transcode.unescape_new("eduVolume", request);
		Integer showStatus = CommonTools.getFinalInteger("showStatus", request);//0：显示，1：隐藏
		List<Education> eduList = em.listSpecInfoById(eduId);
		Map<String,String> map = new HashMap<String,String>();
		String msg = "error";
		if(eduList.size() > 0){
			Education edu = eduList.get(0);
			if(edu.getEdition().getId().equals(ediId) && edu.getGradeSubject().getId().equals(gradeId) && edu.getEduVolume().equals(eduVolume)){
				//没发生变化-不检查
				msg = "success";
			}else{
				if(em.listInfoByOpt(ediId, gradeId, eduVolume).size() > 0){
					msg = "existInfo";
				}else{
					msg = "success";
				}
			}
			if(msg.equals("success")){
				em.updateEduById(eduId, gradeId, ediId, 0, showStatus, eduVolume, "");
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 增加教材信息
	 * @author Administrator
	 * @date 2019-5-5 上午10:44:37
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward addEducationInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		EducationManager em = (EducationManager) AppFactory.instance(null).getApp(Constants.WEB_EDUCATION_INFO);
		Integer ediId = CommonTools.getFinalInteger("ediId", request);
		Integer gradeId = CommonTools.getFinalInteger("gradeId", request);
		String eduVolume = Transcode.unescape_new("eduVolume", request);
		Map<String,String> map = new HashMap<String,String>();
		String msg = "error";
		Integer eduOrder = 1;
		if(em.listInfoByOpt(ediId, gradeId, eduVolume).size() > 0){
			msg = "existInfo";
		}else{
			msg = "success";
			if(eduVolume.equals("下册")){
				eduOrder = 2;
			}
			em.addEdu(gradeId, ediId, eduOrder, eduVolume, "");
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 根据年级学科编号、出版社编号获取教材信息列表
	 * @author wm
	 * @date 2019-5-7 下午05:44:33
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getEduData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		EducationManager em = (EducationManager) AppFactory.instance(null).getApp(Constants.WEB_EDUCATION_INFO);
		Integer ediId = CommonTools.getFinalInteger("ediId", request);
		Integer gsId = CommonTools.getFinalInteger("gsId", request);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "noInfo";
		List<Education>  eList = em.listInfoByOpt(ediId, gsId);
		if(eList.size() > 0){
			msg = "success";
			List<Object> list_d = new ArrayList<Object>();
			for(Iterator<Education> it = eList.iterator() ; it.hasNext();){
				Education edu = it.next();
				Map<String,Object> map_d = new HashMap<String,Object>();
				map_d.put("eduId", edu.getId());
				map_d.put("eduColume", edu.getEduVolume());
				list_d.add(map_d);
			}
			map.put("eduList", list_d);
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	/**
	 * 获取全部角色信息列表
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getRoleData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		RoleInfoManager rManager =(RoleInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ROLE_INFO);
		List<RoleInfo> rlist = rManager.listAllRoleInfo();
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "noInfo";
		if (!rlist.isEmpty()){
			msg = "success";
			List<Object> list_d = new ArrayList<Object>();
			for(Iterator<RoleInfo> it = rlist.iterator() ; it.hasNext();){
				RoleInfo rinfo = it.next();
				Map<String,Object> map_d = new HashMap<String,Object>();
				map_d.put("id",rinfo.getId());
				map_d.put("roleName",rinfo.getRoleName());

				list_d.add(map_d);
			}
			map.put("rList", list_d);
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return  null;
	}
	/**
	 * 获取用户所在的年级
	 * @author wm
	 * @date 2019-5-24 上午11:35:50
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getSelfGradeNumber(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		UserClassInfoManager ucm = (UserClassInfoManager)AppFactory.instance(null).getApp(Constants.WEB_USER_CLASS_INFO);
		Integer userId = CommonTools.getLoginUserId(request);
		Integer roleId = CommonTools.getLoginRoleId(request);
		String roleName = CommonTools.getLoginRoleName(request);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "error";
		if(roleName.equals("学生")){
			msg = "success";
			Integer gradeNumber = 0;
			String gradeName = "";
			//获取该学生的班级,然后获取该班级所在年级
			List<UserClassInfo> ucList = ucm.listInfoByOpt_1(userId, roleId);
			ClassInfo c = null;
			if(ucList.size() > 0){
				UserClassInfo uc = ucList.get(0);
				c = uc.getClassInfo();
				gradeNumber = Convert.dateConvertGradeNumber(c.getBuildeClassDate());
				if(gradeNumber > 12){
					gradeNumber = 12;
				}
				gradeName = Convert.NunberConvertChinese(gradeNumber);
			}
			map.put("gradeNumber", gradeNumber);
			map.put("gradeName", gradeName);
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 判断学生到期日期与当前日期相差天数（免费学生不计算）
	 * @author wm
	 * @date 2019-8-23 上午08:50:17
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getUserDiffDays(ActionMapping mapping,ActionForm form,
			HttpServletRequest request,HttpServletResponse response) throws Exception{
		Integer userId = CommonTools.getLoginUserId(request);
		Integer diffDays = CommonTools.getDiffDays(userId);
		Map<String,Integer> map = new HashMap<String,Integer>();
		map.put("result", diffDays);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 根据班级编号获取班级学生列表
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getSpecClassStuData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		UserClassInfoManager ucm = (UserClassInfoManager)AppFactory.instance(null).getApp(Constants.WEB_USER_CLASS_INFO);
		Integer classId = CommonTools.getFinalInteger("classId", request);//指定班级编号
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "error";
		if(classId > 0){
			//获取指定班级下的学生列表
			List<UserClassInfo> ucList = ucm.listInfoByOpt(classId, Constants.STU_ROLE_ID);
			List<Object> list_d = new ArrayList<Object>();
			if(ucList.size() > 0){
				msg = "success";
				for(UserClassInfo uc : ucList){
					User user = uc.getUser();
					Map<String,Object> map_d = new HashMap<String,Object>();
					map_d.put("userId", user.getId());
					map_d.put("userName", user.getRealName());
					map_d.put("userPortrait", user.getPortrait());
					list_d.add(map_d);
				}
				map.put("userList", list_d);
			}else{
				msg = "noInfo";
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 获取我的被临时接管的班级列表
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	@SuppressWarnings("unchecked")
	public ActionForward getMyLsClassData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		UserClassInfoManager ucm = (UserClassInfoManager) AppFactory.instance(null).getApp(Constants.WEB_USER_CLASS_INFO);
		Integer currUserId = CommonTools.getLoginUserId(request);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "noInfo";
		List<Object> list_d = new ArrayList<Object>();
		if(currUserId > 0){
			//获取我的所有永久班级
			List<UserClassInfo> ucList = ucm.listInfoByOpt_1(currUserId, Constants.TEA_ROLE_ID);
			if(ucList.size() > 0){
				for(UserClassInfo uc : ucList){
					if(uc.getAppUserId() > 0 && uc.getStatus().equals(1)){//表示该班有临时老师
						Map<String,Object> map_d = new HashMap<String,Object>();
						ClassInfo c = uc.getClassInfo();
						Integer gradeNumber = Convert.dateConvertGradeNumber(c.getBuildeClassDate());
						if(gradeNumber > 12){
							gradeNumber = 12;
						}
						String gradeName = Convert.NunberConvertChinese(gradeNumber);
						map_d.put("cId", c.getId());
						map_d.put("cName", gradeName+c.getClassName());
						map_d.put("lsTeaName", uc.getAppUserInfo());
						list_d.add(map_d);
					}
				}
				SortCName sort = new SortCName();
				Collections.sort(list_d, sort);
				map.put("cList", list_d);
			}
		}
		if(list_d.size() > 0){
			msg = "success";
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	/**
	 * 通过导师邀请码获取导师信息
	 * @author zdf
	 * 2019-8-30 下午04:19:44
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getTeaInfoByCode(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		InviteCodeInfoManager icManager = (InviteCodeInfoManager) AppFactory.instance(null).getApp(Constants.WEB_INVITE_CODE_INFO);
		NetTeacherInfoManager ntManager  = (NetTeacherInfoManager) AppFactory.instance(null).getApp(Constants.WEB_NET_TEACHER_INFO);
		String inviteCode=CommonTools.getFinalStr("inviteCode",request);
		if(!inviteCode.equals("")){
			inviteCode = inviteCode.toUpperCase();
		}
		List<InviteCodeInfo> icList = icManager.listIcInfoByOpt(inviteCode,"导师邀请码");//导师邀请码
		Map<String,Object> map = new HashMap<String,Object>();
		if(icList.isEmpty()){
			map.put("msg","noInfo");
		}else{
			Integer teaId=icList.get(0).getInviteId();	
		    List<NetTeacherInfo> ntlist=ntManager.listntInfoByuserId(teaId);
		    if(ntlist.size() > 0){
		    	if(ntlist.get(0).getCheckStatus().equals(2)){//审核通过
		    		map.put("msg","success");
		    		map.put("realName", ntlist.get(0).getUser().getRealName());//导师姓名
		    		map.put("portrait", ntlist.get(0).getUser().getPortrait());
		 		    Integer schType = ntlist.get(0).getSchoolType();
		 		    if(schType.equals(1)){
		 		    	 map.put("schoolType","小学");
		 		    }else if (schType.equals(2)){
		 		    	 map.put("schoolType", "初中");
		 		    }else if(schType.equals(3)){
		 		    	 map.put("schoolType", "高中");
		 		    }
		 		    map.put("subName", ntlist.get(0).getSubject().getSubName());
		    	}else{
		    		map.put("msg", "noInfo");
		    	}
		    }
		}
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 获取网络导师有绑定关系的学生信息
	 * @author zdf
	 * 2019-9-20 下午05:48:39
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward  getBindStu(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		 	NetTeacherStudentManager  ntsManager = (NetTeacherStudentManager) AppFactory.instance(null).getApp(Constants.WEB_NET_TEACHER_STUDENT);
			Integer userId = CommonTools.getLoginUserId(request);
			String msg = "error";
			Map<String,Object> map = new HashMap<String,Object>();
			if(userId > 0){
				List<NetTeacherStudent> ntsList = ntsManager.listBindStu(userId);
				List<Object> list_b = new ArrayList<Object>();//已过期,已取消
				List<Object> list_u = new ArrayList<Object>();//正在绑定学生列表
				Integer firstStuId = 0;
				String firstStuName = "";
				if(ntsList.size() > 0){
					msg = "success";
					for (Iterator<NetTeacherStudent> it = ntsList.iterator(); it.hasNext();) {
						NetTeacherStudent nts = (NetTeacherStudent) it.next();
						Map<String,Object> map_d = new HashMap<String,Object>();
						Integer bindStatus = nts.getBindStatus();
						Integer clearStatus = nts.getClearStatus();//0:不清除,1:清除
						if(bindStatus.equals(0)){//取消绑定
							map_d.put("stuId", nts.getUser().getId());
							map_d.put("stuName", nts.getUser().getRealName());
							map_d.put("portrait", nts.getUser().getPortrait());
							if(list_u.size() == 0 && list_b.size() == 0){
								firstStuId = nts.getUser().getId();
								firstStuName = nts.getUser().getRealName();
							}
							list_b.add(map_d);	
						}else{
							map_d.put("stuId", nts.getUser().getId());
							map_d.put("stuName", nts.getUser().getRealName());
							map_d.put("portrait", nts.getUser().getPortrait());
							if(clearStatus.equals(1)){//升学清除
								if(list_u.size() == 0 && list_b.size() == 0){
									firstStuId = nts.getUser().getId();
									firstStuName = nts.getUser().getRealName();
								}
								list_b.add(map_d);
							}else {//未升学判断是到期
								if(CurrentTime.compareDate(CurrentTime.getStringDate(),nts.getEndDate()) > 0){//正在绑定
									if(list_u.size() == 0){
										firstStuId = nts.getUser().getId();
										firstStuName = nts.getUser().getRealName();
									}
									list_u.add(map_d);
								}else{//已到期
									if(list_u.size() == 0 && list_b.size() == 0){
										firstStuId = nts.getUser().getId();
										firstStuName = nts.getUser().getRealName();
									}
									list_b.add(map_d);	
								}
							}
						}
					}
					map.put("bindStu", list_u);
					map.put("unbindStu", list_b);
					map.put("stuId", firstStuId);
					map.put("stuName", firstStuName);
				}else{
					msg = "noInfo";
				}
			}
			map.put("result", msg);
			CommonTools.getJsonPkg(map, response);
			return null;
	}	
	
	/**
	 * 发送邮件
	 * @author zdf
	 * 2019-9-26 上午11:34:43
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward  sendMsg(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		EmailManager eManager = (EmailManager) AppFactory.instance(null).getApp(Constants.WEB_EMAIL_INFO);
		Integer userId = CommonTools.getLoginUserId(request);
		String emailType = CommonTools.getFinalStr("emailType",request);;
		String content= Transcode.unescape_new1("contect", request);
		String title = Transcode.unescape_new1("title", request);
		Integer toUserId=CommonTools.getFinalInteger("toUserId", request);
		Integer emailId = eManager.addEmail(userId, title, content, emailType, toUserId);
		Map<String, String> map = new HashMap<String, String>();
		String msg = "fail";
		if(emailId>0){
			msg ="success";
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 导向登录后首页--超级管理员和知识点管理员用
	 * @author  Administrator
	 * @ModifiedBy  
	 * @date  2019-10-9 下午08:50:54
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward  goWeclomePage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		
		return mapping.findForward("welcomePage");
	}
	
	/**
	 * 获取首页数据信息（我的作业，在线学习，我的导师，消息条数）
	 * @author wm
	 * @date 2019-10-18 上午08:47:55
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getIndexData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		HwStudyTjManager tjm = (HwStudyTjManager) AppFactory.instance(null).getApp(Constants.WEB_HW_STUDY_TJ_INFO);
		StudyLogManager slm = (StudyLogManager)AppFactory.instance(null).getApp(Constants.WEB_STUDY_LOG_INFO);
		NetTeacherStudentManager ntsm = (NetTeacherStudentManager) AppFactory.instance(null).getApp(Constants.WEB_NET_TEACHER_STUDENT);
		EmailManager em = (EmailManager) AppFactory.instance(null).getApp(Constants.WEB_EMAIL_INFO);
		BuffetSendInfoManager bsm = (BuffetSendInfoManager)AppFactory.instance(null).getApp(Constants.WEB_BUFFET_SEND_INFO);
		Integer limitNumber_study = CommonTools.getFinalInteger("limitNumber_study", request);//在线学习限制条数
		Integer limitNumber_nt = CommonTools.getFinalInteger("limitNumber_nt", request);//我的导师限制条数
		Integer roleId = CommonTools.getLoginRoleId(request);
		Integer userId = CommonTools.getLoginUserId(request);
		Map<String,Object> map = new HashMap<String,Object>();
		String currDate = CurrentTime.getStringDate();
		String msg = "error";
		if(userId > 0){
			msg = "success";
			if(roleId.equals(Constants.STU_ROLE_ID)){
				limitNumber_study = limitNumber_study > 0 ? limitNumber_study : 3;
				List<StudyLogInfo> slList = slm.listLimitUnComInfoByStuId(userId, limitNumber_study);
				List<Object> list_study = new ArrayList<Object>();
				for(StudyLogInfo sl : slList){
					Map<String,Object> map_d = new HashMap<String,Object>();
					map_d.put("studyLogId", sl.getId());
					map_d.put("subName", sl.getSubject().getSubName());
					map_d.put("loreName", sl.getLoreInfo().getLoreName());
					map_d.put("studyDate", sl.getAddTime().substring(0,10));
					list_study.add(map_d);
				}
				map.put("studyList", list_study);
				List<Object> list_nt = new ArrayList<Object>();
				List<NetTeacherStudent> ntsList = ntsm.listValidInfoByOpt(userId);
				Integer count = 0;
				for(NetTeacherStudent nts : ntsList){
					if(count <= limitNumber_nt){
						Map<String,Object> map_d = new HashMap<String,Object>();
						map_d.put("ntsId", nts.getId());
						NetTeacherInfo nt = nts.getNetTeacherInfo();
						map_d.put("portrait", nt.getUser().getPortrait());
						map_d.put("realName", nt.getUser().getRealName());
						Integer schoolType = nt.getSchoolType();
						String schoolTypeChi = "";
						if(schoolType.equals(-1)){
							schoolTypeChi = "小学";
						}else if(schoolType.equals(1)){
							schoolTypeChi = "初中";
						}else if(schoolType.equals(2)){
							schoolTypeChi = "高中";
						}
						map_d.put("schoolType", schoolTypeChi);
						map_d.put("subName", nt.getSubject().getSubName());
						Integer bindStatus = nts.getBindStatus();
						String bindStatusChi = "";
						if(bindStatus.equals(-1)){
							bindStatusChi = "免费试用";
						}else if(bindStatus.equals(1)){
							bindStatusChi = "付费绑定";
						}else if(bindStatus.equals(2)){
							bindStatusChi = "免费绑定";
						}
						map_d.put("bindInfo", bindStatusChi);
						map_d.put("bindStatus", bindStatus);
						map_d.put("diffDays", CurrentTime.compareDate(nts.getBindDate(), CurrentTime.getStringDate()));
						list_nt.add(map_d);
					}else{
						break;
					}
					count++;
				}
				map.put("ntList", list_nt);
				map.put("hwCount", tjm.getCountByOpt_1(0, 0, userId, 0, currDate, currDate));
				map.put("buffetCount", bsm.listBsInfoByOption(userId, 0, 1, currDate, currDate).size());
			}
		}
		map.put("msg", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 封装添加单元格数据内容方法
	 * @description
	 * @author Administrator
	 * @date 2018-11-28 上午09:40:37
	 * @param column0
	 * @param column1
	 * @param column2
	 * @param column3
	 * @param column4
	 * @param column5
	 * @param row
	 * @param style
	 */
	private static void addCellData(String column0,String column1,String column2,String column3,String column4,HSSFRow row,HSSFCellStyle style){
		HSSFCell cell = row.createCell(0); 
		cell = row.createCell(0); 
        cell.setCellStyle(style);  
        cell.setCellValue(column0); 
        cell = row.createCell(1);  
        cell.setCellStyle(style);  
        cell.setCellValue(column1);  
        cell = row.createCell(2);  
        cell.setCellStyle(style);  
        cell.setCellValue(column2);  
        cell = row.createCell(3);  
        cell.setCellStyle(style);  
        cell.setCellValue(column3);  
        cell = row.createCell(4);  
        cell.setCellStyle(style);  
        cell.setCellValue(column4);  
	}
	
	/**
	 * 批量导入免费学生
	 * @author wm
	 * @date 2019-12-18 上午08:05:50
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward addBatchFreeStu(ActionMapping mapping,ActionForm form,
			HttpServletRequest request,HttpServletResponse response) throws Exception{
		String filePath = CommonTools.getFinalStr("filePath", request);
		String currDate = CurrentTime.getStringDate();
		SchoolManager sm = (SchoolManager) AppFactory.instance(null).getApp(Constants.WEB_SCHOOL_INFO);
		RoleInfoManager rm =(RoleInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ROLE_INFO);
		UserManager um =(UserManager) AppFactory.instance(null).getApp(Constants.WEB_USER_INFO);
		ClassInfoManager cm = (ClassInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CLASS_INFO);
		UserClassInfoManager ucm = (UserClassInfoManager) AppFactory.instance(null).getApp(Constants.WEB_USER_CLASS_INFO);
		RoleUserInfoManager rum = (RoleUserInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ROLE_USER_INFO);
		StudentParentInfoManager spm = (StudentParentInfoManager) AppFactory.instance(null).getApp(Constants.WEB_STUDENT_PARENT_INFO);
		ParentClubManager pcm = (ParentClubManager) AppFactory.instance(null).getApp(Constants.WEB_PARENT_CLUB);
		GradeSubjectManager gsm = (GradeSubjectManager) AppFactory.instance(null).getApp(Constants.WEB_GRADE_SUBJECT_INFO);
		String msg = "";
		String schoolName_1 = "";
		String password = "e10adc3949ba59abbe56e057f20f883e";
		if(filePath.endsWith(".xls")){
			String classInfo = filePath.substring(filePath.lastIndexOf("\\")+1,filePath.lastIndexOf("."));
			int i;  
	        Sheet sheet;  
	        Workbook book;  
	        Cell cell1;
	        HSSFWorkbook wb;
	        Integer roleId_stu = 0;
	        Integer roleId_par = 0;
	        WorkbookSettings wbs = new WorkbookSettings();
	        wbs.setEncoding("GBK"); // 解决中文乱码
	        wbs.setSuppressWarnings(true); 
	        try {
				book= Workbook.getWorkbook(new File(filePath),wbs);
				//获得第一个工作表对象(ecxel中sheet的编号从0开始,0,1,2,3,....)  
				sheet=book.getSheet(0);   
	            i = 1;
	            Integer maxRow = sheet.getRows();
	            Integer schoolId = 0;
	            String prov = "";
	            String city = "";
	            String county = "";
	            String town = "";
	            Integer schoolType = 0;
	            Integer yearSystem = 1;//1:6+3+3,2:5+4+3
	            
	         // 第一步，创建一个webbook，对应一个Excel文件  
		        wb = new HSSFWorkbook();  
		        // 第二步，在webbook中添加一个sheet,对应Excel文件中的sheet  
		        HSSFSheet sheet1 = wb.createSheet("学生账号清单");  
		        //设置横向打印
		        sheet1.getPrintSetup().setLandscape(true);
		        // 第三步，在sheet中添加表头第0行,注意老版本poi对Excel的行数列数有限制short  
		        HSSFRow row = sheet1.createRow(0);  
		        // 第四步，创建单元格，并设置值表头 设置表头居中  
		        HSSFCellStyle style = wb.createCellStyle();  
		        style.setAlignment(HSSFCellStyle.ALIGN_CENTER); // 创建一个居中格式  
	            style.setVerticalAlignment(HSSFCellStyle.VERTICAL_CENTER);  
	            
	            HSSFFont font = wb.createFont();    
	            font.setColor(HSSFColor.RED.index); //注册失败的用红色
	            
	            HSSFCellStyle style_error = wb.createCellStyle(); //注册失败的样式
	            style_error.setAlignment(HSSFCellStyle.ALIGN_CENTER); // 创建一个居中格式  
	            style_error.setVerticalAlignment(HSSFCellStyle.VERTICAL_CENTER);  
	            style_error.setFont(font);
	            
	            
	            row = sheet1.createRow(0);
	            CommonAction.addCellData("学生姓名", "注册账号", "所在年级班级", "注册是否成功", "注册详情",row, style);  
	            
	            while(i < maxRow){
	            	//获取每一行的单元格   
	                cell1=sheet.getCell(0,i);//（列，行）  
	                if("".equals(cell1.getContents())==true)    //如果读取的数据为空  
	                    break;   
	                String stuName = sheet.getCell(0,i).getContents().replace(" ", "").replace("\t", "");//学生姓名
	                String phoneNo = sheet.getCell(1,i).getContents().replace(" ", "").replace("\t", "");//学生手机号
	                String schoolName = sheet.getCell(2,i).getContents().replace(" ", "").replace("\t", "");//学校名称
	                String gradeName = sheet.getCell(3,i).getContents().replace(" ", "").replace("\t", "");//年级数字（1-12）
	                String className = sheet.getCell(4,i).getContents().replace(" ", "").replace("\t", "");//班级数字（1班-20班）
	                schoolName_1 = schoolName;
	                row = sheet1.createRow(i);
	                String logInfo = "";
	              //首先获取学校必须审核通过
	                if(schoolId.equals(0)){//下列参数只循环一次
	                	List<School> schList = sm.listInfoBySName(schoolName);
	                	if(schList.size() > 0){
	                		School sch = schList.get(0);
	                		schoolId = sch.getId();
	                		prov = sch.getProv();
	                		city = sch.getCity();
	                		county = sch.getCounty();
	                		town = sch.getTown();
	                		schoolType = sch.getSchoolType();
	                		yearSystem = sch.getYearSystem();
	                		List<RoleInfo>  roleList = rm.listRoleInfo("学生");
	                		roleId_stu = roleList.get(0).getId();
	                		List<RoleInfo>  roleList_p = rm.listRoleInfo("家长");
	                		roleId_par = roleList_p.get(0).getId();
	                	}else{
	                		logInfo = i + "   "+stuName + " 注册失败。原因是查无该校信息或者该校信息尚未审核通过";
	                		CommonAction.addCellData(stuName, "",gradeName+"年级"+className, "注册失败", "查无该校信息或者该校信息尚未审核通过", row, style_error);
	                	}
	                }
	                if(schoolId > 0){
                		//先查询数据库是否存在指定的电话号码信息（未使用）--以前添加了学生没有使用该手机号码注册，后来换号后其他学生用了这手机号且免费
    	                if(!phoneNo.equals("")){//手机号码为空的不添加
    	                	String userName = phoneNo + schoolId;
		                	//检查是否存在该学生
		    				List<User> userList = um.listInfoByAccount(userName);
		    				if(userList.size() == 0){
		    					Integer currentYear = Integer.parseInt(CurrentTime.getYear());
								Integer currentMonth = Integer.parseInt(CurrentTime.getMonth());
								String buildeClassDate = "";
								Integer gradeNo = Integer.parseInt(gradeName);
								if(currentMonth >= 9){
									buildeClassDate = (currentYear - gradeNo + 1) + "-09-01";
								}else{
									buildeClassDate = currentYear - gradeNo + "-09-01";
								}
								Integer classId = 0;
								List<ClassInfo> cList = cm.listClassInfoByOption(schoolId, className, buildeClassDate);
								if(cList.size() > 0){
									classId = cList.get(0).getId();
								}else{
									classId = cm.addClassInfo(schoolId, className, buildeClassDate);//创建班级
									//创建班级管理员账号
									Integer cMid=um.addUser("c"+classId, "", password, "",currDate, "", currDate, schoolId, "", yearSystem, prov, city);
									List<RoleInfo> mRList = rm.listRoleInfo("管理员");
									if(mRList.size()>0){
									    rum.addRoleUserInfo(cMid, mRList.get(0).getId(), prov, city, county, town, schoolType, schoolId, gradeNo, classId);
									}
									String gName = Convert.NunberConvertChinese(gradeNo);//年级名
									List<GradeSubject> gslist = gsm.listSpecInfoByGname(gName);//根据年级名获取学科列表
									for (Iterator<GradeSubject> itr = gslist.iterator(); itr.hasNext();) {
										GradeSubject gs = (GradeSubject) itr.next();
										Integer sId = gs.getSubject().getId();//学科编号
										String subName = gs.getSubject().getSubName(); //学科名称
										//生成班内老师账户
										Integer teaId=um.addUser("t"+schoolId+sId+classId, "", password, "","", "", currDate, schoolId, currDate, yearSystem, prov, city);
										//老师绑定角色
										List<RoleInfo> rlist = rm.listRoleInfo("老师");
										if(rlist.size() > 0){
											Integer teaRoId = rlist.get(0).getId();
											rum.addRoleUserInfo(teaId, teaRoId, prov, city, county, town, schoolType, schoolId, gradeNo, classId);
											ucm.addUcInfo(teaId, classId, teaRoId,sId,subName); //绑定班级
										}
									}
								}
								if(yearSystem.equals(1)){//6+3+3
									yearSystem = 0;
								}else{//5+4+3
									if(gradeNo >= 1 && gradeNo <= 5){
										yearSystem = 5;
									}else if(gradeNo >= 6 && gradeNo <= 9){
										yearSystem = 4;
									}else if(gradeNo >= 10 && gradeNo <= 12){
										yearSystem = 3;
									}
								}
								Integer userId = um.addUser(userName, stuName, password, phoneNo, "", "", 
										currDate, schoolId, CurrentTime.getFinalDate_2(currDate, 1), yearSystem, "", "");
								if(userId > 0){
		    						//step2:增加用户角色
									rum.addRoleUserInfo(userId, roleId_stu, prov, city, county, town, schoolType, schoolId, gradeNo, classId);
									//step3:绑定班级
									ucm.addUcInfo(userId, classId, roleId_stu);
									//5 生成家长账户
									Integer upId = um.addUser(userName+"_jz", "", password, phoneNo, "", "", currDate, schoolId, 
											"", yearSystem, "", "");
									rum.addRoleUserInfo(upId, roleId_par, prov, city, county, town, schoolType, schoolId, gradeNo, classId);
									spm.addSpInfo(upId, userId);
									pcm.addParentClub(upId, userName+"_jz"+"的家长群", InviteCode.getRandomAllStr(6), 100, "");
									logInfo = i + "   "+stuName + " 注册成功["+gradeName+"年级"+className+"]";
									CommonAction.addCellData(stuName, userName,gradeName+"年级"+className,"注册成功", "注册成功", row, style);
								}
		    				}else{
		    					logInfo = i + "   "+stuName + " 注册失败。原因是该学生的账号["+userName+"]已被"+userList.get(0).getRealName()+"注册。";
		    					CommonAction.addCellData(stuName,"",gradeName+"年级"+className, "注册失败","该学生的账号["+userName+"]已被"+userList.get(0).getRealName()+"注册",row, style_error);
		    				}
    	                }else{
    	                	logInfo = i + "   "+stuName + " 注册失败。原因是手机号码为空";
    	                	CommonAction.addCellData(stuName, "",gradeName+"年级"+className, "注册失败", "原因是手机号码为空", row, style_error);
    	                }
	                }
	                msg += logInfo + "----" +CurrentTime.getCurrentTime() + "<br>";
	                i++;
	            }
	            // 第六步，将文件存到指定位置
		    	String absoFilePath = "";//绝对地址
		    	String fileName = schoolName_1+classInfo+"_"+CommonTools.getRadom()+".xls";
	        	String folder = "d:\\免费学生名单\\";
	        	absoFilePath = folder +fileName;
	        	File file = new File(folder);
				if(!file.exists()){
					file.mkdirs();
				}
	            FileOutputStream fout = new FileOutputStream(absoFilePath);  
	            wb.write(fout);  
	            fout.close();  
	        }catch (BiffException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} 
		}else{
			msg = "suffix is fail";
		}
		CommonTools.getJsonPkg(msg, response);
		return null;
	}
}
