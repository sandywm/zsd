/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.zsd.action.homework;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.zsd.action.base.Transcode;
import com.zsd.factory.AppFactory;
import com.zsd.module.BuffetAbilityTypeInfo;
import com.zsd.module.BuffetMindTypeInfo;
import com.zsd.module.BuffetTypeInfo;
import com.zsd.module.Chapter;
import com.zsd.module.ClassInfo;
import com.zsd.module.Edition;
import com.zsd.module.Education;
import com.zsd.module.HwAbilityRelationInfo;
import com.zsd.module.HwMindRelationInfo;
import com.zsd.module.HwQueInfo;
import com.zsd.module.HwStudyDetailInfo;
import com.zsd.module.HwStudyTjInfo;
import com.zsd.module.HwTraceStudyDetailInfo;
import com.zsd.module.HwTraceStudyLogInfo;
import com.zsd.module.LoreInfo;
import com.zsd.module.LoreQuestion;
import com.zsd.module.LoreQuestionSubInfo;
import com.zsd.module.SendHwInfo;
import com.zsd.module.StudyMapInfo;
import com.zsd.module.TeaQueInfo;
import com.zsd.module.User;
import com.zsd.module.UserClassInfo;
import com.zsd.module.json.LoreTreeMenuJson;
import com.zsd.page.PageConst;
import com.zsd.service.BuffetAllManager;
import com.zsd.service.ChapterManager;
import com.zsd.service.ClassInfoManager;
import com.zsd.service.EditionManager;
import com.zsd.service.EducationManager;
import com.zsd.service.HwAbilityRelationManager;
import com.zsd.service.HwMindRelationManager;
import com.zsd.service.HwQueManager;
import com.zsd.service.HwStudyDetailManager;
import com.zsd.service.HwStudyTjManager;
import com.zsd.service.HwTraceStudyDetailManager;
import com.zsd.service.HwTraceStudyLogManager;
import com.zsd.service.LoreInfoManager;
import com.zsd.service.LoreQuestionManager;
import com.zsd.service.SendHwManager;
import com.zsd.service.StudyMapManager;
import com.zsd.service.TeaQueManager;
import com.zsd.service.UserClassInfoManager;
import com.zsd.service.UserManager;
import com.zsd.tools.CommonTools;
import com.zsd.tools.Convert;
import com.zsd.tools.CurrentTime;
import com.zsd.util.Constants;

/** 
 * MyEclipse Struts
 * Creation date: 07-23-2019
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class HomeWorkAction extends DispatchAction {
	
	/**
	 * 班级列表按照降序排列（九年级1班）
	 * @author Administrator
	 * @createDate 2019-8-3
	 */
	@SuppressWarnings({ "unchecked", "rawtypes" })
	private class SortCName implements Comparator {
		@Override
	    public int compare(Object obj0, Object obj1) {
	      Map<String, String> map0 = (Map) obj0;
	      Map<String, String> map1 = (Map) obj1;
	      int flag = map0.get("cName").toString().compareTo(map1.get("cName").toString());
	      return flag; // 不取反，则按正序排列
	    }
	 }
	
	/**
	 * 按照班级号升序排列
	 * @author Administrator
	 * @createDate 2019-8-4
	 */
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public static class SortGName implements Comparator {
		@Override
	    public int compare(Object obj0, Object obj1) {
	      Map<String, String> map0 = (Map) obj0;
	      Map<String, String> map1 = (Map) obj1;
	      int flag = map0.get("gradeNo").toString().compareTo(map1.get("gradeNo").toString());
	      return flag; // 不取反，则按正序排列
	    }
	 }
	
	/**
	 * 导向系统家庭作业题库页面
	 * @author wm
	 * @date 2019-7-23 下午05:20:26
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward goHwPage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		return mapping.findForward("hwPage");
	}
	
	/**
	 * 分页获取系统家庭作业题库
	 * @author wm
	 * @date 2019-7-23 下午05:21:35
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception 
	 */
	public ActionForward getHwPageData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		HwQueManager hqm = (HwQueManager) AppFactory.instance(null).getApp(Constants.WEB_HW_QUE_INFO);
		HwMindRelationManager hmrm = (HwMindRelationManager) AppFactory.instance(null).getApp(Constants.WEB_HW_MIND_RELATION_INFO);
		HwAbilityRelationManager harm = (HwAbilityRelationManager) AppFactory.instance(null).getApp(Constants.WEB_HW_ABILITY_RELATION_INFO);
		Integer loreId = CommonTools.getFinalInteger("loreId", request);
		Integer count = hqm.getCountByLoreId(loreId);
		String msg = "暂无记录";
		Map<String,Object> map = new HashMap<String,Object>();
		if(count > 0){
			Integer pageSize = PageConst.getPageSize(String.valueOf(request.getParameter("limit")), 10);//等同于pageSize
			Integer pageNo = CommonTools.getFinalInteger("page", request);//等同于pageNo
			List<HwQueInfo> hqList = hqm.listPageInfoByLoreId(loreId, pageNo, pageSize);
			msg = "success";
			List<Object> list_d = new ArrayList<Object>();
			if(hqList.size() > 0){
				for(HwQueInfo hq : hqList){
					Map<String,Object> map_d = new HashMap<String,Object>();
					Integer hwId = hq.getId();
					map_d.put("id", hwId);
					map_d.put("btName", hq.getBuffetTypeInfo().getTypes());
					map_d.put("loreName", hq.getLoreInfo().getLoreName());
					map_d.put("hwTitle", hq.getTitle());
					String mindStr = "";
					String abilityStr = "";
					List<HwMindRelationInfo> hmrList = hmrm.listInfoByOpt(0, hwId);
					for(HwMindRelationInfo hmr : hmrList){
						mindStr += hmr.getBuffetMindTypeInfo().getMind() + "、";
					}
					if(!mindStr.equals("")){
						mindStr = mindStr.substring(0, mindStr.length() - 1);
					}
					List<HwAbilityRelationInfo>  harList = harm.listInfoByOpt(0, hwId);
					for(HwAbilityRelationInfo har : harList){
						abilityStr += har.getBuffetAbilityTypeInfo().getAbility() + "、";
					}
					if(!abilityStr.equals("")){
						abilityStr = abilityStr.substring(0, abilityStr.length() - 1);
					}
					map_d.put("mindStr", mindStr);
					map_d.put("abilityStr", abilityStr);
					map_d.put("inUse", hq.getInUse().equals(0) ? "有效" : "无效");
					list_d.add(map_d);
				}
				map.put("data", list_d);
				map.put("count", count);
				map.put("code", 0);
			}
		}
		map.put("msg", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 设置家庭作业题库有/无效状态
	 * @author wm
	 * @date 2019-7-24 上午10:25:20
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward setInUseStatus(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		HwQueManager hqm = (HwQueManager) AppFactory.instance(null).getApp(Constants.WEB_HW_QUE_INFO);
		Integer hwId = CommonTools.getFinalInteger("hwId", request);
		Integer inUse = CommonTools.getFinalInteger("inUse", request);//有效状态（0：有效，1：无效）
		Map<String,String> map = new HashMap<String,String>();
		String msg = "error";
		boolean flag = hqm.updateInUseById(hwId, inUse, CommonTools.getLoginAccount(request));
		if(flag){
			msg = "success";
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	
	/**
	 * 浏览指定知识下系统家庭作业
	 * @author wm
	 * @date 2019-7-24 上午10:58:22
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getHwDetailData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		HwQueManager hqm = (HwQueManager) AppFactory.instance(null).getApp(Constants.WEB_HW_QUE_INFO);
		HwMindRelationManager hmrm = (HwMindRelationManager) AppFactory.instance(null).getApp(Constants.WEB_HW_MIND_RELATION_INFO);
		HwAbilityRelationManager harm = (HwAbilityRelationManager) AppFactory.instance(null).getApp(Constants.WEB_HW_ABILITY_RELATION_INFO);
		Integer loreId = CommonTools.getFinalInteger("loreId", request);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "noInfo";
		List<Object> list_d_xqjf = new ArrayList<Object>();
		List<Object> list_d_ffgn = new ArrayList<Object>();
		List<Object> list_d_swxl = new ArrayList<Object>();
		List<Object> list_d_zlkf = new ArrayList<Object>();
		List<Object> list_d_nlpy = new ArrayList<Object>();
		List<Object> list_d_zksl = new ArrayList<Object>();
		List<HwQueInfo> hqList = hqm.listInfoByOpt(loreId, 0, -1, false);
		if(hqList.size() > 0){
			for(HwQueInfo hq : hqList){
				Map<String,Object> map_d = new HashMap<String,Object>();
				Integer hwId = hq.getId();
				List<HwMindRelationInfo> hmrList = hmrm.listInfoByOpt(0, hwId);
				List<HwAbilityRelationInfo>  harList = harm.listInfoByOpt(0, hwId);
				String swType = "";//思维
				String nlType = "";//能力
				for(HwMindRelationInfo hmr : hmrList){
					swType += hmr.getBuffetMindTypeInfo().getMind() + "、";
				}
				for(HwAbilityRelationInfo har : harList){
					nlType += har.getBuffetAbilityTypeInfo().getAbility() + "、";
				}
				if(!swType.equals("")){
					swType = swType.substring(0, swType.length() - 1);
				}
				if(!nlType.equals("")){
					nlType = nlType.substring(0, nlType.length() - 1);
				}
				String hqType = hq.getBuffetTypeInfo().getTypes();
				map_d.put("hqTitle", hq.getTitle());
				map_d.put("hqType", hq.getQueType());
				map_d.put("swType", swType);
				map_d.put("nlType", nlType);
				map_d.put("subject", hq.getSubject());
				map_d.put("hqAnswer", hq.getAnswer());
				map_d.put("hqResolution", hq.getResolution());//解析
				if(hqType.equals("兴趣激发")){
					list_d_xqjf.add(map_d);
				}else if(hqType.equals("方法归纳")){
					list_d_ffgn.add(map_d);
				}else if(hqType.equals("思维训练")){
					list_d_swxl.add(map_d);
				}else if(hqType.equals("智力开发")){
					list_d_zlkf.add(map_d);
				}else if(hqType.equals("能力培养")){
					list_d_nlpy.add(map_d);
				}else if(hqType.equals("中/高考涉猎")){
					list_d_zksl.add(map_d);
				}
			}
			map.put("xqjf", list_d_xqjf);
			map.put("ffgn", list_d_ffgn);
			map.put("swxl", list_d_swxl);
			map.put("zlkf", list_d_zlkf);
			map.put("nlpy", list_d_nlpy);
			map.put("zksl", list_d_zksl);
			msg = "success";
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 获取当前题型的题数
	 * @author wm
	 * @date 2019-7-24 下午04:26:56
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getCurrMaxNum(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		HwQueManager hqm = (HwQueManager) AppFactory.instance(null).getApp(Constants.WEB_HW_QUE_INFO);
		Integer btId = CommonTools.getFinalInteger("btId", request);//基础类型编号
		Integer loreId = CommonTools.getFinalInteger("loreId", request);//知识点编号
		Map<String,Integer> map = new HashMap<String,Integer>();
		List<HwQueInfo> bqList = hqm.listInfoByOpt(loreId, btId, -1, true);
		Integer num = 1;
		if(bqList.size() > 0){
			num = bqList.get(0).getNum() + 1;
		}
		map.put("currNum", num);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	
	/**
	 * 增加系统家庭作业
	 * @author wm
	 * @date 2019-7-24 下午04:28:29
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward addHw(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		HwQueManager hqm = (HwQueManager) AppFactory.instance(null).getApp(Constants.WEB_HW_QUE_INFO);
		HwMindRelationManager hmrm = (HwMindRelationManager) AppFactory.instance(null).getApp(Constants.WEB_HW_MIND_RELATION_INFO);
		HwAbilityRelationManager harm = (HwAbilityRelationManager) AppFactory.instance(null).getApp(Constants.WEB_HW_ABILITY_RELATION_INFO);
		BuffetAllManager bam = (BuffetAllManager) AppFactory.instance(null).getApp(Constants.WEB_BUFFET_ALL_INFO);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "error";
		Integer btId = CommonTools.getFinalInteger("btId", request);//基础类型编号
		Integer loreId = CommonTools.getFinalInteger("loreId", request);//通用版下的知识点编号
		String mindIdStr = CommonTools.getFinalStr("mindIdStr", request);//思维类型编号逗号拼接
		String abilityIdStr = CommonTools.getFinalStr("abilityIdStr", request);//能力类型编号逗号拼接
		String title = "";//标题
		List<HwQueInfo> bqList = hqm.listInfoByOpt(loreId, btId, -1, true);
		Integer orders = 0;//排序
		Integer num = 1;
		String btName = bam.getEntityByBtId(btId).getTypes();
		if(bqList.size() > 0){
			num = bqList.get(0).getNum() + 1;
			orders = bqList.get(0).getOrders() + 1;
		}else{
			if(btName.equals("兴趣激发")){
				orders = 1;
			}else if(btName.equals("方法归纳")){
				orders = 101;
			}else if(btName.equals("思维训练")){
				orders = 201;
			}else if(btName.equals("智力开发")){
				orders = 301;
			}else if(btName.equals("能力培养")){
				orders = 401;
			}else if(btName.equals("中/高考涉猎")){
				orders = 501;
			}
		}
		title = btName + "第" + num + "题";
		String queSub =  Transcode.unescape_new1("queSub", request);//题干
		String queAnswer = Transcode.unescape_new1("queAnswer", request);//答案
		String queResolution = Transcode.unescape_new1("queResolution", request);//解析
		String queType = Transcode.unescape_new1("queType", request);//题干类型
		if(!mindIdStr.equals("") && !abilityIdStr.equals("")){
			Integer hwId = hqm.addHW(btId, loreId, num, title, queSub, queAnswer, queResolution, queType, orders, CommonTools.getLoginAccount(request));
			if(hwId > 0){
				hmrm.addHMR(mindIdStr, hwId);
				harm.addHAR(abilityIdStr, hwId);
				msg = "success";
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 获取指定系统家庭作业详情
	 * @author wm
	 * @date 2019-7-24 下午05:10:23
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getHwDetail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		HwQueManager hqm = (HwQueManager) AppFactory.instance(null).getApp(Constants.WEB_HW_QUE_INFO);
		HwMindRelationManager hmrm = (HwMindRelationManager) AppFactory.instance(null).getApp(Constants.WEB_HW_MIND_RELATION_INFO);
		HwAbilityRelationManager harm = (HwAbilityRelationManager) AppFactory.instance(null).getApp(Constants.WEB_HW_ABILITY_RELATION_INFO);
		BuffetAllManager bam = (BuffetAllManager) AppFactory.instance(null).getApp(Constants.WEB_BUFFET_ALL_INFO);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "error";
		Integer hwId = CommonTools.getFinalInteger("hwId", request);//指定系统家庭作业编号
		if(hwId > 0){
			HwQueInfo hw = hqm.getEntityById(hwId);
			if(hw != null){
				msg = "success";
				map.put("hwId", hw.getId());
				map.put("hwType", hw.getQueType());
				List<BuffetTypeInfo> btList = bam.listBTInfo();
				List<Object> list_bt = new ArrayList<Object>();
				List<Object> list_mind = new ArrayList<Object>();
				List<Object> list_ability = new ArrayList<Object>();
				for(BuffetTypeInfo bt : btList){
					Map<String,Object> map_d = new HashMap<String,Object>();
					map_d.put("btId", bt.getId());
					map_d.put("btName", bt.getTypes());
					if(hw.getBuffetTypeInfo().getId().equals(bt.getId())){
						map_d.put("selFlag", true);
					}else{
						map_d.put("selFlag", false);
					}
					list_bt.add(map_d);
				}
				map.put("btList", list_bt);
				List<BuffetMindTypeInfo> bmList = bam.listBMTInfo();
				List<HwMindRelationInfo> hmrList = hmrm.listInfoByOpt(0, hwId);
				for(BuffetMindTypeInfo bmt : bmList){
					Map<String,Object> map_d = new HashMap<String,Object>();
					map_d.put("bmId", bmt.getId());
					map_d.put("bmName", bmt.getMind());
					boolean selFlag = false;
					for(HwMindRelationInfo hmr : hmrList){
						if(hmr.getBuffetMindTypeInfo().getId().equals(bmt.getId())){
							selFlag = true;
							break;
						}
					}
					map_d.put("selFlag", selFlag);
					list_mind.add(map_d);
				}
				map.put("bmList", list_mind);
				List<BuffetAbilityTypeInfo> baList = bam.listBATInfo();
				List<HwAbilityRelationInfo>  harList = harm.listInfoByOpt(0, hwId);
				for(BuffetAbilityTypeInfo bat : baList){
					Map<String,Object> map_d = new HashMap<String,Object>();
					map_d.put("baId", bat.getId());
					map_d.put("baName", bat.getAbility());
					boolean selFlag = false;
					for(HwAbilityRelationInfo har : harList){
						if(har.getBuffetAbilityTypeInfo().getId().equals(bat.getId())){
							selFlag = true;
							break;
						}
					}
					map_d.put("selFlag", selFlag);
					list_ability.add(map_d);
				}
				map.put("baList", list_ability);
				map.put("hwTitle", hw.getTitle());
				map.put("queSub", hw.getSubject());
				map.put("queAnswer", hw.getAnswer());
				map.put("queOptNum", hw.getAnswer().split(",").length);
				map.put("queResolution", hw.getResolution());
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 修改指定的系统家庭作业
	 * @author wm
	 * @date 2019-7-25 上午11:06:24
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward updateHwDetail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		HwQueManager hqm = (HwQueManager) AppFactory.instance(null).getApp(Constants.WEB_HW_QUE_INFO);
		HwMindRelationManager hmrm = (HwMindRelationManager) AppFactory.instance(null).getApp(Constants.WEB_HW_MIND_RELATION_INFO);
		HwAbilityRelationManager harm = (HwAbilityRelationManager) AppFactory.instance(null).getApp(Constants.WEB_HW_ABILITY_RELATION_INFO);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "error";
		Integer hwId = CommonTools.getFinalInteger("hwId", request);//题库编号
		String queType = Transcode.unescape_new1("queType", request);//类型
		String mindIdStr = CommonTools.getFinalStr("mindIdStr", request);//思维类型编号逗号拼接
		String abilityIdStr = CommonTools.getFinalStr("abilityIdStr", request);//能力类型编号逗号拼接
		String queSub = Transcode.unescape_new1("queSub", request);//题干
		String queAnswer = Transcode.unescape_new1("queAnswer", request);//答案，多个用逗号隔开
		String queResolution = Transcode.unescape_new1("queResolution", request);//解析
		if(hwId > 0){
			HwQueInfo hw = hqm.getEntityById(hwId);
			if(hw != null){
				if(!mindIdStr.equals("") && !abilityIdStr.equals("")){
					boolean flag = hqm.updateInfoById(hwId, queSub, queAnswer, queResolution, queType, CommonTools.getLoginAccount(request));
					if(flag){
						hmrm.delHMR(hwId);
						harm.delHAR(hwId);
						hmrm.addHMR(mindIdStr, hwId);
						harm.addHAR(abilityIdStr, hwId);
						msg = "success";
					}
				}
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 导向老师题库页面
	 * @author wm
	 * @date 2019-7-26 上午09:23:05
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward goTeaQuePage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		return mapping.findForward("tqPage");
	}
	
	/**
	 * 分页获取指定知识点下（指定老师的题库列表）--如果是知识点管理员看的是所有老师上传的题库列表
	 * @author wm
	 * @date 2019-7-26 上午09:37:17
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getTeaQuePageData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		TeaQueManager tqm = (TeaQueManager) AppFactory.instance(null).getApp(Constants.WEB_TEA_QUE_INFO);
		Integer loreId = CommonTools.getFinalInteger("loreId", request);//出版社下的知识点编号
		LoreInfoManager lm = (LoreInfoManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_INFO);
		Integer currUserId = 0;
		String msg = "暂无记录";
		Map<String,Object> map = new HashMap<String,Object>();
		String roleName = CommonTools.getLoginRoleName(request);
		if(roleName.equals("老师") || roleName.equals("知识点管理员")){
			if(roleName.equals("老师")){
				currUserId = CommonTools.getLoginUserId(request);
			}
			LoreInfo lore = lm.getEntityById(loreId);
			Integer ediId = lore.getChapter().getEducation().getEdition().getId();
			if(ediId > 1){//老师增加题库时选择的是其他版本
				//需要把其他版本的知识点转成通用版知识点
				loreId = lore.getMainLoreId();
			}
			Integer count = tqm.getCountByOpt(loreId, currUserId,-1);
			if(count > 0){
				Integer pageSize = PageConst.getPageSize(String.valueOf(request.getParameter("limit")), 10);//等同于pageSize
				Integer pageNo = CommonTools.getFinalInteger("page", request);//等同于pageNo
				List<TeaQueInfo> tqList = tqm.listInfoByOpt(loreId, currUserId, -1,true, pageNo, pageSize);
				msg = "success";
				List<Object> list_d = new ArrayList<Object>();
				String queTitlePre = "";
				if(roleName.equals("知识点管理员")){
					queTitlePre = tqList.get(0).getUser().getRealName() + "老师上传";
				}
				for(TeaQueInfo tq : tqList){
					Map<String,Object> map_d = new HashMap<String,Object>();
					map_d.put("tqId", tq.getId());
					map_d.put("queTitle", queTitlePre + tq.getQueTitle());
					map_d.put("tqType", "针对性诊断");
					map_d.put("inUse", tq.getInUse().equals(0) ? "有效" : "无效");
					map_d.put("addTeaName", tq.getUser().getRealName());//上传题老师
					list_d.add(map_d);
				}
				map.put("data", list_d);
				map.put("count", count);
				map.put("code", 0);
			}
		}
		map.put("msg", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}

	/**
	 * 获取指定题库详情
	 * @author wm
	 * @date 2019-7-26 下午04:39:15
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getTeaQueDetail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		TeaQueManager tqm = (TeaQueManager) AppFactory.instance(null).getApp(Constants.WEB_TEA_QUE_INFO);
		Integer tqId = CommonTools.getFinalInteger("tqId", request);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "error";
		TeaQueInfo tq = tqm.getEntityById(tqId);
		String roleName = CommonTools.getLoginRoleName(request);
		boolean flag = false;
		if(tq != null){
			String queTitle = tq.getQueTitle();
			if(roleName.equals("老师")){
				if(tq.getUser().getId().equals(CommonTools.getLoginUserId(request))){
					flag = true;
				}
			}else if(roleName.equals("知识点管理员")){
				flag = true;
				queTitle = tq.getUser().getRealName() + "老师上传" + queTitle;
			}
			if(flag){
				msg = "success";
				map.put("tqId", tq.getId());
				map.put("queTitle", queTitle);
				map.put("queSub", tq.getQueSub());
				map.put("loreName", tq.getLoreInfo().getLoreName());
				map.put("queType", tq.getQueType());
				map.put("queType2", tq.getQueType2());
				map.put("queAnswer", tq.getQueAnswer());
				map.put("queOptNum", tq.getQueAnswer().split(",").length);
				map.put("queResolution", tq.getQueResolution());
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 修改指定老师上传的题库详情
	 * @author wm
	 * @date 2019-7-26 下午05:10:25
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward updateTeaQue(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		TeaQueManager tqm = (TeaQueManager) AppFactory.instance(null).getApp(Constants.WEB_TEA_QUE_INFO);
		Integer tqId = CommonTools.getFinalInteger("tqId", request);
		String queSub = Transcode.unescape_new1("queSub", request);
		String queAnswer = Transcode.unescape_new1("queAnswer", request);
		String queResolution = Transcode.unescape_new1("queResolution", request);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "error";
		Boolean flag = false;
		String roleName = CommonTools.getLoginRoleName(request);
		TeaQueInfo tq = tqm.getEntityById(tqId);
		if(tq != null){
			if(roleName.equals("老师")){
				if(tq.getUser().getId().equals(CommonTools.getLoginUserId(request))){
					flag = true;
				}
			}else if(roleName.equals("知识点管理员")){
				flag = true;
			}
			if(flag){
				flag = tqm.updateInfoById(tqId, queSub, queAnswer, queResolution, "");
				if(flag){
					msg = "success";
				}
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 获取老师上传题库时的标题
	 * @author wm
	 * @date 2019-8-6 下午04:22:38
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getCurrMaxTeaQueNum(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		TeaQueManager tqm = (TeaQueManager) AppFactory.instance(null).getApp(Constants.WEB_TEA_QUE_INFO);
		LoreInfoManager lm = (LoreInfoManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_INFO);
		Integer loreId = CommonTools.getFinalInteger("loreId", request);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "error";
		String roleName = CommonTools.getLoginRoleName(request);
		if(roleName.equals("老师") && loreId > 0){
			LoreInfo lore = lm.getEntityById(loreId);
			Integer ediId = lore.getChapter().getEducation().getEdition().getId();
			if(ediId > 1){//老师增加题库时选择的是其他版本
				//需要把其他版本的知识点转成通用版知识点
				loreId = lore.getMainLoreId();
			}
			Integer userId = CommonTools.getLoginUserId(request);
			List<TeaQueInfo> tqList = tqm.listInfoByOpt(loreId, userId, -1,false, 0, 0);
			Integer currNum = 1;
			if(tqList.size() > 0){
				currNum = tqList.get(tqList.size() - 1).getQueNum() + 1;
			}
			map.put("currNum", "第" + currNum + "题");
			msg = "success";
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 老师增加家庭作业题库
	 * @author wm
	 * @date 2019-7-26 下午05:18:50
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward addTeaQue(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		TeaQueManager tqm = (TeaQueManager) AppFactory.instance(null).getApp(Constants.WEB_TEA_QUE_INFO);
		LoreInfoManager lm = (LoreInfoManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_INFO);
		Integer loreId = CommonTools.getFinalInteger("loreId", request);
		String queType = Transcode.unescape_new1("queType", request);
		String queSub = Transcode.unescape_new1("queSub", request);
		String queAnswer = Transcode.unescape_new1("queAnswer", request);
		String queResolution = Transcode.unescape_new1("queResolution", request);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "error";
		String roleName = CommonTools.getLoginRoleName(request);
		if(roleName.equals("老师") && loreId > 0){
			LoreInfo lore = lm.getEntityById(loreId);
			Integer ediId = lore.getChapter().getEducation().getEdition().getId();
			if(ediId > 1){//老师增加题库时选择的是其他版本
				//需要把其他版本的知识点转成通用版知识点
				loreId = lore.getMainLoreId();
			}
			Integer userId = CommonTools.getLoginUserId(request);
			List<TeaQueInfo> tqList = tqm.listInfoByOpt(loreId, userId, -1,false, 0, 0);
			Integer currNum = 1;
			if(tqList.size() > 0){
				currNum = tqList.get(tqList.size() - 1).getQueNum() + 1;
			}
			Integer tqId = tqm.addTQ(loreId, currNum, lm.getEntityById(loreId).getLoreName() + "第" + currNum + "题", queSub, queAnswer, queResolution, queType, "其他", userId);
			if(tqId > 0){
				msg = "success";
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 浏览老师题库列表
	 * @author wm
	 * @date 2019-8-5 下午06:29:59
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getTeaDetailData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		TeaQueManager tqm = (TeaQueManager) AppFactory.instance(null).getApp(Constants.WEB_TEA_QUE_INFO);
		LoreInfoManager lm = (LoreInfoManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_INFO);
		Integer loreId = CommonTools.getFinalInteger("loreId", request);
		Integer currUserId = CommonTools.getLoginUserId(request);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "noInfo";
		String roleName = CommonTools.getLoginRoleName(request);
		if(roleName.equals("知识点管理员") || roleName.equals("老师")){
			if(loreId > 0 && currUserId > 0){
				if(roleName.equals("知识点管理员")){
					currUserId = 0;
				}
				LoreInfo lore = lm.getEntityById(loreId);
				Integer ediId = lore.getChapter().getEducation().getEdition().getId();
				if(ediId > 1){//老师增加题库时选择的是其他版本
					//需要把其他版本的知识点转成通用版知识点
					loreId = lore.getMainLoreId();
				}
				List<TeaQueInfo> tqList = tqm.listInfoByOpt(loreId, currUserId, -1,false, 0, 0);
				msg = "success";
				List<Object> list_d = new ArrayList<Object>();
				for(TeaQueInfo tq : tqList){
					Map<String,Object> map_d = new HashMap<String,Object>();
					map_d.put("tqId", tq.getId());
					map_d.put("queTitle", tq.getQueTitle());
					map_d.put("queType", tq.getQueType());
					map_d.put("queSub", tq.getQueSub());
					map_d.put("queAnswer", tq.getQueAnswer());
					map_d.put("inUse", tq.getInUse().equals(0) ? "有效" : "无效");
					map_d.put("queResolution", tq.getQueResolution());
					list_d.add(map_d);
				}
				map.put("tqList", list_d);
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 设置老师上传题的有/无效
	 * @author wm
	 * @date 2019-8-6 下午04:55:20
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward setTeaInUseStatus(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		TeaQueManager tqm = (TeaQueManager) AppFactory.instance(null).getApp(Constants.WEB_TEA_QUE_INFO);
		Integer tqId = CommonTools.getFinalInteger("tqId", request);
		Integer inUse = CommonTools.getFinalInteger("inUse", request);//有效状态（0：有效，1：无效）
		String roleName = CommonTools.getLoginRoleName(request);
		Map<String,String> map = new HashMap<String,String>();
		String msg = "error";
		if(roleName.equals("老师") || roleName.equals("知识点管理员")){
			boolean flag = false;
			if(roleName.equals("老师")){
				TeaQueInfo tq = tqm.getEntityById(tqId);
				if(tq != null){
					if(tq.getUser().getId().equals(CommonTools.getLoginUserId(request))){
						flag = true;
					}
				}
			}else{
				flag = true;
			}
			if(flag){
				flag = tqm.updateInUseById(tqId, inUse);
				if(flag){
					msg = "success";
				}
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 导向老师的家庭作业页面
	 * @author wm
	 * @date 2019-7-31 上午10:19:51
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward goTeaHwPage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		return mapping.findForward("teaHwPage");
	}
	
	/**
	 * 导向学生家庭作业页面
	 * @author wm
	 * @date 2019-7-31 上午10:21:49
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward goStuHwPage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		return mapping.findForward("stuHwPage");
	}
	
	
	/**
	 * 获取老师自己所有的班级列表(包括临时接管)--作业记录时用
	 * @author wm
	 * @date 2019-8-3 下午04:56:49
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	@SuppressWarnings("unchecked")
	public ActionForward getMyClassData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		UserClassInfoManager ucm = (UserClassInfoManager) AppFactory.instance(null).getApp(Constants.WEB_USER_CLASS_INFO);
		Integer currUserId = CommonTools.getLoginUserId(request);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "noInfo";
		if(currUserId > 0){
			List<UserClassInfo> ucList = ucm.listTeaInfoByOpt(currUserId, Constants.TEA_ROLE_ID);
			if(ucList.size() > 0){
				msg = "success";
				List<Object> list_d = new ArrayList<Object>();
				for(UserClassInfo uc : ucList){
					ClassInfo c = uc.getClassInfo();
					Map<String,Object> map_d = new HashMap<String,Object>();
					map_d.put("cId", c.getId());
					String buildeClassDate = c.getBuildeClassDate();
					String gradeName = Convert.dateConvertGradeName(buildeClassDate);//当前所在的年级
					map_d.put("cName", gradeName+c.getClassName());
					map_d.put("status", uc.getStatus());//0:表示自己的初始班级,1:临时接管，2：永久接管
					list_d.add(map_d);
				}
				SortCName sort = new SortCName();
				Collections.sort(list_d, sort);
				map.put("cList", list_d);
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 获取老师自己所有的班级列表(包括临时接管)--发布作业时用
	 * @author wm
	 * @date 2019-8-3 下午05:58:26
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	@SuppressWarnings("unchecked")
	public ActionForward getMyClassData_1(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		UserClassInfoManager ucm = (UserClassInfoManager) AppFactory.instance(null).getApp(Constants.WEB_USER_CLASS_INFO);
		SendHwManager swm = (SendHwManager) AppFactory.instance(null).getApp(Constants.WEB_SEND_HW_INFO);
		Integer hwType = CommonTools.getFinalInteger("hwType", request);//作业类型1-家庭作业,2-课后复习,3-课前预习
		Integer currUserId = CommonTools.getLoginUserId(request);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "noInfo";
		if(currUserId > 0){
			List<UserClassInfo> ucList = ucm.listTeaInfoByOpt(currUserId, Constants.TEA_ROLE_ID);
			if(ucList.size() > 0){
				msg = "success";
				String gradeInfo = "";//1年级
				String classInfo = "";
				String classIdInfo = "";
				Integer subId = ucList.get(0).getSubjectId();//老师所在的学科
				for(UserClassInfo uc : ucList){
					ClassInfo c = uc.getClassInfo();
					String buildeClassDate = c.getBuildeClassDate();
					String gradeName = Convert.dateConvertGradeName(buildeClassDate);//当前所在的年级
					String className = c.getClassName();
					Integer classId = c.getId();
					String[] classInfoArr = classInfo.split(",");
					String[] classIdInfoArr = classIdInfo.split(",");
					if(gradeInfo.contains(gradeName)){
						String[] gradeInfoArr = gradeInfo.split(",");
						for(int j = 0 ; j < gradeInfoArr.length ; j++){
							if(gradeInfoArr[j].equals(gradeName)){
								classInfoArr[j] = classInfoArr[j]+":"+className;
								classInfo = "";
								for(int k = 0 ; k < classInfoArr.length ; k++){
									classInfo += classInfoArr[k] + ",";
								}
								
								classIdInfoArr[j] = classIdInfoArr[j]+":"+classId;
								classIdInfo = "";
								for(int k = 0 ; k < classIdInfoArr.length ; k++){
									classIdInfo += classIdInfoArr[k] + ",";
								}
								break;
							}
						}
					}else{
						gradeInfo += gradeName + ",";
						classInfo += className + ",";
						classIdInfo += classId + ",";
					}
				}
				gradeInfo = gradeInfo.substring(0,gradeInfo.length() - 1);
				classInfo = classInfo.substring(0,classInfo.length() - 1);
				classIdInfo = classIdInfo.substring(0, classIdInfo.length() - 1);
				String[] gradeArr = gradeInfo.split(",");
				List<Object> list_a = new ArrayList<Object>();
				for(int i = 0 ; i < gradeArr.length ; i++){
					Map<String,Object> map_d = new HashMap<String,Object>();
					map_d.put("gradeName", gradeArr[i]);
					map_d.put("gradeNo", Convert.ChineseConvertNumber(gradeArr[i]));
					String[] classArr = classInfo.split(",")[i].split(":");
					String[] classIdArr = classIdInfo.split(",")[i].split(":");
					List<Object> list_a1 = new ArrayList<Object>();
					for(int j = 0 ; j < classArr.length ; j++){
						Map<String,Object> map_d1 = new HashMap<String,Object>();
						map_d1.put("cName", classArr[j]);
						map_d1.put("classId", classIdArr[j]);
						//发送老师取0的话，有可能是临时老师发布的作业
						if(swm.listPageInfoByOpt(0, subId, Integer.parseInt(classIdArr[j]), hwType, 0, 0, "", "", false, 0, 0).size() > 0){
							map_d1.put("checkStatus", 0);//该班级存在未检查的指定作业类型下的作业
						}else{
							map_d1.put("checkStatus", 1);//不存在或者未发布
						}
						list_a1.add(map_d1);
					}
					SortCName sort = new SortCName();
					Collections.sort(list_a1, sort);
					map_d.put("cList", list_a1);
					list_a.add(map_d);
				}
				SortGName sort = new SortGName();
				Collections.sort(list_a, sort);
				map.put("gcList", list_a);
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	/**
	 * 获取家庭作业发送列表（老师）
	 * @author wm
	 * @date 2019-7-31 上午10:26:35
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getSendHwData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		SendHwManager swm = (SendHwManager) AppFactory.instance(null).getApp(Constants.WEB_SEND_HW_INFO);
		HwStudyTjManager tjm = (HwStudyTjManager) AppFactory.instance(null).getApp(Constants.WEB_HW_STUDY_TJ_INFO);
		Integer currUserId = CommonTools.getLoginUserId(request);
		Integer classId = CommonTools.getFinalInteger("classId", request);
		Integer opt = CommonTools.getFinalInteger("opt", request);//0:首页，1：作业记录页面
		Integer hwType = CommonTools.getFinalInteger("hwType", request);//作业类型1-家庭作业,2-课后复习,3-课前预习--默认不传
		Integer checkStatus = CommonTools.getFinalInteger("checkStatus", request);//检查状态（0:未检查，1:已检查）--默认传-1
		String status = CommonTools.getFinalStr("status", request);//默认""为正常滑动，其他的时候为返回
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "noInfo";
		String sDate = CommonTools.getFinalStr("sDate", request);
		String eDate = CommonTools.getFinalStr("eDate", request);
		boolean pageFlag = false;
		Integer pageNo = 1;
		Integer pageSize = 10;
		if(opt.equals(1)){
			pageFlag = true;
			pageNo = CommonTools.getFinalInteger("pageNo", request);
			pageSize = CommonTools.getFinalInteger("pageSize", request);
			if(pageSize <= 0){
				pageSize = 10;
			}
			if(sDate.equals("") && eDate.equals("")){
				eDate = CurrentTime.getStringDate();
				sDate = CurrentTime.getFinalDate(-2);
			}
		}else{
			sDate = eDate = CurrentTime.getStringDate();
		}
		if(!status.equals("")){//返回时
			pageSize = pageNo * pageSize;
			pageNo = 1;
		}
		List<SendHwInfo> shList = swm.listPageInfoByOpt(currUserId, 0, classId, hwType, checkStatus, -1,sDate, eDate, pageFlag, pageNo, pageSize);
		if(shList.size() > 0){
			msg = "success";
			List<Object> list_d = new ArrayList<Object>();
			for(Integer i = 0 ; i < shList.size() ; i++){
				SendHwInfo shw = shList.get(i);
				Map<String,Object> map_d = new HashMap<String,Object>();
				map_d.put("hwSendId", shw.getId());
				map_d.put("classInfo", shw.getClassName());
				map_d.put("endDate", shw.getEndDate());
				map_d.put("hwTitle", shw.getHwTitle());
				map_d.put("hwType", shw.getHwType());
				map_d.put("loreInfo", shw.getLoreInfo().getLoreName());//第一单元:数据的收集和整理
				map_d.put("checkStatus", shw.getCheckStatus());//检查状态(1:未检查，2:已检查)
				map_d.put("checkTime", shw.getCheckTime());
				List<HwStudyTjInfo> tjList = tjm.listInfoByOpt(shw.getId(), 0, -1, false, 1, 1);
				Integer zsComNum = 0;//按时完成
				Integer bzComNum = 0;//补做完成
				Integer unComNum = 0;//未完成
				if(tjList.size() > 0){
					for(HwStudyTjInfo tj : tjList){
						Integer comStatus = tj.getComStatus();
						if(comStatus.equals(0)){
							unComNum++;
						}else if(comStatus.equals(1)){
							zsComNum++;
						}else if(comStatus.equals(2)){
							bzComNum++;
						}
					}
				}
				map_d.put("zsComNum", zsComNum);
				map_d.put("bzComNum", bzComNum);
				map_d.put("unComNum", unComNum);
				list_d.add(map_d);
			}
			map.put("sendHwList", list_d);
		}
		map.put("sDate", sDate);
		map.put("eDate", eDate);
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 获取指定发送作业的学生完成详细情况
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getSpecHwStuComDetail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		SendHwManager swm = (SendHwManager) AppFactory.instance(null).getApp(Constants.WEB_SEND_HW_INFO);
		HwStudyTjManager tjm = (HwStudyTjManager) AppFactory.instance(null).getApp(Constants.WEB_HW_STUDY_TJ_INFO);
		Integer currUserId = CommonTools.getLoginUserId(request);
		Integer hwSendId = CommonTools.getFinalInteger("hwSendId", request);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "error";
		String currentDate = CurrentTime.getStringDate();
		if(hwSendId > 0){
			SendHwInfo hwInfo = swm.getEntityById(hwSendId);
			if(hwInfo != null && hwInfo.getUser().getId().equals(currUserId)){
				msg = "success";
				map.put("hwTitle", hwInfo.getClassName()+hwInfo.getHwTitle()+"作业详情");
				String endDate = hwInfo.getEndDate().substring(0, 10);
				if(CurrentTime.compareDate(endDate, currentDate) > 0){
					map.put("endStatus", "已截止");
				}else{
					map.put("endStatus", "正常");
				}
				map.put("loreInfo", hwInfo.getLoreInfo().getLoreName());//数据的收集和整理
//				Integer pageNo = CommonTools.getFinalInteger("pageNo", request);
//				Integer pageSize = CommonTools.getFinalInteger("pageSize", request);
				List<HwStudyTjInfo> tjList = tjm.listInfoByOpt(hwSendId, 0, -1, false, 0, 0);
				Integer stuNum = tjList.size();
				if(stuNum > 0){
					Integer allScore = 0;
					Double avgScore = 0.0;
					Integer zsComNum = 0;//按时完成
					Integer bzComNum = 0;//补做完成
					Integer unComNum = 0;//未完成
					List<Object> list_d = new ArrayList<Object>();
					for(HwStudyTjInfo tj :tjList){
						Map<String,Object> map_d = new HashMap<String,Object>();
						map_d.put("tjId", tj.getId());
						map_d.put("stuName", tj.getUser().getRealName());
						map_d.put("hwScore", tj.getHwScore());
						map_d.put("succNum", tj.getSuccNum());
						map_d.put("errorNum", tj.getErrorNum());
						map_d.put("unNum", tj.getAllNum() - tj.getErrorNum() - tj.getSuccNum());
						allScore += tj.getHwScore();
						Integer comStatus = tj.getComStatus();
						if(comStatus.equals(0)){
							unComNum++;
						}else if(comStatus.equals(1)){
							zsComNum++;
						}else if(comStatus.equals(2)){
							bzComNum++;
						}
						list_d.add(map_d);
					}
					map.put("stuInfo", list_d);
					avgScore = Convert.convertInputNumber_5(allScore * 100.0 / stuNum);
					map.put("avgScore", avgScore);
					map.put("zsComNum", zsComNum);
					map.put("bzComNum", bzComNum);
					map.put("unComNum", unComNum);
				}else{
					msg = "noInfo";
				}
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 获取指定发送作业的题目正确率
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getSpecHwQueComDetail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		SendHwManager swm = (SendHwManager) AppFactory.instance(null).getApp(Constants.WEB_SEND_HW_INFO);
		HwStudyTjManager tjm = (HwStudyTjManager) AppFactory.instance(null).getApp(Constants.WEB_HW_STUDY_TJ_INFO);
		HwStudyDetailManager hsdm = (HwStudyDetailManager) AppFactory.instance(null).getApp(Constants.WEB_HW_STUDY_DETAIL_INFO);
		LoreQuestionManager lqm = (LoreQuestionManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_QUESTION_INFO);
		HwQueManager hqm = (HwQueManager) AppFactory.instance(null).getApp(Constants.WEB_HW_QUE_INFO);
		TeaQueManager tqm = (TeaQueManager) AppFactory.instance(null).getApp(Constants.WEB_TEA_QUE_INFO);
		Integer currUserId = CommonTools.getLoginUserId(request);
		Integer hwSendId = CommonTools.getFinalInteger("hwSendId", request);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "error";
		if(hwSendId > 0){
			SendHwInfo hwInfo = swm.getEntityById(hwSendId);
			if(hwInfo != null && hwInfo.getUser().getId().equals(currUserId)){
				//获取该作业的总人数
				Integer stuNum_all = tjm.getCountByOpt(hwSendId, 0, -1);
				map.put("hwTitle", hwInfo.getClassName()+hwInfo.getHwTitle()+"作业详情");
				if(stuNum_all > 0){
					msg = "success";
					String sysQueIdArr = hwInfo.getSysQueIdArr();
					String hwQueIdArr = hwInfo.getHwQueIdArr();
					String teaQueIdArr = hwInfo.getTeaQueIdArr();
					List<Object> list_d = new ArrayList<Object>();
					if(!sysQueIdArr.equals("")){//系统题库--知识点 下面的题库
						String[] sysQueIdArray =  sysQueIdArr.split(",");
						for(Integer i = 0 ; i < sysQueIdArray.length ; i++){
							LoreQuestion lq = lqm.getEntityByLqId(Integer.parseInt(sysQueIdArray[i]));
							if(lq != null){
								Map<String,Object> map_d = new HashMap<String,Object>();
								map_d.put("hwSendId", hwSendId);
								map_d.put("queId", lq.getId());
								map_d.put("hwType", "sys");//系统题库
								Integer succNum = 0;//正确人数
								List<HwStudyDetailInfo> hsdList = hsdm.listInfoByOpt(hwSendId, 0, lq.getId(), "sys");
								if(hsdList.size() > 0){
									for(HwStudyDetailInfo hsd : hsdList){
										if(hsd.getResult().equals(1)){
											succNum++;
										}
									}
								}
								map_d.put("succRate", Convert.convertInputNumber_6(succNum * 100.0 / stuNum_all));
								list_d.add(map_d);
							}
						}
					}
					if(!hwQueIdArr.equals("")){//系统上传的家庭作业
						String[] hwQueIdArray =  hwQueIdArr.split(",");
						for(Integer i = 0 ; i < hwQueIdArray.length ; i++){
							HwQueInfo hq = hqm.getEntityById(Integer.parseInt(hwQueIdArray[i]));
							if(hq != null){
								Map<String,Object> map_d = new HashMap<String,Object>();
								map_d.put("hwSendId", hwSendId);
								map_d.put("queId", hq.getId());
								map_d.put("hwType", "hw");//家庭作业题库
								Integer succNum = 0;//正确人数
								List<HwStudyDetailInfo> hsdList = hsdm.listInfoByOpt(hwSendId, 0, hq.getId(), "hw");
								if(hsdList.size() > 0){
									for(HwStudyDetailInfo hsd : hsdList){
										if(hsd.getResult().equals(1)){
											succNum++;
										}
									}
								}
								map_d.put("succRate", Convert.convertInputNumber_6(succNum * 100.0 / stuNum_all));
								list_d.add(map_d);
							}
						}
					}
					if(!teaQueIdArr.equals("")){//老师上传的家庭作业
						String[] teaQueIdArray =  teaQueIdArr.split(",");
						for(Integer i = 0 ; i < teaQueIdArray.length ; i++){
							TeaQueInfo tq = tqm.getEntityById(Integer.parseInt(teaQueIdArray[i]));
							if(tq != null){
								Map<String,Object> map_d = new HashMap<String,Object>();
								map_d.put("hwSendId", hwSendId);
								map_d.put("queId", tq.getId());
								map_d.put("hwType", "tea");//老师题库
								Integer succNum = 0;//正确人数
								List<HwStudyDetailInfo> hsdList = hsdm.listInfoByOpt(hwSendId, 0, tq.getId(), "tea");
								if(hsdList.size() > 0){
									for(HwStudyDetailInfo hsd : hsdList){
										if(hsd.getResult().equals(1)){
											succNum++;
										}
									}
								}
								map_d.put("succRate", Convert.convertInputNumber_6(succNum * 100.0 / stuNum_all));
								list_d.add(map_d);
							}
						}
					}
					map.put("queList", list_d);
				}else{
					msg = "noInfo";
				}
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 获取指定题目的所有学生完成的简单统计--(分组显示学生人数)
	 * @author wm
	 * @date 2019-8-3 上午10:03:22
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getSpecHwQueComSubDetail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		SendHwManager swm = (SendHwManager) AppFactory.instance(null).getApp(Constants.WEB_SEND_HW_INFO);
		HwStudyTjManager tjm = (HwStudyTjManager) AppFactory.instance(null).getApp(Constants.WEB_HW_STUDY_TJ_INFO);
		HwStudyDetailManager hsdm = (HwStudyDetailManager) AppFactory.instance(null).getApp(Constants.WEB_HW_STUDY_DETAIL_INFO);
		LoreQuestionManager lqm = (LoreQuestionManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_QUESTION_INFO);
		HwQueManager hqm = (HwQueManager) AppFactory.instance(null).getApp(Constants.WEB_HW_QUE_INFO);
		TeaQueManager tqm = (TeaQueManager) AppFactory.instance(null).getApp(Constants.WEB_TEA_QUE_INFO);
		HwMindRelationManager hmrm = (HwMindRelationManager) AppFactory.instance(null).getApp(Constants.WEB_HW_MIND_RELATION_INFO);
		HwAbilityRelationManager harm = (HwAbilityRelationManager) AppFactory.instance(null).getApp(Constants.WEB_HW_ABILITY_RELATION_INFO);
		Integer currUserId = CommonTools.getLoginUserId(request);
		Integer hwSendId = CommonTools.getFinalInteger("hwSendId", request);
		Integer queId = CommonTools.getFinalInteger("queId", request);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "error";
		if(hwSendId > 0 && queId > 0){
			SendHwInfo hwInfo = swm.getEntityById(hwSendId);
			if(hwInfo != null && hwInfo.getUser().getId().equals(currUserId)){
				msg = "success";
				//获取该作业的总人数
				Integer stuNum_all = tjm.getCountByOpt(hwSendId, 0, -1);
				String sysQueIdArr = hwInfo.getSysQueIdArr();
				String hwQueIdArr = hwInfo.getHwQueIdArr();
				String teaQueIdArr = hwInfo.getTeaQueIdArr();
				List<Object> list_d = new ArrayList<Object>();
				if(!sysQueIdArr.equals("")){//系统题库--知识点 下面的题库
					String[] sysQueIdArray =  sysQueIdArr.split(",");
					for(Integer i = 0 ; i < sysQueIdArray.length ; i++){
						LoreQuestion lq = lqm.getEntityByLqId(Integer.parseInt(sysQueIdArray[i]));
						if(lq != null){
							Map<String,Object> map_d = new HashMap<String,Object>();
							map_d.put("hwType", "sys");
							map_d.put("queId", lq.getId());
							boolean selFlag = false;
							if(queId.equals(lq.getId())){
								selFlag = true;
							}
							map_d.put("selFlag",selFlag);
							//获取题库详情
							map_d.put("lqSub", lq.getQueSub());
							String queType = lq.getQueType();
							map_d.put("lqType", queType);
							map_d.put("answerA", lq.getA());
							map_d.put("answerB", lq.getB());
							map_d.put("answerC", lq.getC());
							map_d.put("answerD", lq.getD());
							map_d.put("answerE", lq.getE());
							map_d.put("answerF", lq.getF());
							String queAnswer = lq.getQueAnswer();
							//需要匹配出选项
							if(queType.equals("单选题") || queType.equals("多选题") || queType.equals("填空选择题") || queType.equals("判断题")){
								String queAnswer_text = "";
								String[] answerQueArr = queAnswer.replaceAll("&#wmd;", "'").split(",");
								String replaceStr = "Module/commonJs/ueditor/jsp/lore/";
								for(Integer j = 0 ; j < answerQueArr.length ; j++){
									if(answerQueArr[j].equals(lq.getA().replace(replaceStr,""))){
										queAnswer_text += "A,";
										continue;
									}
									if(answerQueArr[j].equals(lq.getB().replace(replaceStr,""))){
										queAnswer_text += "B,";
										continue;
									}
									if(answerQueArr[j].equals(lq.getC().replace(replaceStr,""))){
										queAnswer_text += "C,";
										continue;
									}
									if(answerQueArr[j].equals(lq.getD().replace(replaceStr,""))){
										queAnswer_text += "D,";
										continue;
									}
									if(answerQueArr[j].equals(lq.getE().replace(replaceStr,""))){
										queAnswer_text += "E,";
										continue;
									}
									if(answerQueArr[j].equals(lq.getF().replace(replaceStr,""))){
										queAnswer_text += "F,";
										continue;
									}
								}
								if(!queAnswer_text.equals("")){
									queAnswer_text = queAnswer_text.substring(0, queAnswer_text.length() - 1);
								}
								map_d.put("queAnswer", queAnswer_text);
							}else if(queType.equals("问答题") || queType.equals("填空题")){
								map_d.put("queAnswer", queAnswer);//直接给出答案
							}
							Integer succNum = 0;//正确人数
							Integer errorNum = 0;//错误人数
							Integer unNum = 0;//未做人数
							List<HwStudyDetailInfo> hsdList = hsdm.listInfoByOpt(hwSendId, 0, lq.getId(), "sys");
							if(hsdList.size() > 0){
								for(HwStudyDetailInfo hsd : hsdList){
									if(hsd.getResult().equals(1)){
										succNum++;
									}else if(hsd.getResult().equals(0)){
										errorNum++;
									}else{
										unNum++;
									}
								}
							}
							map_d.put("succNum", succNum);
							map_d.put("errorNum", errorNum);
							map_d.put("unComNum", unNum);
							map_d.put("succRate", Convert.convertInputNumber_5(succNum * 100.0 / stuNum_all));//得分率
							list_d.add(map_d);
						}
					}
				}
				if(!hwQueIdArr.equals("")){//系统上传的家庭作业
					String[] hwQueIdArray =  hwQueIdArr.split(",");
					for(Integer i = 0 ; i < hwQueIdArray.length ; i++){
						HwQueInfo hq = hqm.getEntityById(Integer.parseInt(hwQueIdArray[i]));
						if(hq != null){
							Map<String,Object> map_d = new HashMap<String,Object>();
							map_d.put("hwType", "hw");
							map_d.put("queId", hq.getId());
							boolean selFlag = false;
							if(queId.equals(hq.getId())){
								selFlag = true;
							}
							String swType = "";//思维
							String nlType = "";//能力
							List<HwMindRelationInfo> hmrList = hmrm.listInfoByOpt(0, hq.getId());
							List<HwAbilityRelationInfo>  harList = harm.listInfoByOpt(0, hq.getId());
							for(HwMindRelationInfo hmr : hmrList){
								swType += hmr.getBuffetMindTypeInfo().getMind() + "、";
							}
							for(HwAbilityRelationInfo har : harList){
								nlType += har.getBuffetAbilityTypeInfo().getAbility() + "、";
							}
							if(!swType.equals("")){
								swType = swType.substring(0, swType.length() - 1);
							}
							if(!nlType.equals("")){
								nlType = nlType.substring(0, nlType.length() - 1);
							}
							map_d.put("btName", hq.getBuffetTypeInfo().getTypes());
							map_d.put("mindStr", swType);
							map_d.put("abilityStr", nlType);
							map_d.put("selFlag",selFlag);
							map_d.put("lqSub", hq.getSubject());
							map_d.put("lqType", hq.getQueType());
							map_d.put("queAnswer", hq.getAnswer());
							
							Integer succNum = 0;//正确人数
							Integer errorNum = 0;//错误人数
							Integer unNum = 0;//未做人数
							List<HwStudyDetailInfo> hsdList = hsdm.listInfoByOpt(hwSendId, 0, hq.getId(), "hw");
							if(hsdList.size() > 0){
								for(HwStudyDetailInfo hsd : hsdList){
									if(hsd.getResult().equals(1)){
										succNum++;
									}else if(hsd.getResult().equals(0)){
										errorNum++;
									}else{
										unNum++;
									}
								}
							}
							map_d.put("succNum", succNum);
							map_d.put("errorNum", errorNum);
							map_d.put("unComNum", unNum);
							map_d.put("succRate", Convert.convertInputNumber_5(succNum * 100.0 / stuNum_all));//得分率
							list_d.add(map_d);
						}
					}
				}
				if(!teaQueIdArr.equals("")){//老师上传的家庭作业
					String[] teaQueIdArray =  teaQueIdArr.split(",");
					for(Integer i = 0 ; i < teaQueIdArray.length ; i++){
						TeaQueInfo tq = tqm.getEntityById(Integer.parseInt(teaQueIdArray[i]));
						if(tq != null){
							Map<String,Object> map_d = new HashMap<String,Object>();
							map_d.put("hwType", "tea");
							map_d.put("queId", tq.getId());
							boolean selFlag = false;
							if(queId.equals(tq.getId())){
								selFlag = true;
							}
							map_d.put("selFlag",selFlag);
							
							map_d.put("lqSub", tq.getQueSub());
							map_d.put("lqType", tq.getQueType());
							map_d.put("queAnswer", tq.getQueAnswer());
							
							Integer succNum = 0;//正确人数
							Integer errorNum = 0;//错误人数
							Integer unNum = 0;//未做人数
							List<HwStudyDetailInfo> hsdList = hsdm.listInfoByOpt(hwSendId, 0, tq.getId(), "tea");
							if(hsdList.size() > 0){
								for(HwStudyDetailInfo hsd : hsdList){
									if(hsd.getResult().equals(1)){
										succNum++;
									}else if(hsd.getResult().equals(0)){
										errorNum++;
									}else{
										unNum++;
									}
								}
							}
							map_d.put("succNum", succNum);
							map_d.put("errorNum", errorNum);
							map_d.put("unComNum", unNum);
							map_d.put("succRate", Convert.convertInputNumber_5(succNum * 100.0 / stuNum_all));//得分率
							list_d.add(map_d);
						}
					}
				}
				map.put("queList", list_d);
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 获取指定题目的所有学生完成的详细统计(分组显示学生姓名和头像)
	 * @author wm
	 * @date 2019-8-17 上午11:28:42
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getSpecHwQueComSubStuDetail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		HwStudyDetailManager hsdm = (HwStudyDetailManager) AppFactory.instance(null).getApp(Constants.WEB_HW_STUDY_DETAIL_INFO);
		Integer hwSendId = CommonTools.getFinalInteger("hwSendId", request);//发送家庭作业编号
		Integer queId = CommonTools.getFinalInteger("queId", request);//作业题库编号
		String hwType = CommonTools.getFinalStr("hwType", request);//题目类型（hw,sys,tea）
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "error";
		if(hwSendId > 0 && queId > 0){
			List<HwStudyDetailInfo> hsdList = hsdm.listInfoByOpt(hwSendId, 0, queId, hwType);
			List<Object> list_d_succ = new ArrayList<Object>();
			List<Object> list_d_error = new ArrayList<Object>();
			List<Object> list_d_unCom = new ArrayList<Object>();
			if(hsdList.size() > 0){
				msg = "success";
				for(HwStudyDetailInfo hsd : hsdList){
					if(hsd.getResult().equals(1)){
						Map<String,Object> map_d_1 = new HashMap<String,Object>();
						User stu = hsd.getHwStudyTjInfo().getUser();
						map_d_1.put("stuName", stu.getRealName());
						map_d_1.put("headImg", stu.getPortrait());
						list_d_succ.add(map_d_1);
					}else if(hsd.getResult().equals(0)){
						Map<String,Object> map_d_1 = new HashMap<String,Object>();
						User stu = hsd.getHwStudyTjInfo().getUser();
						map_d_1.put("stuName", stu.getRealName());
						map_d_1.put("headImg", stu.getPortrait());
						list_d_error.add(map_d_1);
					}else{
						Map<String,Object> map_d_1 = new HashMap<String,Object>();
						User stu = hsd.getHwStudyTjInfo().getUser();
						map_d_1.put("stuName", stu.getRealName());
						map_d_1.put("headImg", stu.getPortrait());
						list_d_unCom.add(map_d_1);
					}
				}
				map.put("succList", list_d_succ);
				map.put("errorList", list_d_error);
				map.put("unList", list_d_unCom);
			}else{
				msg = "noInfo";
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 根据老师所选年级班级获取章节知识点列表并根据时间定位上下册并根据上次作业定位出版社（老师发布作业）
	 * @author wm
	 * @date 2019-8-4 下午05:23:43
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getChapterLoreData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		SendHwManager swm = (SendHwManager) AppFactory.instance(null).getApp(Constants.WEB_SEND_HW_INFO);
		ClassInfoManager cm = (ClassInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CLASS_INFO);
		UserClassInfoManager ucm = (UserClassInfoManager) AppFactory.instance(null).getApp(Constants.WEB_USER_CLASS_INFO);
		EducationManager em = (EducationManager) AppFactory.instance(null).getApp(Constants.WEB_EDUCATION_INFO);
		ChapterManager cpm = (ChapterManager) AppFactory.instance(null).getApp(Constants.WEB_CHAPTER_INFO);
		EditionManager edim = (EditionManager) AppFactory.instance(null).getApp(Constants.WEB_EDITION_INFO);
		LoreInfoManager lm = (LoreInfoManager)AppFactory.instance(null).getApp(Constants.WEB_LORE_INFO);
		Integer currUserId = CommonTools.getLoginUserId(request);
		Integer month = CurrentTime.getSpecInfo("month");
		String classIdStr = CommonTools.getFinalStr("classId", request);//多个逗号隔开
		String eduVolume = Transcode.unescape_new1("eduVolume", request);//上/下册
		Integer ediId = CommonTools.getFinalInteger("ediId", request);//出版社
		Integer hwType = CommonTools.getFinalInteger("hwType", request);//作业类型1-家庭作业,2-课后复习,3-课前预习
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "noInfo";
		if(currUserId > 0 && !classIdStr.equals("") && hwType > 0){
			UserClassInfo uc = ucm.getEntityByOpt(currUserId, Constants.TEA_ROLE_ID);
			if(uc != null){
				msg = "success";
				Integer subId = uc.getSubjectId();//老师所教的学科
				String subName = uc.getSubjectName();//老师所在的学科
				String[] classIdArr = classIdStr.split(",");
				Integer classId_tmp = Integer.parseInt(classIdArr[0]);
				List<ClassInfo> cList = cm.listClassInfoById(classId_tmp);
				if(cList.size() > 0){
					String gradeName = Convert.dateConvertGradeName(cList.get(0).getBuildeClassDate());//老师所在的年级
					if(eduVolume.equals("")){
						if(month >= 3 && month < 9){//下册
							eduVolume = "上册";
						}else{
							eduVolume = "下册";
						}
						//没选出版社时出版社获取最近一次发送的家庭作业出版社
						List<SendHwInfo> shwList = swm.listPageInfoByOpt(currUserId, 0, 0, 0, -1, -1,"", "", false, 0, 0);
						if(shwList.size() > 0){
							SendHwInfo shw = shwList.get(0);
							ediId = shw.getLoreInfo().getChapter().getEducation().getEdition().getId();
						}else{
							ediId = 2;//默认定位到人教版
						}
					}
					//出版社列表
					List<Edition> ediList = edim.listInfoByShowStatus(0, -1);
					List<Object> list_d = new ArrayList<Object>();
					for(Edition edi : ediList){
						if(edi.getEdiName().equals("通用版")){
							continue;
						}
						Map<String,Object> map_d = new HashMap<String,Object>();
						map_d.put("ediId", edi.getId());
						map_d.put("ediName", edi.getEdiName());
						if(ediId.equals(edi.getId())){
							map_d.put("selFlag", true);
						}else{
							map_d.put("selFlag", false);
						}
						list_d.add(map_d);
					}
					map.put("subName", subName);//老师所在的学科
					map.put("gradeName", gradeName);//老师所在的年级
					map.put("ediList", list_d);//出版社列表
					//上下册数据
					List<Object> list_d_edu = new ArrayList<Object>();
					Map<String,Object> map_d_edu = new HashMap<String,Object>();
					map_d_edu.put("eduVolumeValue", "上册");
					map_d_edu.put("eduVolumeShow", gradeName+subName+"上册");
					if(eduVolume.equals("上册")){
						map_d_edu.put("selFlag", true);
					}else{
						map_d_edu.put("selFlag", false);
					}
					list_d_edu.add(map_d_edu);
					map_d_edu = new HashMap<String,Object>();
					map_d_edu.put("eduVolumeValue", "下册");
					map_d_edu.put("eduVolumeShow", gradeName+subName+"下册");
					if(eduVolume.equals("下册")){
						map_d_edu.put("selFlag", true);
					}else{
						map_d_edu.put("selFlag", false);
					}
					list_d_edu.add(map_d_edu);
					map.put("eduVolumeList", list_d_edu);//上下册
					//章节知识点列表
					List<Education> eduList = em.listInfoByOpt(ediId, gradeName, subId, eduVolume);//获取
					List<Object> list_d_cpt = new ArrayList<Object>();
					if(eduList.size() > 0){
						Integer eduId = eduList.get(0).getId();
						List<Chapter> cptList = cpm.ListInfoByEduId(eduId);
						if(cptList.size() > 0){
							for(Iterator<Chapter> it = cptList.iterator() ; it.hasNext();){
								Chapter cpt = it.next();
								Map<String,Object> map_d_2 = new HashMap<String,Object>();
								map_d_2.put("cptId", cpt.getId());
								map_d_2.put("cptName", cpt.getChapterName());
								List<Object> list_d3 = new ArrayList<Object>();
								List<LoreInfo> lList = lm.listInfoByCptId(cpt.getId());
								for(LoreInfo lore : lList){
									Map<String,Object> map_d_3 = new HashMap<String,Object>();
									map_d_3.put("loreId", lore.getId());
									map_d_3.put("loreName", lore.getLoreName());
									list_d3.add(map_d_3);
								}
								map_d_2.put("loreList", list_d3);
								list_d_cpt.add(map_d_2);
							}
							map.put("cptList", list_d_cpt);//章节、知识点列表
						}
					}
				}
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 根据所选章节知识点获取题库列表（老师发布作业）
	 * @author wm
	 * @date 2019-8-5 下午05:19:12
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getLoreQuestionData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		LoreInfoManager lm = (LoreInfoManager)AppFactory.instance(null).getApp(Constants.WEB_LORE_INFO);
		HwQueManager hqm = (HwQueManager) AppFactory.instance(null).getApp(Constants.WEB_HW_QUE_INFO);
		TeaQueManager tqm = (TeaQueManager) AppFactory.instance(null).getApp(Constants.WEB_TEA_QUE_INFO);
		LoreQuestionManager lqm = (LoreQuestionManager)AppFactory.instance(null).getApp(Constants.WEB_LORE_QUESTION_INFO);
		HwMindRelationManager hmrm = (HwMindRelationManager) AppFactory.instance(null).getApp(Constants.WEB_HW_MIND_RELATION_INFO);
		HwAbilityRelationManager harm = (HwAbilityRelationManager) AppFactory.instance(null).getApp(Constants.WEB_HW_ABILITY_RELATION_INFO);
		ClassInfoManager cm = (ClassInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CLASS_INFO);
		Integer currUserId = CommonTools.getLoginUserId(request);
		String classIdStr = CommonTools.getFinalStr("classId", request);//多个逗号隔开
		Integer hwType = CommonTools.getFinalInteger("hwType", request);//作业类型1-家庭作业,2-课后复习,3-课前预习
		Integer loreId = CommonTools.getFinalInteger("loreId", request);//之前选中的的知识点编号
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "noInfo";
		if(currUserId > 0 && !classIdStr.equals("") && hwType > 0 && loreId > 0){
			LoreInfo lore = lm.getEntityById(loreId);
			if(lore != null){
				Integer basicLoreId = lore.getMainLoreId();//通用知识点编号
				if(hwType.equals(1)){//获取系统家庭作业题库内容
					List<HwQueInfo> hqList = hqm.listInfoByLoreAndBuffetType(basicLoreId, "");
					List<Object> list_d_xqjf = new ArrayList<Object>();
					List<Object> list_d_ffgn = new ArrayList<Object>();
					List<Object> list_d_swxl = new ArrayList<Object>();
					List<Object> list_d_zlkf = new ArrayList<Object>();
					List<Object> list_d_nlpy = new ArrayList<Object>();
					List<Object> list_d_zksl = new ArrayList<Object>();
					if(hqList.size() > 0){
						msg = "success";
						for(HwQueInfo hq : hqList){
							Map<String,Object> map_d = new HashMap<String,Object>();
							Integer hwId = hq.getId();
							List<HwAbilityRelationInfo> harList = harm.listInfoByOpt(0,hwId);
							List<HwMindRelationInfo> hmrList = hmrm.listInfoByOpt(0, hwId);
							String swType = "";
							String nlType = "";
							for(Iterator<HwAbilityRelationInfo> it_a = harList.iterator() ; it_a.hasNext();){
								HwAbilityRelationInfo har = it_a.next();
								nlType += har.getBuffetAbilityTypeInfo().getAbility() + "、";
							}
							for(Iterator<HwMindRelationInfo> it_m = hmrList.iterator() ; it_m.hasNext();){
								HwMindRelationInfo bmr = it_m.next();
								swType += bmr.getBuffetMindTypeInfo().getMind() + "、";
							}
							if(!swType.equals("")){
								swType = swType.substring(0, swType.length() - 1);
							}
							if(!nlType.equals("")){
								nlType = nlType.substring(0, nlType.length() - 1);
							}
							String buffetType = hq.getBuffetTypeInfo().getTypes();
							map_d.put("lqId", hq.getId());
							map_d.put("queType", "hw");//sys,hw,tea
							map_d.put("lqType", hq.getQueType());
							map_d.put("lqTitle", hq.getTitle());
							map_d.put("lqSub", hq.getSubject());
							map_d.put("swType", swType);
							map_d.put("nlType", nlType);
							map_d.put("lqAnswer", hq.getAnswer());
							map_d.put("lqResolution", hq.getResolution());
							if(buffetType.equals("兴趣激发")){
								list_d_xqjf.add(map_d);
							}else if(buffetType.equals("方法归纳")){
								list_d_ffgn.add(map_d);
							}else if(buffetType.equals("思维训练")){
								list_d_swxl.add(map_d);
							}else if(buffetType.equals("智力开发")){
								list_d_zlkf.add(map_d);
							}else if(buffetType.equals("能力培养")){
								list_d_nlpy.add(map_d);
							}else if(buffetType.equals("中/高考涉猎")){
								list_d_zksl.add(map_d);
							}
						}
						map.put("xqjf", list_d_xqjf);
						map.put("ffgn", list_d_ffgn);
						map.put("swxl", list_d_swxl);
						map.put("zlkf", list_d_zlkf);
						map.put("nlpy", list_d_nlpy);
						map.put("zksl", list_d_zksl);
					}
				}else{//获取系统题库和老师上传题库
					List<LoreQuestion> lqList = lqm.listInfoByLoreId(basicLoreId, "针对性诊断", 0);
					List<TeaQueInfo> tqList = tqm.listInfoByOpt(basicLoreId, currUserId, 0,false, 0, 0);
					List<Object> list_d = new ArrayList<Object>();
					if(lqList.size() > 0){
						msg = "success";
						for(LoreQuestion lq : lqList){
							Map<String,Object> map_d = new HashMap<String,Object>();
							map_d.put("lqId", lq.getId());
							map_d.put("queType", "sys");//sys,hw,tea
							map_d.put("lqType", lq.getQueType());
							map_d.put("lqTitle", lq.getQueTitle());
							map_d.put("lqSub", lq.getQueSub());
							String answerA = lq.getA();
							String answerB = lq.getB();
							String answerC = lq.getC();
							String answerD = lq.getD();
							String answerE = lq.getE();
							String answerF = lq.getF();
							map_d.put("answerA", answerA);//选项A
							map_d.put("answerB", answerB);//选项B
							map_d.put("answerC", answerC);//选项C
							map_d.put("answerD", answerD);//选项D
							map_d.put("answerE", answerE);//选项E
							map_d.put("answerF", answerF);//选项F
							String queAnswer = lq.getQueAnswer();
							//需要匹配出选项
							String[] answerQueArr = queAnswer.split(",");
							String queAnswer_text = "";
							String replaceStr = "Module/commonJs/ueditor/jsp/lore/";
							for(Integer i = 0 ; i < answerQueArr.length ; i++){
								if(answerQueArr[i].equals(answerA.replace(replaceStr,""))){
									queAnswer_text += "A,";
									continue;
								}
								if(answerQueArr[i].equals(answerB.replace(replaceStr,""))){
									queAnswer_text += "B,";
									continue;
								}
								if(answerQueArr[i].equals(answerC.replace(replaceStr,""))){
									queAnswer_text += "C,";
									continue;
								}
								if(answerQueArr[i].equals(answerD.replace(replaceStr,""))){
									queAnswer_text += "D,";
									continue;
								}
								if(answerQueArr[i].equals(answerE.replace(replaceStr,""))){
									queAnswer_text += "E,";
									continue;
								}
								if(answerQueArr[i].equals(answerF.replace(replaceStr,""))){
									queAnswer_text += "F,";
									continue;
								}
							}
							if(!queAnswer_text.equals("")){
								queAnswer_text = queAnswer_text.substring(0, queAnswer_text.length() - 1);
							}
							map_d.put("lqAnswer", queAnswer_text);
							map_d.put("lqResolution", lq.getQueResolution());
							list_d.add(map_d);
						}
					}
					if(tqList.size() > 0){//老师上传题
						msg = "success";
						for(TeaQueInfo tq : tqList){
							Map<String,Object> map_d = new HashMap<String,Object>();
							map_d.put("lqId", tq.getId());
							map_d.put("queType", "tea");//sys,hw,tea
							map_d.put("lqType", tq.getQueType());
							map_d.put("lqTitle", tq.getQueTitle());
							map_d.put("lqSub", tq.getQueSub());
							map_d.put("lqAnswer", tq.getQueAnswer());
							map_d.put("lqResolution", tq.getQueResolution());
							list_d.add(map_d);
						}
					}
					if(msg.equals("success")){
						map.put("lqList", list_d);
					}
				}
			}
		}
		map.put("result", msg);
		if(msg.equals("success")){
			map.put("classIdStr", classIdStr);
			String classNameStr = "";
			String[] classIdArr = classIdStr.split(",");
//			List<Object> list_d = new ArrayList<Object>();
			for(int i = 0 ; i <  classIdArr.length; i++){
				Integer classId = Integer.parseInt(classIdArr[i]);
				List<ClassInfo> cList = cm.listClassInfoById(classId);
				if(cList.size() > 0){
					ClassInfo c = cList.get(0);
					String buildeClassDate = c.getBuildeClassDate();
					String gradeName = Convert.dateConvertGradeName(buildeClassDate);//当前所在的年级
//					Map<String,Object> map_d = new HashMap<String,Object>();
//					map_d.put("classId", c.getId());
//					map_d.put("className", gradeName+c.getClassName());
//					list_d.add(map_d);
					classNameStr += gradeName+c.getClassName() + ",";
				}
			}
			map.put("classNameStr", classNameStr.substring(0, classNameStr.length() - 1));
//			map.put("classList", list_d);
			map.put("hwType", hwType);
			map.put("loreId", loreId);
			map.put("endDate", CurrentTime.getStringDate());
		}
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 老师发送作业(老师发布作业)
	 * 如果hwType为家庭作业时lqIdStr格式为lqId1:hw,lqId2:hw,......
	 * 如果hwType为课前/后作业时lqIdStr格式为lqId1:tea,lqId2:tea,lqId3:sys,lqId4:sys......
	 * @author wm
	 * @date 2019-8-6 上午10:30:11
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward sendHw(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		LoreInfoManager lm = (LoreInfoManager)AppFactory.instance(null).getApp(Constants.WEB_LORE_INFO);
		SendHwManager swm = (SendHwManager)AppFactory.instance(null).getApp(Constants.WEB_SEND_HW_INFO);
		UserClassInfoManager ucm = (UserClassInfoManager) AppFactory.instance(null).getApp(Constants.WEB_USER_CLASS_INFO);
		ClassInfoManager cm = (ClassInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CLASS_INFO);
		HwStudyTjManager tjm = (HwStudyTjManager) AppFactory.instance(null).getApp(Constants.WEB_HW_STUDY_TJ_INFO);
		HwStudyDetailManager hsdm = (HwStudyDetailManager) AppFactory.instance(null).getApp(Constants.WEB_HW_STUDY_DETAIL_INFO);
		Integer currUserId = CommonTools.getLoginUserId(request);
		String classIdStr = CommonTools.getFinalStr("classId", request);//多个逗号隔开
		Integer hwType = CommonTools.getFinalInteger("hwType", request);//作业类型1-家庭作业,2-课后复习,3-课前预习
		Integer loreId = CommonTools.getFinalInteger("loreId", request);//之前选中的的知识点编号
		String lqIdStr = CommonTools.getFinalStr("lqId", request);//多个逗号隔开
		String endDate = CommonTools.getFinalStr("endDate", request);//截止日期
		Integer traceStatus = CommonTools.getFinalInteger("traceStatus", request);//溯源标记-0(不溯源),1(溯源)
		Integer subId = 0;
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "error";
		if(currUserId > 0 && !classIdStr.equals("") && hwType > 0 && loreId > 0 && !lqIdStr.equals("")){
			if(ucm.getEntityByOpt(currUserId, Constants.TEA_ROLE_ID) != null){//必须是班内老师才能发送
				msg = "success";
				String[] lqIdArr = lqIdStr.split(",");
				String[] classIdArr = classIdStr.split(",");
				subId = lm.getEntityById(loreId).getChapter().getEducation().getGradeSubject().getSubject().getId();
				String hwTypeChi = "";
				if(hwType.equals(1)){
					hwTypeChi = "家庭作业";
				}else if(hwType.equals(2)){
					hwTypeChi = "课后复习";
				}else if(hwType.equals(3)){
					hwTypeChi = "课前预习";
				}
				String sysQueIdArr = "";
				String hwQueIdArr = "";
				String teaQueIdArr = "";
				String queIdStr = "";
				String queAreaStr = "";
				for(int j = 0 ; j < lqIdArr.length ; j++){
					String lqId = lqIdArr[j].split(":")[0];
					String queArea = lqIdArr[j].split(":")[1];
					queIdStr += lqId + ",";
					queAreaStr += queArea + ",";
					if(queArea.equals("hw")){
						hwQueIdArr += lqId + ",";
					}else if(queArea.equals("sys")){
						sysQueIdArr += lqId + ",";
					}else if(queArea.equals("tea")){
						teaQueIdArr += lqId + ",";
					}
				}
				if(!queIdStr.equals("") && !queAreaStr.equals("")){
					queIdStr = queIdStr.substring(0, queIdStr.length() - 1);
					queAreaStr = queAreaStr.substring(0, queAreaStr.length() - 1);
				}
				Integer allNum = 0;
				if(!sysQueIdArr.equals("")){
					sysQueIdArr = sysQueIdArr.substring(0, sysQueIdArr.length() - 1);
					allNum += sysQueIdArr.split(",").length;
				}
				if(!hwQueIdArr.equals("")){
					hwQueIdArr = hwQueIdArr.substring(0, hwQueIdArr.length() - 1);
					allNum += hwQueIdArr.split(",").length;
				}
				if(!teaQueIdArr.equals("")){
					teaQueIdArr = teaQueIdArr.substring(0, teaQueIdArr.length() - 1);
					allNum += teaQueIdArr.split(",").length;
				}
//				swm.listPageInfoByOpt(currUserId, classId, hwType, checkStatus, inUse, sDate, eDate, false, 0, 0);
				for(int i = 0 ; i < classIdArr.length ; i++){
					Integer classId = Integer.parseInt(classIdArr[i]);
					List<ClassInfo> cList = cm.listClassInfoById(classId);
					if(cList.size() > 0){
						ClassInfo c = cList.get(0);
						String buildeClassDate = c.getBuildeClassDate();
						String gradeName = Convert.dateConvertGradeName(buildeClassDate);//当前所在的年级
						String className = gradeName+c.getClassName();
						//step:1增加指定班级的发送家庭作业记录
						Integer hwSendId = swm.addSendHw(currUserId, CurrentTime.getStringDate().substring(5, 10)+hwTypeChi, loreId, classId, className, subId, endDate, hwType, sysQueIdArr, hwQueIdArr, teaQueIdArr, 0, traceStatus);
						if(hwSendId > 0){
							//获取该班级所有学生
							List<UserClassInfo> ucList = ucm.listUcInfoByOpt(classId, Constants.STU_ROLE_ID, 1, 10000);
							if(ucList.size() > 0){
								String stuIdStr = "";
								for(UserClassInfo uc : ucList){
									stuIdStr += uc.getUser().getId() + ",";
								}
								//step:2增加家庭作业统计表数据
								tjm.addBatchHwStudyTj(hwSendId, stuIdStr, allNum);
								//获取指定班级指定发送编号的发送记录列表
								List<HwStudyTjInfo> tjList = tjm.listInfoByOpt(hwSendId, 0, -1, false, 0, 0);
								if(tjList.size() > 0){
									for(HwStudyTjInfo tj : tjList){
										//step:3增加家庭作业做题记录表
										hsdm.addBatchHWSD(tj.getId(), queIdStr, queAreaStr);
									}
								}
							}
						}
					}
				}
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 检查作业
	 * @author wm
	 * @date 2019-8-16 上午09:39:47
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward checkHw(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		SendHwManager swm = (SendHwManager)AppFactory.instance(null).getApp(Constants.WEB_SEND_HW_INFO);
		Integer sendHwId = CommonTools.getFinalInteger("hwSendId", request);
		Integer currRoleId = CommonTools.getLoginRoleId(request);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "error";
		if(sendHwId > 0 && currRoleId.equals(Constants.TEA_ROLE_ID)){
			SendHwInfo hw = swm.getEntityById(sendHwId);
			if(hw != null){
				if(hw.getCheckStatus().equals(0)){
					swm.updateCheckInfoById(sendHwId);
					msg = "success";
				}
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 导向家庭作业报告页面
	 * @author wm
	 * @date 2019-8-7 上午08:42:01
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward goHwReportPage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		return mapping.findForward("hwReportPage");
	}
	
	/**
	 * 获取指定班级的家庭作业报告数据
	 * noInfo时为全部无记录
	 * success时部分有记录，（specDate为空时）初始进来时，判断unComUserList_eDate有无，存在则获取，不存在则获取userList
	 * 当点击横坐标指定日期时（specDate不为空时），判断unComUserList_specDate有无，存在则获取，不存在则获取userList
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getHwReportData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		SendHwManager swm = (SendHwManager)AppFactory.instance(null).getApp(Constants.WEB_SEND_HW_INFO);
		HwStudyTjManager tjm = (HwStudyTjManager) AppFactory.instance(null).getApp(Constants.WEB_HW_STUDY_TJ_INFO);
		UserClassInfoManager ucm = (UserClassInfoManager) AppFactory.instance(null).getApp(Constants.WEB_USER_CLASS_INFO);
		String eDate  = CommonTools.getFinalStr("endDate", request);//时间控件的日期
		String sDate = "";
		Integer classId = CommonTools.getFinalInteger("classId", request);
		Integer hwType = CommonTools.getFinalInteger("hwType", request);//作业类型(1-家庭作业,2-课后复习,3-课前预习)
		String specDate = CommonTools.getFinalStr("specDate", request);//点击横坐标的日期
		Integer currUserId = CommonTools.getLoginUserId(request);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "error";
		Integer stuNum = 0;
		//获取当前老师所在的班级任课信息
		Integer subId = ucm.getEntityByOpt(currUserId, Constants.TEA_ROLE_ID).getSubjectId();
		//获取指定班级指定时间的作业
		if(classId > 0 && currUserId > 0 && subId > 0){
			msg = "success";
			if(eDate.equals("")){
				eDate = CurrentTime.getStringDate();
			}
			sDate = CurrentTime.getFinalDate(eDate, -2);//获取最近2天的时间
			if(hwType.equals(0)){
				hwType = 1;
			}
			//统计3天的信息
			List<SendHwInfo> sendList = swm.listPageInfoByOpt(0, subId, classId, hwType, -1, 0, sDate, eDate, false, 0, 0);
			String axisNameStr = sDate + ",";//xAxis-data
			axisNameStr += CurrentTime.getFinalDate(eDate, -1) + ",";
			axisNameStr += eDate;
			String[] axisNameArr = {axisNameStr.split(",")[0],axisNameStr.split(",")[1],axisNameStr.split(",")[2]};
			Integer[] zsNumArr = {0,0,0};
			Integer[] bzNumArr = {0,0,0};
			Integer[] unNumArr = {0,0,0};
			Integer sendHwSize = sendList.size();
			List<Object> list_zs = new ArrayList<Object>();
			List<Object> list_bz = new ArrayList<Object>();
			List<Object> list_un = new ArrayList<Object>();
			if(sendHwSize > 0){
				for(Integer j = sendHwSize - 1 ; j >= 0 ; j--){
					SendHwInfo shw = sendList.get(j);
					Integer i = -1;
					Integer zsComNum = 0;
					Integer bzComNum = 0;
					Integer unComNum = 0;
					String sendDate = shw.getSendDate().substring(0, 10);
					for(int k = 0 ; k < axisNameArr.length ; k++){
						if(axisNameArr[k].equals(sendDate)){
							i = k;
							break;
						}
					}
					List<HwStudyTjInfo> tjList = tjm.listInfoByOpt(shw.getId(), 0, -1, false, 0, 0);
					stuNum = tjList.size();
					list_zs = new ArrayList<Object>();
					list_bz = new ArrayList<Object>();
					list_un = new ArrayList<Object>();
					if(stuNum > 0){
						for(HwStudyTjInfo tj : tjList){
							User user = tj.getUser();
							Map<String,Object> map_d_1 = new HashMap<String,Object>();
							Integer comStatus = tj.getComStatus();
							map_d_1.put("userId", user.getId());
							map_d_1.put("userName", user.getRealName());
							map_d_1.put("userPortrait", user.getPortrait());
							map_d_1.put("sendHwId", shw.getId());
							map_d_1.put("comStatus", comStatus);
							map_d_1.put("classId", shw.getClassInfo().getId());
							map_d_1.put("hwType", hwType);//
							if(comStatus.equals(0)){
								unComNum++;
								map_d_1.put("stuComType", "unCom");
								list_un.add(map_d_1);
							}else if(comStatus.equals(1)){
								zsComNum++;
								map_d_1.put("stuComType", "zsCom");
								list_zs.add(map_d_1);
							}else if(comStatus.equals(2)){
								bzComNum++;
								map_d_1.put("stuComType", "bzCom");
								list_bz.add(map_d_1);
							}
						}
						if(i >= 0){//匹配到（写入纵坐标数据）
							zsNumArr[i] = zsComNum;
							bzNumArr[i] = bzComNum;
							unNumArr[i] = unComNum;
							if(specDate.equals("")){
								if(eDate.equals(sendDate)){
									map.put("unComUserList", list_un);
									map.put("zsComUserList", list_zs);
									map.put("bzComUserList", list_bz);
								}
							}else{//点击横坐标日期
								if(specDate.equals(sendDate)){
									map.put("unComUserList", list_un);
									map.put("zsComUserList", list_zs);
									map.put("bzComUserList", list_bz);
								}
							}
						}
					}
				}
				//统计最后一天或者指定横坐标的一天
				List<SendHwInfo> sendList_spec = new ArrayList<SendHwInfo>();
				if(specDate.equals("")){
					sendList_spec = swm.listPageInfoByOpt(0, subId, classId, hwType, -1, 0, eDate, eDate, false, 0, 0);
				}else{
					sendList_spec = swm.listPageInfoByOpt(0, subId, classId, hwType, -1, 0, specDate, specDate, false, 0, 0);
				}
				if(sendList_spec.size() > 0){
					msg = "success";
				}else{
					msg = "noInfo";
				}
			}else{
				msg = "noInfo";
			}
			if(msg.equals("noInfo")){
				List<Object> list_all_stu = new ArrayList<Object>();//所有学生列表
				List<UserClassInfo> ucList = ucm.listInfoByOpt(classId, Constants.STU_ROLE_ID);
				stuNum = ucList.size();
				if(stuNum > 0){
					for(UserClassInfo uc : ucList){
						User user = uc.getUser();
						Map<String,Object> map_d = new HashMap<String,Object>();
						map_d.put("userId", user.getId());
						map_d.put("userName", user.getRealName());
						map_d.put("userPortrait", user.getPortrait());
						map_d.put("sendHwId", 0);
						map_d.put("hwType", hwType);
						map_d.put("comStatus", -1);
						map_d.put("stuComType", "");
						map_d.put("classId", uc.getClassInfo().getId());
						list_all_stu.add(map_d);
					}
				}
				map.put("userList", list_all_stu);
			}
			
//			List<Object> list_all_stu = new ArrayList<Object>();//所有学生列表
//			if(sendHwSize < 3){
//				List<UserClassInfo> ucList = ucm.listInfoByOpt(classId, Constants.STU_ROLE_ID);
//				stuNum = ucList.size();
//				if(stuNum > 0){
//					for(UserClassInfo uc : ucList){
//						User user = uc.getUser();
//						Map<String,Object> map_d = new HashMap<String,Object>();
//						map_d.put("userId", user.getId());
//						map_d.put("userName", user.getRealName());
//						map_d.put("userPortrait", user.getPortrait());
//						map_d.put("sendHwId", 0);
//						map_d.put("hwType", hwType);
//						map_d.put("comStatus", -1);
//						map_d.put("stuComType", "");
//						map_d.put("classId", uc.getClassInfo().getId());
//						list_all_stu.add(map_d);
//					}
//				}
//			}
//			if(sendHwSize > 0){
//				for(Integer j = sendHwSize - 1 ; j >= 0 ; j--){
//					SendHwInfo shw = sendList.get(j);
//					Integer i = -1;
//					Integer zsComNum = 0;
//					Integer bzComNum = 0;
//					Integer unComNum = 0;
//					String sendDate = shw.getSendDate().substring(0, 10);
//					for(int k = 0 ; k < axisNameArr.length ; k++){
//						if(axisNameArr[k].equals(sendDate)){
//							i = k;
//							break;
//						}
//					}
//					List<HwStudyTjInfo> tjList = tjm.listInfoByOpt(shw.getId(), 0, -1, false, 0, 0);
//					stuNum = tjList.size();
//					if(stuNum > 0){
//						List<Object> list_zs = new ArrayList<Object>();
//						List<Object> list_bz = new ArrayList<Object>();
//						List<Object> list_un = new ArrayList<Object>();
//						for(HwStudyTjInfo tj : tjList){
//							User user = tj.getUser();
//							Map<String,Object> map_d_1 = new HashMap<String,Object>();
//							Integer comStatus = tj.getComStatus();
//							map_d_1.put("userId", user.getId());
//							map_d_1.put("userName", user.getRealName());
//							map_d_1.put("userPortrait", user.getPortrait());
//							map_d_1.put("sendHwId", shw.getId());
//							map_d_1.put("comStatus", comStatus);
//							map_d_1.put("classId", shw.getClassInfo().getId());
//							map_d_1.put("hwType", hwType);//
//							if(comStatus.equals(0)){
//								unComNum++;
//								map_d_1.put("stuComType", "unCom");
//								list_un.add(map_d_1);
//							}else if(comStatus.equals(1)){
//								zsComNum++;
//								map_d_1.put("stuComType", "zsCom");
//								list_zs.add(map_d_1);
//							}else if(comStatus.equals(2)){
//								bzComNum++;
//								map_d_1.put("stuComType", "bzCom");
//								list_bz.add(map_d_1);
//							}
//						}
//						if(i >= 0){//匹配到
//							zsNumArr[i] = zsComNum;
//							bzNumArr[i] = bzComNum;
//							unNumArr[i] = unComNum;
//							map.put("unComUserList_"+sendDate, list_un);
//							map.put("zsComUserList_"+sendDate, list_zs);
//							map.put("bzComUserList_"+sendDate, list_bz);
//						}
//					}
//				}
//				if(!sendHwSize.equals(3)){
//					map.put("userList", list_all_stu);
//				}
//			}else{
//				msg = "noInfo";
//				map.put("userList", list_all_stu);
//			}
			map.put("xAxisData", axisNameArr);
			map.put("yAxisZsData", zsNumArr);
			map.put("yAxisBzData", bzNumArr);
			map.put("yAxisUnData", unNumArr);
			map.put("specDate", specDate);
			map.put("endDate", eDate);
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	
	/**
	 * 获取指定学生的家庭作业完成情况列表(老师用)
	 * 在图表页面点击一个学生过来时都传递，当在指定学生记录中切换班级时，默认为第一个学生的记录
	 * @author wm
	 * @date 2019-8-8 上午08:49:06
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getSpecStuStudyData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		UserClassInfoManager ucm = (UserClassInfoManager)AppFactory.instance(null).getApp(Constants.WEB_USER_CLASS_INFO);
		HwStudyTjManager tjm = (HwStudyTjManager) AppFactory.instance(null).getApp(Constants.WEB_HW_STUDY_TJ_INFO);
		UserManager um = (UserManager) AppFactory.instance(null).getApp(Constants.WEB_USER_INFO);
		Integer stuId = CommonTools.getFinalInteger("stuId", request);//指定学生编号
		Integer comStatus = CommonTools.getFinalInteger("comStatus", request);//完成状态--学生记录页面传递
		Integer hwType = CommonTools.getFinalInteger("hwType", request);//作业类型(1-家庭作业,2-课后复习,3-课前预习)
		String sDate = CommonTools.getFinalStr("sDate", request);//开始时间
		String eDate = CommonTools.getFinalStr("eDate", request);//结束时间
		Integer currUserId = CommonTools.getLoginUserId(request);
		Integer pageNo = CommonTools.getFinalInteger("pageNo", request);
		Integer pageSize = CommonTools.getFinalInteger("pageSize", request);
		String stuName = "";
		if(pageSize.equals(0)){
			pageSize = 10;
		}
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "error";
		//获取当前老师所在的班级任课信息
		Integer subId = ucm.getEntityByOpt(currUserId, Constants.TEA_ROLE_ID).getSubjectId();
		if(subId > 0 && stuId > 0){
			List<User> stuList = um.listEntityById(stuId);
			if(stuList.size() > 0){
				stuName = stuList.get(0).getRealName();
			}
			List<HwStudyTjInfo> tjList = tjm.listInfoByOpt_1(hwType,subId, stuId, comStatus, sDate, eDate, true, pageNo, pageSize);
			if(tjList.size() > 0){
				msg = "success";
				List<Object> list_d_hw = new ArrayList<Object>();
				for(HwStudyTjInfo tj : tjList){
					Map<String,Object> map_d = new HashMap<String,Object>();
					SendHwInfo hw = tj.getSendHwInfo();
					map_d.put("tjId", tj.getId());
					map_d.put("loreInfo", hw.getLoreInfo().getLoreName());
					map_d.put("hwTitle", hw.getHwTitle());
					map_d.put("endDate", hw.getEndDate());
					map_d.put("sendDate", hw.getSendDate().substring(0, 10));
					Integer comStatus_db = tj.getComStatus();
					String comStatusChi = "";
					if(comStatus_db.equals(0)){
						comStatusChi = "未完成";
						map_d.put("comDate", tj.getComDate());
					}else if(comStatus_db.equals(1)){
						comStatusChi = "按时完成";
						map_d.put("comDate", tj.getComDate().substring(0, 10));
					}else if(comStatus_db.equals(2)){
						comStatusChi = "补做完成";
						map_d.put("comDate", tj.getComDate().substring(0, 10));
					}
					map_d.put("comStatusChi", comStatusChi);
					list_d_hw.add(map_d);
				}
				map.put("hwList", list_d_hw);
			}else{
				msg = "noInfo";
			}
		}
		map.put("result", msg);
		map.put("stuId", stuId);
		map.put("stuName", stuName);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 获取指定学生的指定家庭作业学习记录
	 * @author wm
	 * @date 2019-8-15 上午11:20:00
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getSpecStuStudyRecordData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		HwStudyDetailManager hsdm = (HwStudyDetailManager) AppFactory.instance(null).getApp(Constants.WEB_HW_STUDY_DETAIL_INFO);
		HwQueManager hqm = (HwQueManager) AppFactory.instance(null).getApp(Constants.WEB_HW_QUE_INFO);
		TeaQueManager tqm = (TeaQueManager) AppFactory.instance(null).getApp(Constants.WEB_TEA_QUE_INFO);
		LoreQuestionManager lqm = (LoreQuestionManager)AppFactory.instance(null).getApp(Constants.WEB_LORE_QUESTION_INFO);
		HwMindRelationManager hmrm = (HwMindRelationManager) AppFactory.instance(null).getApp(Constants.WEB_HW_MIND_RELATION_INFO);
		HwAbilityRelationManager harm = (HwAbilityRelationManager) AppFactory.instance(null).getApp(Constants.WEB_HW_ABILITY_RELATION_INFO);
		Integer tjId = CommonTools.getFinalInteger("tjId", request);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "error";
		if(tjId > 0){
			List<HwStudyDetailInfo> hwsdList = hsdm.listInfoByOpt(0, tjId, 0, "");
			if(hwsdList.size() > 0){
				msg = "success";
				List<Object> list_d = new ArrayList<Object>();
				for(HwStudyDetailInfo hsd : hwsdList){
					Map<String,Object> map_d = new HashMap<String,Object>();
					String queArea = hsd.getQueArea();//hw,sys,tea
					Integer queId = hsd.getQueId();
					map_d.put("lqId", queId);
					String myAnswer = hsd.getMyAnswer();
					Integer result = hsd.getResult();
					if(queArea.equals("hw")){//没有填空题和问答题
						HwQueInfo hq = hqm.getEntityById(queId);
						String mindStr = "";
						String abilityStr = "";
						List<HwMindRelationInfo> hmrList = hmrm.listInfoByOpt(0, hq.getId());
						for(HwMindRelationInfo hmr : hmrList){
							mindStr += hmr.getBuffetMindTypeInfo().getMind() + "、";
						}
						if(!mindStr.equals("")){
							mindStr = mindStr.substring(0, mindStr.length() - 1);
						}
						List<HwAbilityRelationInfo>  harList = harm.listInfoByOpt(0, hq.getId());
						for(HwAbilityRelationInfo har : harList){
							abilityStr += har.getBuffetAbilityTypeInfo().getAbility() + "、";
						}
						if(!abilityStr.equals("")){
							abilityStr = abilityStr.substring(0, abilityStr.length() - 1);
						}
						map_d.put("btName", hq.getBuffetTypeInfo().getTypes());
						map_d.put("mindStr", mindStr);
						map_d.put("abilityStr", abilityStr);
						map_d.put("queSub", hq.getSubject());
						map_d.put("lqType", hq.getQueType());
						String realAnswer = hq.getAnswer();
						if(result >= 0){//做完题后才出正确答案
							map_d.put("realAnswer", realAnswer);
						}
						map_d.put("result", result);//-1：未做,0:错,1:对
//						String queType = hq.getQueType();
//						if(queType.equals("多选题")){//多选题顺序可以要求不一样
//							String[] myAnserArray = myAnswer.split(",");
//							String[] realAnswerArray = realAnswer.split(",");
//							String newMyAnswer = CommonTools.arraySort(myAnserArray);//排序后我的答案
//							String newRealAnswer = CommonTools.arraySort(realAnswerArray);//排序后后台正确答案
//							if(newMyAnswer.equals(newRealAnswer)){
//								map_d.put("result", 1);//正确
//							}else{
//								map_d.put("result", 0);//错误
//							}
//						}else{//顺序必须要求一样
//							if(myAnswer.equals(realAnswer)){
//								map_d.put("result", 1);//正确
//							}else{
//								map_d.put("result", 0);//错误
//							}
//						}
					}else if(queArea.equals("sys")){
						LoreQuestion lq = lqm.getEntityByLqId(queId);
						map_d.put("queSub", lq.getQueSub());
						map_d.put("answerA", lq.getA());
						map_d.put("answerB", lq.getB());
						map_d.put("answerC", lq.getC());
						map_d.put("answerD", lq.getD());
						map_d.put("answerE", lq.getE());
						map_d.put("answerF", lq.getF());
						map_d.put("lqType", lq.getQueType());
						String realAnswer = lq.getQueAnswer();
						if(result >= 0){//做完题后才出正确答案
							map_d.put("realAnswer", realAnswer);
						}
						map_d.put("result", result);//-1：未做,0:错,1:对
//						String[] dataBaseAnswerArray = realAnswer.split(",");
//						String[] myAnswerArray = myAnswer.split(",");
//						String dataBaseAnswerChar = "";
//						for(int j = 0; j < dataBaseAnswerArray.length; j++){
//							for(int i = 0; i < myAnswerArray.length; i++){
//								String answerOption = myAnswerArray[i];
//								if(answerOption.indexOf("Module/commonJs/ueditor/jsp/lore") >= 0){
//									//表示答案选项是图片--截取前面的路径
//									answerOption = answerOption.replace("Module/commonJs/ueditor/jsp/lore/", "");
//								}
//								if(dataBaseAnswerArray[j].equals(answerOption)){
//									dataBaseAnswerChar += Convert.NumberConvertBigChar(i)+",";
//									break;
//								}
//							}
//						}
//						dataBaseAnswerChar = dataBaseAnswerChar.substring(0, dataBaseAnswerChar.length() - 1);
//						if(queType.equals("多选题")){//多选题顺序可以要求不一样
//							String[] myAnserArray = myAnswer.split(",");
//							String[] realAnswerArray = realAnswer.split(",");
//							String newMyAnswer = CommonTools.arraySort(myAnserArray);//排序后我的答案
//							String newRealAnswer = CommonTools.arraySort(realAnswerArray);//排序后后台正确答案
//							if(newMyAnswer.equals(newRealAnswer)){
//								map_d.put("result", 1);//正确
//							}else{
//								map_d.put("result", 0);//错误
//							}
//						}else if(queType.equals("问答题") || queType.equals("填空题")){
//							if(myAnswer.indexOf("正确") >= 0){
//								map_d.put("result", 1);//正确
//							}else{
//								map_d.put("result", 0);//错误
//							}
//						}else{//顺序必须要求一样
//							if(myAnswer.equals(realAnswer)){
//								map_d.put("result", 1);//正确
//							}else{
//								map_d.put("result", 0);//错误
//							}
//						}
					}else if(queArea.equals("tea")){
						TeaQueInfo tq = tqm.getEntityById(queId);
						map_d.put("queSub", tq.getQueSub());
						map_d.put("lqType", tq.getQueType());
						String realAnswer = tq.getQueAnswer();
						if(result >= 0){//做完题后才出正确答案
							map_d.put("realAnswer", realAnswer);
						}
						map_d.put("result", result);//-1：未做,0:错,1:对
					}
					if(result >= 0){//做完题后才出正确答案
						map_d.put("myAnswer", myAnswer);
					}
					map_d.put("queArea", queArea);
					list_d.add(map_d);
				}
				map.put("studyList", list_d);
			}else{
				msg = "noInfo";
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 获取自己的家庭作业列表（学生）
	 * @author wm
	 * @date 2019-8-15 下午04:39:24
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getSelfHwData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		HwStudyTjManager tjm = (HwStudyTjManager) AppFactory.instance(null).getApp(Constants.WEB_HW_STUDY_TJ_INFO);
		Integer currUserId = CommonTools.getLoginUserId(request);
		Integer pageNo = CommonTools.getFinalInteger("pageNo", request);
		Integer pageSize = CommonTools.getFinalInteger("pageSize", request);
		if(pageSize.equals(0)){
			pageSize = 10;
		}
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "error";
		String currDate = CurrentTime.getStringDate();
		if(currUserId > 0){
			msg = "success";
			List<Object> list_d_1 = new ArrayList<Object>();
			List<Object> list_d_2 = new ArrayList<Object>();
			//step1:获取今日作业
			List<HwStudyTjInfo> tjList_1 = tjm.listInfoByOpt_1(0, 0, currUserId, -1, currDate, currDate, false, 0, 0);
			if(tjList_1.size() > 0){
				for(HwStudyTjInfo tj : tjList_1){
					Map<String,Object> map_d = new HashMap<String,Object>();
					SendHwInfo hw = tj.getSendHwInfo();
					map_d.put("tjId", tj.getId());
					map_d.put("loreName", hw.getLoreInfo().getLoreName());
					map_d.put("subName", hw.getSubject().getSubName());
					map_d.put("teaName", hw.getUser().getRealName());
					map_d.put("comStatus", tj.getComStatus());//作业完成状态0-未完成，1-按时完成，2-补做完成
					Integer hwType = hw.getHwType();
					String hwTypeChi = "";
					if(hwType.equals(1)){
						hwTypeChi = "家庭作业";
					}else if(hwType.equals(2)){
						hwTypeChi = "课后复习";
					}else if(hwType.equals(3)){
						hwTypeChi = "课前预习";
					}
					map_d.put("hwType", hwType);//课前预习会进入听说读写页面，完成后再进入题库页面
					map_d.put("hwTypeChi", hwTypeChi);
					list_d_1.add(map_d);
				}
			}
			map.put("currHwList", list_d_1);
			//step2:获取历史作业
			List<HwStudyTjInfo> tjList_2 = tjm.listInfoByOpt_2(0, 0, currUserId, -1, pageNo, pageSize);
			if(tjList_2.size() > 0){
				for(HwStudyTjInfo tj : tjList_2){
					Map<String,Object> map_d = new HashMap<String,Object>();
					SendHwInfo hw = tj.getSendHwInfo();
					map_d.put("tjId", tj.getId());
					map_d.put("loreName", hw.getLoreInfo().getLoreName());
					map_d.put("sendDate", hw.getSendDate().substring(0, 10));
					map_d.put("endDate", hw.getEndDate());
					map_d.put("comStatus", tj.getComStatus());//作业完成状态0-未完成，1-按时完成，2-补做完成
					map_d.put("comDate", tj.getComDate().substring(0, 10));
					map_d.put("subName", hw.getSubject().getSubName());
					map_d.put("teaName", hw.getUser().getRealName());
					Integer hwType = hw.getHwType();
					String hwTypeChi = "";
					if(hwType.equals(1)){
						hwTypeChi = "家庭作业";
					}else if(hwType.equals(2)){
						hwTypeChi = "课后复习";
					}else if(hwType.equals(3)){
						hwTypeChi = "课前预习";
					}
					map_d.put("hwType", hwType);//课前预习会进入听说读写页面，完成后再进入题库页面
					map_d.put("hwTypeChi", hwTypeChi);
					list_d_2.add(map_d);
				}
			}
			map.put("preHwList", list_d_2);
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 获取听说读写内容(课前预习需要先进入)
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getSourceDetail(ActionMapping mapping ,ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		HwStudyTjManager tjm = (HwStudyTjManager) AppFactory.instance(null).getApp(Constants.WEB_HW_STUDY_TJ_INFO);
		LoreInfoManager lm = (LoreInfoManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_INFO);
		LoreQuestionManager lqm = (LoreQuestionManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_QUESTION_INFO);
		StudyMapManager smm = (StudyMapManager)AppFactory.instance(null).getApp(Constants.WEB_STUDY_MAP_INFO);
		Integer tjId = CommonTools.getFinalInteger("tjId", request);
		Integer currUserId = CommonTools.getLoginUserId(request);
		String loreTypeName = Transcode.unescape_new1("loreTypeName", request);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "error";
		if(tjId > 0 && currUserId > 0){
			HwStudyTjInfo tj = tjm.getEntityById(tjId);
			if(tj != null){
				Integer loreId = tj.getSendHwInfo().getLoreInfo().getId();//发布家庭作业时的知识点编号
				Integer quoteLoreId = lm.getEntityById(loreId).getMainLoreId();
				List<LoreQuestion> lqList = lqm.listInfoByLoreId(quoteLoreId, loreTypeName, 0);
				if(lqList.size() > 0){
					msg = "success";
					List<StudyMapInfo> smList = smm.listInfoByOpt(currUserId, loreId);
					if(smList.size() > 0){//存在学习记录
						StudyMapInfo sm = smList.get(0);
						Integer currStep = sm.getCurrStep();
						if(currStep.equals(0)){
							if(loreTypeName.equals("知识讲解")){
								smm.updateStepById(sm.getId(), 1);
							}else{
								msg = "zsjjNotStart";
							}
						}else if(currStep.equals(1)){
							if(loreTypeName.equals("点拨指导")){
								smm.updateStepById(sm.getId(), 2);
							}else if(loreTypeName.equals("知识讲解")){
								//知识讲解能点开，但是不更新层数
							}else{
								msg = "dbzdNotStart";
							}
						}else if(currStep.equals(2)){
							if(loreTypeName.equals("知识清单")){
								smm.updateStepById(sm.getId(), 3);
							}else if(loreTypeName.equals("知识讲解") || loreTypeName.equals("点拨指导")){
								//知识讲解,点拨指导都能点开，但是不更新层数
							}else{//解题示范不能点开
								msg = "zsqdNotStart";
							}
						}else if(currStep.equals(3)){
							if(loreTypeName.equals("解题示范")){
								smm.updateStepById(sm.getId(), 4);
							}
							//其他都能打开
						}
					}else{
						smm.addSM(currUserId, loreId, 1);
					}
					if(msg.equals("success")){
						if(loreTypeName.equals("知识讲解")){
							String sourceDetail = lqList.get(0).getQueAnswer();
							if(!sourceDetail.equals("")){
								map.put("sourceDetail", sourceDetail);
							}else{
								msg = "noInfo";
							}
						}else if(loreTypeName.equals("点拨指导") || loreTypeName.equals("知识清单")){
							Integer lqId = lqList.get(0).getId();
							List<LoreQuestionSubInfo> lqsList = lqm.listLQSInfoByLqId(lqId,"");
							if(lqsList.size() > 0){
								List<Object> list_d = new ArrayList<Object>();
								for(LoreQuestionSubInfo lqs : lqsList){
									String loreType = lqs.getLoreTypeName();
									Map<String,Object> map_d = new HashMap<String,Object>();
									map_d.put("loreType", loreType);
									map_d.put("lqsTitle", lqs.getLqsTitle());
									map_d.put("lqsContent", lqs.getLqsContent());
									list_d.add(map_d);
								}
								map.put("sourceDetailList", list_d);
							}else{
								msg = "noInfo";
							}
						}else if(loreTypeName.equals("解题示范")){
							List<Object> list_d = new ArrayList<Object>();
							for(LoreQuestion lq : lqList){
								Map<String,Object> map_d = new HashMap<String,Object>();
								map_d.put("lqId", lq.getId());
								map_d.put("queTitle", lq.getQueTitle());
								map_d.put("queSub", lq.getQueSub());
								map_d.put("queAnswer", lq.getQueAnswer());
								map_d.put("queResolution", lq.getQueResolution());
								list_d.add(map_d);
							}
							map.put("sourceDetailList", list_d);
						}
					}
				}
			}
		}
		map.put("result", msg);
		if(msg.equals("success")){
			map.put("tjId", tjId);
		}
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 获取作业题库列表数据
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getHwQuestion(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		HwStudyDetailManager hsdm = (HwStudyDetailManager) AppFactory.instance(null).getApp(Constants.WEB_HW_STUDY_DETAIL_INFO);
		HwQueManager hqm = (HwQueManager) AppFactory.instance(null).getApp(Constants.WEB_HW_QUE_INFO);
		TeaQueManager tqm = (TeaQueManager) AppFactory.instance(null).getApp(Constants.WEB_TEA_QUE_INFO);
		LoreQuestionManager lqm = (LoreQuestionManager)AppFactory.instance(null).getApp(Constants.WEB_LORE_QUESTION_INFO);
		Integer tjId = CommonTools.getFinalInteger("tjId", request);
		Integer currUserId = CommonTools.getLoginUserId(request);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "error";
		if(tjId > 0 && currUserId > 0){
			List<HwStudyDetailInfo> hsdList = hsdm.listInfoByOpt(0, tjId, 0, "");
			if (hsdList.size() > 0) {
				msg = "success";
				List<Object> list_d = new ArrayList<Object>();
				for(HwStudyDetailInfo hsd : hsdList){
					Map<String,Object> map_d = new HashMap<String,Object>();
					String queArea = hsd.getQueArea();//hw,sys,tea
					Integer hsdId = hsd.getQueId();
					map_d.put("hsdId", hsdId);
					map_d.put("queArea", queArea);
					String myAnswer = hsd.getMyAnswer();
					Integer result = hsd.getResult();
					if(queArea.equals("hw")){//没有填空题和问答题
						HwQueInfo hq = hqm.getEntityById(hsdId);
						map_d.put("queSub", hq.getSubject());
						String lqType = hq.getQueType();
						map_d.put("lqType", lqType);
						if(result >= 0){//做完题
							map_d.put("myAnswer", myAnswer);
							map_d.put("realAnswer", hq.getAnswer());
							map_d.put("lqResolution", hq.getResolution());
						}else{
							if(lqType.equals("单选题") || lqType.equals("多选题") || lqType.equals("判断题")){
								map_d.put("answerNum", 1);
							}else{//填空选择题
								map_d.put("answerNum", hq.getAnswer().split(",").length);
							}
						}
						map_d.put("studyResult", result);//-1：未做,0:错,1:对
					}else if(queArea.equals("sys")){
						LoreQuestion lq = lqm.getEntityByLqId(hsdId);
						map_d.put("queSub", lq.getQueSub());
						String lqType = lq.getQueType();
						map_d.put("lqType", lqType);
						map_d.put("answerA", lq.getA());
						map_d.put("answerB", lq.getB());
						map_d.put("answerC", lq.getC());
						map_d.put("answerD", lq.getD());
						map_d.put("answerE", lq.getE());
						map_d.put("answerF", lq.getF());
						if(result >= 0){//做完题后才出正确答案
							map_d.put("myAnswer", myAnswer);
							map_d.put("realAnswer", lq.getQueAnswer());
							map_d.put("lqResolution", lq.getQueResolution());
						}else{
							if(lqType.equals("单选题") || lqType.equals("多选题") || lqType.equals("判断题") || lqType.equals("填空题") || lqType.equals("问答题")){
								map_d.put("answerNum", 1);
							}else{//填空选择题
								map_d.put("answerNum", lq.getQueAnswer().split(",").length);
							}
						}
						map_d.put("studyResult", result);//-1：未做,0:错,1:对
					}else if(queArea.equals("tea")){
						TeaQueInfo tq = tqm.getEntityById(hsdId);
						map_d.put("queSub", tq.getQueSub());
						String lqType = tq.getQueType();
						map_d.put("lqType", lqType);
						if(result >= 0){//做完题后才出正确答案
							map_d.put("myAnswer", myAnswer);
							map_d.put("realAnswer", tq.getQueAnswer());
							map_d.put("lqResolution", tq.getQueResolution());
						}else{
							if(lqType.equals("单选题") || lqType.equals("多选题") || lqType.equals("判断题")){
								map_d.put("answerNum", 1);
							}else{//填空选择题
								map_d.put("answerNum", tq.getQueAnswer().split(",").length);
							}
						}
						map_d.put("studyResult", result);//-1：未做,0:错,1:对
					}
					list_d.add(map_d);
				}
				map.put("hwList", list_d);
			}else{
				msg = "noInfo";
			}
		}
		map.put("result", msg);
		if(msg.equals("success")){
			map.put("tjId", tjId);
		}
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 修改做题错误/正确信息
	 * @author wm
	 * @date 2019-8-16 下午06:34:16
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward updateHwStudyDetail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		HwQueManager hqm = (HwQueManager) AppFactory.instance(null).getApp(Constants.WEB_HW_QUE_INFO);
		TeaQueManager tqm = (TeaQueManager) AppFactory.instance(null).getApp(Constants.WEB_TEA_QUE_INFO);
		LoreQuestionManager lqm = (LoreQuestionManager)AppFactory.instance(null).getApp(Constants.WEB_LORE_QUESTION_INFO);
		HwStudyDetailManager hsdm = (HwStudyDetailManager) AppFactory.instance(null).getApp(Constants.WEB_HW_STUDY_DETAIL_INFO);
		HwStudyTjManager tjm = (HwStudyTjManager) AppFactory.instance(null).getApp(Constants.WEB_HW_STUDY_TJ_INFO);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "error";
		Integer currUserId = CommonTools.getLoginUserId(request);
		Integer hsdId = CommonTools.getFinalInteger("hsdId", request);
		String myAnswer = CommonTools.getFinalStr("myAnswer", request);
		if(hsdId > 0  &&  !myAnswer.equals("")){
			HwStudyDetailInfo hsd = hsdm.getEntityById(hsdId);
			if(hsd != null && hsd.getResult().equals(-1)){//未做的才能进入
				Integer lqId = hsd.getQueId();
				String queArea = hsd.getQueArea();//题库范围（hw,sys,tea）
				HwStudyTjInfo tj = hsd.getHwStudyTjInfo();
				if(tj.getUser().getId().equals(currUserId)){
					if(tj.getComStatus().equals(0)){
						if(hsd.getResult().equals(-1)){//该题没做才能继续做题
							if(queArea.equals("hw")){
								HwQueInfo hq = hqm.getEntityById(lqId);
								if(hq != null){
									String realAnswer = hq.getAnswer();
									String lqType = hq.getQueType();
									Integer result = -1;
									Integer succNum = 0;
									Integer errorNum = 0;
									if(lqType.equals("多选题")){//无序
										String[] myAnserArray = myAnswer.split(",");
										String[] realAnswerArray = realAnswer.split(",");
										String newMyAnswer = CommonTools.arraySort(myAnserArray);//排序后我的答案
										String newRealAnswer = CommonTools.arraySort(realAnswerArray);//排序后后台正确答案
										if(newMyAnswer.equals(newRealAnswer)){
											result = 1;//正确
											succNum = 1;
										}else{
											result = 0;//错误
											errorNum = 1;
										}
									}else{//顺序必须要求一样
										if(myAnswer.equals(realAnswer)){
											result = 1;//正确
											succNum = 1;
										}else{
											result = 0;//错误
											errorNum = 1;
										}
									}
									hsdm.updateInfoById(hsdId, myAnswer, result);
									tjm.updateInfoById(tj.getId(), 0, succNum, errorNum);
									msg = "success";
								}
							}else if(queArea.equals("sys")){
								LoreQuestion lq = lqm.getEntityByLqId(lqId);
								if(lq != null){
									String realAnswer = lq.getQueAnswer();
									String lqType = lq.getQueType();
									Integer result = -1;
									Integer succNum = 0;
									Integer errorNum = 0;
									if(lqType.equals("多选题")){//无序
										String[] myAnserArray = myAnswer.split(",");
										String[] realAnswerArray = realAnswer.split(",");
										String newMyAnswer = CommonTools.arraySort(myAnserArray);//排序后我的答案
										String newRealAnswer = CommonTools.arraySort(realAnswerArray);//排序后后台正确答案
										if(newMyAnswer.equals(newRealAnswer)){
											result = 1;//正确
											succNum = 1;
										}else{
											result = 0;//错误
											errorNum = 1;
										}
									}else if(lqType.equals("问答题") || lqType.equals("填空题")){
										if(myAnswer.indexOf("正确") >= 0){
											result = 1;
											succNum = 1;
										}else{
											result = 0;
											errorNum = 1;
										}
									}else{//顺序必须要求一样
										if(myAnswer.equals(realAnswer)){
											result = 1;//正确
											succNum = 1;
										}else{
											result = 0;//错误
											errorNum = 1;
										}
									}
									hsdm.updateInfoById(hsdId, myAnswer, result);
									tjm.updateInfoById(tj.getId(), 0, succNum, errorNum);
									msg = "success";
								}
							}else if(queArea.equals("tea")){
								TeaQueInfo tq = tqm.getEntityById(lqId);
								if(tq != null){
									String realAnswer = tq.getQueAnswer();
									String lqType = tq.getQueType();
									Integer result = -1;
									Integer succNum = 0;
									Integer errorNum = 0;
									if(lqType.equals("多选题")){//无序
										String[] myAnserArray = myAnswer.split(",");
										String[] realAnswerArray = realAnswer.split(",");
										String newMyAnswer = CommonTools.arraySort(myAnserArray);//排序后我的答案
										String newRealAnswer = CommonTools.arraySort(realAnswerArray);//排序后后台正确答案
										if(newMyAnswer.equals(newRealAnswer)){
											result = 1;//正确
											succNum = 1;
										}else{
											result = 0;//错误
											errorNum = 1;
										}
									}else{//顺序必须要求一样
										if(myAnswer.equals(realAnswer)){
											result = 1;//正确
											succNum = 1;
										}else{
											result = 0;//错误
											errorNum = 1;
										}
									}
									hsdm.updateInfoById(hsdId, myAnswer, result);
									tjm.updateInfoById(tj.getId(), 0, succNum, errorNum);
									msg = "success";
								}
							}
						}
					}
				}
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 修改家庭作业做题统计表完成状态(设置为补做完成或者按时完成)
	 * @author wm
	 * @date 2019-8-16 下午05:18:25
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward updateHwTjStatus(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		HwStudyTjManager tjm = (HwStudyTjManager) AppFactory.instance(null).getApp(Constants.WEB_HW_STUDY_TJ_INFO);
		Integer tjId = CommonTools.getFinalInteger("tjId", request);
		Integer currUserId = CommonTools.getLoginUserId(request);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "error";
		if(tjId > 0 && currUserId > 0){
			HwStudyTjInfo tj = tjm.getEntityById(tjId);
			if(tj != null){
				if(tj.getUser().getId().equals(currUserId)){
					if(tj.getComStatus().equals(0)){
						if(tj.getAllNum().equals(tj.getSuccNum() + tj.getErrorNum())){//全部做完
							Integer diffDays = CurrentTime.compareDate(CurrentTime.getStringDate(),tj.getSendHwInfo().getEndDate());
							Integer comStatus = 2;//补做完成
							if(diffDays >= 0){//按时完成
								comStatus = 1;
							}
							tjm.updateInfoById(tj.getId(), comStatus, 0, 0);
							msg = "success";
						}
					}else{
						msg = "success";
					}
				}
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 获取家庭作业溯源时学习地图数据
	 * @author wm
	 * @date 2019-8-23 下午04:01:38
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getHwStudyMapData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		HwTraceStudyLogManager slm = (HwTraceStudyLogManager) AppFactory.instance(null).getApp(Constants.WEB_HW_TRACE_STUDY_LOG_INFO);
		HwTraceStudyDetailManager sdm = (HwTraceStudyDetailManager) AppFactory.instance(null).getApp(Constants.WEB_HW_TRACE_STUDY_DETAIL_INFO);
		HwStudyTjManager tjm = (HwStudyTjManager) AppFactory.instance(null).getApp(Constants.WEB_HW_STUDY_TJ_INFO);
		LoreQuestionManager lqm = (LoreQuestionManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_QUESTION_INFO);
		LoreInfoManager lm = (LoreInfoManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_INFO);
		Integer tjId = CommonTools.getFinalInteger("tjId", request);
		Integer userId = CommonTools.getLoginUserId(request);
		Map<String,Object> map = new HashMap<String,Object>();
		String nextLoreIdArray = "";//下级知识典编号数组
		Integer isFinish = 0;
		Integer task = 1;//第几个任务数（课后复习任务数）
		Integer money = Constants.COIN;
		String loreTaskName = "";
		String buttonValue = "开始挑战";
		String path = "";//顺序路线图(诊断时)
		String pathChi = "";
		String studyPath = "";//反序路线图(学习时)
		Integer stepCount = 0;//知识点有多少级
		Integer loreCount = 0;//有多少知识点
		String pathType = "diagnosis";//类型:diagnosis--诊断，study--学习
		String loreTypeName = "针对性诊断";
		Integer access = -1;
		String subDetail = "";
		Integer basicLoreId = 0;
		String hwTitle = "";
		Integer studyLogId = 0;
		String msg = "error";
		if(userId > 0 && tjId > 0){
			HwStudyTjInfo tj = tjm.getEntityById(tjId);
			if(tj != null){
				msg = "success";
				SendHwInfo sendHw = tj.getSendHwInfo();
				hwTitle = sendHw.getHwTitle();
				Integer sendLoreId = sendHw.getLoreInfo().getId();//发送作业时的知识点编号
				basicLoreId = sendHw.getLoreInfo().getMainLoreId();//通用版知识点编号
				//获取溯源路线
				String[] pathArr = CommonTools.getLorePath(sendLoreId, pathType);
				path =  pathArr[0];
				pathChi = pathArr[1];
				path.split(":")[0] = String.valueOf(tjId);//把第一级替换成家庭作业统计编号
				pathChi.split(":")[0] = hwTitle;//把第一级替换成家庭作业统计编号
				LoreTreeMenuJson ltmj = new LoreTreeMenuJson();
				if(!path.equals("")){
					stepCount = path.split(":").length;//多少级
					loreCount = ltmj.getLoreNum(path);//多少个知识点
				}
				HwTraceStudyLogInfo sl = slm.getEntityByTjId(tjId);
				if(sl == null){//没有数据，表示是第一次
					task = 1;
					loreTaskName = "针对性诊断";
					loreTypeName = "针对性诊断";
					//和知识点做题不同，直接进行第2级答题，第一级为作业题（8-15家庭作业）
					Integer answerNumber = 0;
					String[] pathArray = path.split(":");
					if(pathArray.length == 1){
						//表示当前知识点没有做关联知识点
					}else{
						String[] nextPathArray = pathArray[1].split(",");
						Integer nextPathLength = nextPathArray.length;
						buttonValue = "启动溯源";
						loreTaskName = "1级关联知识点诊断";
						for(Integer k = 0 ; k < nextPathLength ; k++){
							String[] nextDetailPathArray = nextPathArray[k].split("\\|");
							for(Integer l = 0 ; l < nextDetailPathArray.length ; l++){
								nextLoreIdArray += nextDetailPathArray[l] + ",";
								Integer quoteLoreId = CommonTools.getQuoteLoreId(Integer.parseInt(nextDetailPathArray[l]));
								List<LoreQuestion> lqList = lqm.listInfoByLoreId(quoteLoreId, loreTypeName, 0);
								answerNumber += lqList.size();
							}
						}
						money *= answerNumber;
						nextLoreIdArray = nextLoreIdArray.substring(0, nextLoreIdArray.length() - 1);
					}
				}else{
					studyLogId = sl.getId();
					isFinish = sl.getIsFinish();
					if(isFinish.equals(2)){//完成后不显示，无动作
						
					}else{//未通过，需要定位到现在需要学习的地方
						Integer step = sl.getStep();
						Integer stepComplelte = sl.getStepComplete();//本阶段整体完成情况
						//access:1--当前级全部正确，2:当前级部分正确或者无正确
						access = sl.getAccess();//本阶段详细完成情况（溯源诊断时分级完成情况）
						//从detail表中获取指定logId的最后一条详情
						List<HwTraceStudyDetailInfo> sdList = sdm.listLastInfoByLogId(studyLogId);
						//获取该题对应的知识点编号
						HwTraceStudyDetailInfo lastSd = sdList.get(0);
						Integer currentLoreId = lastSd.getLoreInfo().getId();
						if(stepComplelte.equals(0)){//0:表示本阶段未完成（未做完题标记）
							if(step.equals(1)){//诊断题未做完---loreId==currentLoreId
								//无需第一阶段
							}else if(step.equals(2)){//表示已经开始下级关联子知识点的诊断loreId不等于currentLoreId
								Integer answerNumber = 0;
								String[] pathArray = path.split(":");
								Integer currentI = CommonTools.getCurrentStep(pathArray, currentLoreId);
								String[] currentPathArray = null;
								if(access == 0){//表示关联性诊断当前级还未完成。
									currentPathArray = pathArray[currentI].split("\\|");
								}else{//表示关联性诊断当前级已经完成，需要进行关联性诊断的下一级子知识点的关联性诊断
									currentPathArray = pathArray[currentI + 1].split("\\|");
									currentI = currentI + 1;
								}
								Integer currentPathLength = currentPathArray.length;
								task = currentI + 1;
								buttonValue = "继续诊断";
								loreTypeName = "针对性诊断";
								loreTaskName = task - 1+"级关联知识点诊断";
								for(Integer k = 0 ; k < currentPathLength ; k++){
									nextLoreIdArray += currentPathArray[k] + ",";
									//获取该知识典所有类型为针对性诊断的题型[0为题状态为有效状态]
									Integer quoteLoreId = CommonTools.getQuoteLoreId(Integer.parseInt(currentPathArray[k]));
									List<LoreQuestion> lqList = lqm.listInfoByLoreId(quoteLoreId, loreTypeName, 0);
									answerNumber += lqList.size();
								}
								money *= answerNumber;
								nextLoreIdArray = nextLoreIdArray.substring(0, nextLoreIdArray.length() - 1);
							}else if(step.equals(3)){//关联知识点的学习阶段
								if(access.equals(0)){//当前阶段未做完题
									task = sl.getTaskNumber();
									pathType = "diagnosis";
									buttonValue = "继续诊断";
									loreTypeName = "再次诊断";
									String[] pathArray = path.split(":");
									
									Integer currentStep = CommonTools.getCurrentStep(pathArray, currentLoreId);
									Integer stepNumber = currentStep;//因为是当前知识点的下一级

									LoreInfo lore = lm.getEntityById(currentLoreId);
									loreTaskName = stepNumber +"级关联知识点("+lore.getLoreName()+")诊断";
									//做过的题和剩下的题拼装
									//全部题
									//根据全部再次诊断题除去该知识典做对的题就是目前需要在测试的再次诊断题
									//获取该知识典所有类型为loreTypeName的题型[0为题状态为有效状态]
									List<LoreQuestion> lqList_all = lqm.listInfoByLoreId(CommonTools.getQuoteLoreId(currentLoreId), loreTypeName, 0);
									List<HwTraceStudyDetailInfo> sdList_pre_right = new ArrayList<HwTraceStudyDetailInfo>();
									 if(lastSd != null){//表示存在最后一次诊断记录(列出的题为)
										 if(lastSd.getLoreQuestion().getLoreTypeName().equals("再次诊断")){//说明最后做的一道题是再次诊断题，表示题还未做完
											 //当前阶段刚做过的再次诊断题列表
											 Integer completeTimes = lastSd.getCompleteTimes();
											 //获取不是当前级别所有做正确的再次诊断题
											 sdList_pre_right = sdm.listPretRightInfoByLogId(studyLogId, currentLoreId, loreTypeName, completeTimes);
										 }
									 }
									money *= (lqList_all.size() - sdList_pre_right.size());//一直显示全部题的金币数
									nextLoreIdArray = String.valueOf(currentLoreId);
								}else if(access.equals(1)){//当前知识点的再次诊断完成，需要定位到下一个知识
									task = sl.getTaskNumber();
									pathType = "study";
									loreTypeName = "再次诊断";
									String[] pathArray = path.split(":");
									String[] studyPathArr = ltmj.getStudyPath(path, pathChi);
									studyPath = studyPathArr[0];
									String studyPath_new = CommonTools.getCurrentStudyPath_new(studyPath, currentLoreId);//获取当前知识点以后的知识点
									if(studyPath_new.split(":").length == 1){
										buttonValue = "本知识点学习";
										loreTaskName = "学习本知识点";
										money = 0;
										nextLoreIdArray = String.valueOf(currentLoreId);
									}else{
										buttonValue = "开始学习";
										Integer currentLoreId_new = Integer.parseInt(studyPath_new.split(":")[0].split("\\|")[0]);
										Integer currentStep = CommonTools.getCurrentStep(pathArray, currentLoreId_new);
										Integer stepNumber = currentStep;
										LoreInfo lore = lm.getEntityById(currentLoreId_new);
										loreTaskName = stepNumber +"级关联知识点("+lore.getLoreName()+")学习";
										money = 0;
										nextLoreIdArray = String.valueOf(currentLoreId_new);
									}
								}else if(access.equals(2)){//五步学习
									
								}else if(access.equals(3)){//之前有做过再次诊断，但未全部正确（做错题的不重复列表）
									task = sl.getTaskNumber();
									pathType = "diagnosis";
									buttonValue = "继续诊断";
									loreTypeName = "再次诊断";
									String[] pathArray = path.split(":");
									
									Integer currentStep = CommonTools.getCurrentStep(pathArray, currentLoreId);
									Integer  stepNumber = currentStep;
									LoreInfo lore = lm.getEntityById(currentLoreId);
									loreTaskName = stepNumber +"级关联知识点("+lore.getLoreName()+")诊断";
									//获取该知识典所有类型为loreTypeName的题型[0为题状态为有效状态]
									//最对的题
									List<HwTraceStudyDetailInfo> sdList_current_right = sdm.listCurrentRightInfoByLogId(studyLogId, currentLoreId, loreTypeName);
									//该知识点类型为再次诊断的全部题
									List<LoreQuestion> zcList = lqm.listInfoByLoreId(CommonTools.getQuoteLoreId(currentLoreId), loreTypeName, 0);
									//该知识点答对的题
									money *= zcList.size() - sdList_current_right.size();
									nextLoreIdArray = String.valueOf(currentLoreId);
								}else if(access.equals(31)){//未做完巩固训练
									task = sl.getTaskNumber();
									pathType = "study";
									buttonValue = "继续学习";
									loreTypeName = "再次诊断";
									String[] pathArray = path.split(":");
									
									Integer currentStep = CommonTools.getCurrentStep(pathArray, currentLoreId);
									Integer  stepNumber = currentStep;
									LoreInfo lore = lm.getEntityById(currentLoreId);
									loreTaskName = stepNumber +"级关联知识点("+lore.getLoreName()+")学习";
									money = 0;//学习的没金币
									nextLoreIdArray = String.valueOf(currentLoreId);
								}else if(access.equals(4)){//第一次进入再次诊断(列出再次诊断的全部试题)
									task = sl.getTaskNumber();
									pathType = "diagnosis";
									buttonValue = "再次诊断";
									loreTypeName = "再次诊断";
									String[] pathArray = path.split(":");
									
									Integer currentStep = CommonTools.getCurrentStep(pathArray, currentLoreId);
									Integer stepNumber = currentStep;

									LoreInfo lore = lm.getEntityById(currentLoreId);
									loreTaskName = stepNumber +"级关联知识点("+lore.getLoreName()+")诊断";
									//2014-10-22日修改（获取该知识典所有类型为loreTypeName的题型[0为题状态为有效状态]）
									List<LoreQuestion> zcList = lqm.listInfoByLoreId(CommonTools.getQuoteLoreId(currentLoreId), loreTypeName, 0);
									money *= zcList.size();
									nextLoreIdArray = String.valueOf(currentLoreId);
								}else if(access.equals(41)){
									
								}
							}else if(step.equals(4)){
								//进入家庭作业题库列表页面，溯源按钮变成提交按钮，点击提交按钮，修改hwStudyTjInfo表中为完成状态
								
							}
						}else{//1:表示本阶段已经完成（做完题标记）
							//对于本阶段已经完成而全部没完成的，step完成的范围只能是1-3
							if(step.equals(1)){//第一阶段--本知识点针对性诊断已经做完题，还没进入下一步
								//无需第一阶段
							}else if(step.equals(2)){//关联知识典完成--进入关联知识典的学习
								//关联性诊断已经完成，可能是2种情况。
								//1：当前题全部做对，直接进入第三步-当前知识典的上一级关联知识典的学习
								//2：关联性诊断题全部做完，需要进入到第三步--关联知识典的学习
								if(access.equals(1)){//当前题全部正确
									String[] studyPathArr = ltmj.getStudyPath(path, pathChi);
									String[] studyPath_new_arr = CommonTools.getStudyPath_new(studyPathArr[0],studyPathArr[1], currentLoreId);
									studyPath = studyPath_new_arr[0];
									if(studyPath.split(":").length == 2){//表示一级关联知识点全部正确，表示溯源已完成
										//直接进入家庭作业题库页面
										
									}else{//表示进入上一级关联知识点进行溯源
										Integer stepNumber = CommonTools.getCurrentStep(path.split(":"), currentLoreId) - 1;
										//获取studyPath_new的第二组的数据中的第一组数据
										nextLoreIdArray = studyPath.split(":")[1].split("\\|")[0];
										currentLoreId = Integer.parseInt(nextLoreIdArray);
										String currentLoreName = lm.getEntityById(currentLoreId).getLoreName();
										loreTaskName = stepNumber+"级关联知识点("+currentLoreName+")学习";
									}
								}else{//关联性诊断题全部做完(诊断的最后一级)
									String[] studyPathArr = ltmj.getStudyPath(path, pathChi);
									studyPath = studyPathArr[0];
									String[] pathArray = studyPath.split(":");
									Integer stepNumber = pathArray.length  - 1;
									String currentLoreName = lm.getEntityById(currentLoreId).getLoreName();
									loreTaskName = stepNumber+"级关联知识点("+currentLoreName+")学习";
								}
								task = stepCount + 1;
								buttonValue = "开始学习";
								pathType = "study";
								money = 0;
								nextLoreIdArray = String.valueOf(currentLoreId);
							}else if(step.equals(3)){//表示第3步刚刚完成，需要进入第4步本知识典的学习(替换为巴菲特题的查看解析上)
								
							}
						}
					}
				}
			}
		}
		if(msg.equals("success")){
			map.put("tjId", tjId);//第一级编号
			map.put("hwTitle", hwTitle);//第一级名称
			map.put("task", task);
			map.put("loreTaskName", loreTaskName);
			map.put("money", money);
			map.put("stepCount", stepCount);
			map.put("loreCount", loreCount);
			map.put("buttonValue", buttonValue);
			map.put("pathType", pathType);
			map.put("loreType", loreTypeName);
			map.put("nextLoreIdArray", nextLoreIdArray);
			map.put("studyLogId", studyLogId);
			map.put("subDetail", subDetail);
			map.put("basicLoreId", basicLoreId);
			map.put("loreName", hwTitle);
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 家庭作业错误后获取关联知识点的溯源路线图数据
	 * @author wm
	 * @date 2019-8-17 上午10:40:10
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getHwStudyTraceData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		HwTraceStudyLogManager slm = (HwTraceStudyLogManager) AppFactory.instance(null).getApp(Constants.WEB_HW_TRACE_STUDY_LOG_INFO);
		HwTraceStudyDetailManager sdm = (HwTraceStudyDetailManager) AppFactory.instance(null).getApp(Constants.WEB_HW_TRACE_STUDY_DETAIL_INFO);
		HwStudyTjManager tjm = (HwStudyTjManager) AppFactory.instance(null).getApp(Constants.WEB_HW_STUDY_TJ_INFO);
		LoreInfoManager lm = (LoreInfoManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_INFO);
		Integer tjId = CommonTools.getFinalInteger("tjId", request);
		Integer userId = CommonTools.getLoginUserId(request);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "error";
		String nextLoreIdArray = "";//下级知识典编号数组
		Integer studyLogId = 0;
		Integer totalMoney = -1;
		String path = "";//顺序路线图(诊断时)
		String pathChi = "";
		String studyPath = "";//学习的路线
		String studyPathChi = "";
		Integer step = 0;
		Integer stepComplete = 0;
		Integer access = -1;
		Integer currentLoreId = 0;
		Integer option = 0;//1--诊断,2--学习
		String successStep = "";
		Integer success = -1;//0:正确,1:不正确
		String nextLoreStep = "上一级的关联知识点";
		String currentloreName_study = "";//当前5步学习法时的知识典名称
		Integer basicLoreId = 0;
		String hwTitle = "";
		String subDetail = "";
		if(userId > 0 && tjId > 0){
			HwStudyTjInfo tj = tjm.getEntityById(tjId);
			if(tj != null){
				SendHwInfo sendHw = tj.getSendHwInfo();
				subDetail = "当前家庭作业的“溯源路线图”如下";
				if(userId.equals(tj.getUser().getId())){
					msg = "success";
					hwTitle = sendHw.getHwTitle();
					Integer sendLoreId = sendHw.getLoreInfo().getId();//发送作业时的知识点编号
					basicLoreId = sendHw.getLoreInfo().getMainLoreId();//通用版知识点编号
					//获取溯源路线
					String[] pathArr = CommonTools.getLorePath(sendLoreId, "diagnosis");
					path =  pathArr[0];
					pathChi = pathArr[1];
					path.split(":")[0] = String.valueOf(tjId);//把第一级替换成家庭作业统计编号
					pathChi.split(":")[0] = hwTitle;//把第一级替换成家庭作业统计编号
					LoreTreeMenuJson ltmj = new LoreTreeMenuJson();
					HwTraceStudyLogInfo sl = slm.getEntityByTjId(tjId);
					if(sl == null){//表示第一次，还未进行巴菲特知识点学习
						option = 1;
						currentLoreId = tjId;//目的为了获取当前级别(把第一级家庭作业编号赋值给currLoreId)
						String[] pathArray = path.split(":");
						Integer currentI = CommonTools.getCurrentStep(pathArray, currentLoreId);
						if(currentI + 1 == pathArray.length){
							//表示是最后一级（只有一级）
							//溯源完成，开始学习
						}else{
							nextLoreIdArray = "";
							String[] nextPathArray = pathArray[currentI + 1].split(",");
							Integer nextPathLength = nextPathArray.length;
							for(Integer k = 0 ; k < nextPathLength ; k++){
								String[] nextDetailPathArray = nextPathArray[k].split("\\|");
								for(Integer l = 0 ; l < nextDetailPathArray.length ; l++){
									nextLoreIdArray += nextDetailPathArray[l] + ",";
								}
							}
							if(nextLoreIdArray.length() > 0){
								nextLoreIdArray = nextLoreIdArray.substring(0, nextLoreIdArray.length() - 1);
							}
							successStep = hwTitle;
							success = 1;
						}
					}else{
						totalMoney = sl.getCurrentGold() * 10;
						stepComplete = sl.getStepComplete();
						step = sl.getStep();
						access = sl.getAccess();
						studyLogId = sl.getId();
						if(sl.getIsFinish().equals(1)){//表示未全部完成,2:已完成
							//从detail表中获取指定logId的最后一条详情
							List<HwTraceStudyDetailInfo> bsdList = sdm.listLastInfoByLogId(studyLogId);
							//获取该题对应的知识点编号
							currentLoreId = bsdList.get(0).getLoreInfo().getId();
							if(stepComplete > 0){//本阶段答题已完成(还未进行下一级)
								if(step.equals(1)){
									//通过当前知识点获取下级子知识点
									String[] pathArray = path.split(":");
									Integer currentI = CommonTools.getCurrentStep(pathArray, currentLoreId);
									if(currentI + 1 == pathArray.length){
										
									}else{
										option = 1;
										nextLoreIdArray = "";
										String[] nextPathArray = pathArray[currentI + 1].split(",");
										Integer nextPathLength = nextPathArray.length;
										for(Integer k = 0 ; k < nextPathLength ; k++){
											String[] nextDetailPathArray = nextPathArray[k].split("\\|");
											for(Integer l = 0 ; l < nextDetailPathArray.length ; l++){
												nextLoreIdArray += nextDetailPathArray[l] + ",";
											}
										}
										if(nextLoreIdArray.length() > 0){
											nextLoreIdArray = nextLoreIdArray.substring(0, nextLoreIdArray.length() - 1);
										}
										successStep = "本知识点";
										success = 1;
									}
								}else if(step.equals(2)){//表示关联知识点诊断完成/或者是某一级的关联知识点全部正确，需要进入学习阶段
									String[] studyPathArr = ltmj.getStudyPath(path,pathChi);
									studyPath = studyPathArr[0];
									studyPathChi = studyPathArr[1];
									String[] studyPath_new_arr = CommonTools.getStudyPath_new(studyPath,studyPathChi, currentLoreId);
									studyPath = studyPath_new_arr[0];
									studyPathChi = studyPath_new_arr[1];
									//根据当前currentLoreId截取studyPath
									option = 2;
									if(access == 1){//当前关联知识典诊断全部正确，进入当前知识典的下级进行学习
										Integer stepNumber = CommonTools.getCurrentStep(path.split(":"), currentLoreId);
										successStep = stepNumber+"级关联知识点的诊断题";
										success = 3;
										//获取studyPath_new的第二组的数据中的第一组数据
										nextLoreIdArray = studyPath.split(":")[1].split("\\|")[0];
										if(nextLoreIdArray.equals(String.valueOf(basicLoreId))){
											nextLoreStep = "本知识点";
										}
									}else{//学习完了所有的关联知识典，返回逆序进行全部学习access=2
										Integer stepNumber = CommonTools.getCurrentStep(path.split(":"), currentLoreId);
										successStep = stepNumber+"级关联知识点的诊断题";
										nextLoreIdArray = String.valueOf(currentLoreId);
										success = 2;
									}
								}else if(step.equals(3)){
									option = 2;
									success = 5;
									nextLoreIdArray = String.valueOf(basicLoreId);
									String[] studyPathArr = ltmj.getStudyPath(path,pathChi);
									studyPath = studyPathArr[0];
									studyPathChi = studyPathArr[1];
								}
							}else{//本阶段答题完成，但本知识点所有的关联性诊断未完成
								//不会存在access=1的情况，1表示当前题全部正确，如果是全部正确的话，那么stepComplete>0
								if(step == 3){//
									String[] studyPathArr = ltmj.getStudyPath(path,pathChi);
									studyPath = studyPathArr[0];
									studyPathChi = studyPathArr[1];
									if(access.equals(4)){//第一次进入再次诊断（列出再次诊断全部题）
										option = 2;
										success = 4;
										nextLoreIdArray = String.valueOf(currentLoreId);
										Integer stepNumber = CommonTools.getCurrentStep(path.split(":"), currentLoreId);
										successStep = stepNumber+"级关联知识点的诊断题";
										//获取studyPath_new的第二组的数据中的第一组数据
										currentloreName_study = lm.getEntityById(Integer.parseInt(nextLoreIdArray)).getLoreName();
//										if(nextLoreIdArray.equals(String.valueOf(buffetId))){
//											nextLoreStep = "本知识点";
//										}
									}else if(access.equals(41)){
										option = 2;
										success = 4;
										nextLoreIdArray = String.valueOf(currentLoreId);
										Integer stepNumber = CommonTools.getCurrentStep(path.split(":"), currentLoreId);
										String currentLoreName = lm.getEntityById(currentLoreId).getLoreName();
										successStep = stepNumber+"级关联知识点("+currentLoreName+")";
										//获取studyPath_new的第二组的数据中的第一组数据
										currentloreName_study = lm.getEntityById(Integer.parseInt(nextLoreIdArray)).getLoreName();
//										if(nextLoreIdArray.equals(String.valueOf(buffetId))){
//											nextLoreStep = "本知识点";
//										}
									}else if(access.equals(3)){//之前没把再次诊断全部做对（列出做错的再次诊断题）
										option = 2;
										success = 4;
										nextLoreIdArray = String.valueOf(currentLoreId);
										Integer stepNumber = CommonTools.getCurrentStep(path.split(":"), currentLoreId);
										String currentLoreName = lm.getEntityById(currentLoreId).getLoreName();
										successStep = stepNumber+"级关联知识点("+currentLoreName+")";
										//获取studyPath_new的第二组的数据中的第一组数据
										currentloreName_study = lm.getEntityById(Integer.parseInt(nextLoreIdArray)).getLoreName();
//										if(nextLoreIdArray.equals(String.valueOf(buffetId))){
//											nextLoreStep = "本知识点";
//										}
									}else if(access.equals(31)){//再次诊断完成提交后（31）
										option = 2;
										success = 2;
										nextLoreIdArray = String.valueOf(currentLoreId);
										Integer stepNumber = CommonTools.getCurrentStep(path.split(":"), currentLoreId);
										String currentLoreName = lm.getEntityById(currentLoreId).getLoreName();
										successStep = stepNumber+"级关联知识点("+currentLoreName+")";
										//获取studyPath_new的第二组的数据中的第一组数据
										currentloreName_study = lm.getEntityById(Integer.parseInt(nextLoreIdArray)).getLoreName();
//										if(nextLoreIdArray.equals(String.valueOf(buffetId))){
//											nextLoreStep = "本知识点";
//										}
									}else if(access.equals(2)){//进入5步学习法
										
									}else if(access.equals(1)){//题做完，全部正确（需要定位到下一个知识点）
										String studyPath_new = CommonTools.getCurrentStudyPath_new(studyPath, currentLoreId);//获取当前知识点以后的知识点
										Integer currentLoreId_new = Integer.parseInt(studyPath_new.split(":")[0].split("\\|")[0]);
										option = 2;
										nextLoreIdArray = String.valueOf(currentLoreId_new);
										success = 5;//进入5步学习法
										//获取studyPath_new的第二组的数据中的第一组数据
										currentloreName_study = lm.getEntityById(Integer.parseInt(nextLoreIdArray)).getLoreName();
//										if(nextLoreIdArray.equals(String.valueOf(buffetId))){
//											nextLoreStep = "本知识点";
//										}
									}else if(access.equals(0)){//表示已经做了再次诊断题，但是没做完（将已做的题和未做的列出来）
										//根据当前currentLoreId截取studyPath
										option = 2;
										nextLoreIdArray = String.valueOf(currentLoreId);
										Integer stepNumber = CommonTools.getCurrentStep(path.split(":"), currentLoreId);
										successStep = stepNumber+"级关联知识点";
										success = 0;//再次诊断未做完
										//获取studyPath_new的第二组的数据中的第一组数据
										currentloreName_study = lm.getEntityById(Integer.parseInt(nextLoreIdArray)).getLoreName();
//										if(nextLoreIdArray.equals(String.valueOf(buffetId))){//同上，如何判定当前到了巴菲特的阶段
//											nextLoreStep = "本知识点";
//										}
									}
								}else if(step.equals(4)){//到4结束
									if(access.equals(2)){//溯源完成
										option = 2;
										nextLoreIdArray = String.valueOf(tjId);
										success = 6;//进入家庭作业题库列表
										String[] studyPathArr = ltmj.getStudyPath(path,pathChi);
										studyPath = studyPathArr[0];
										studyPathChi = studyPathArr[1];
									}
								}else{
									if(sl.getAccess().equals(2)){//本阶段题部分正确
										nextLoreIdArray = "";
										option = 1;
										String[] pathArray = path.split(":");
										Integer currentI = CommonTools.getCurrentStep(pathArray, currentLoreId);
										String[] currentPathArray = pathArray[currentI+1].split("\\|");
										for(Integer i = 0 ; i < currentPathArray.length ; i++){
											nextLoreIdArray += currentPathArray[i]+",";
										}
										if(nextLoreIdArray.length() > 0){
											nextLoreIdArray = nextLoreIdArray.substring(0, nextLoreIdArray.length() - 1);
										}
										Integer stepNumber = CommonTools.getCurrentStep(path.split(":"), currentLoreId);
										successStep = stepNumber+"级关联知识点的诊断题";
										success = 1;
									}else{//本阶段还未点最后的提交，access为0
										nextLoreIdArray = "";
										option = 1;
										String[] pathArray = path.split(":");
										Integer currentI = CommonTools.getCurrentStep(pathArray, currentLoreId);											
										String[] currentPathArray = pathArray[currentI].split("\\|");
										for(Integer i = 0 ; i < currentPathArray.length ; i++){
											nextLoreIdArray += currentPathArray[i]+",";
										}
										if(nextLoreIdArray.length() > 0){
											nextLoreIdArray = nextLoreIdArray.substring(0, nextLoreIdArray.length() - 1);
										}
										Integer stepNumber = CommonTools.getCurrentStep(path.split(":"), currentLoreId);
										if(stepNumber == 0){
											successStep = "本知识点";
											success = 0;
										}else{
											success = 1;
											successStep = stepNumber+"级关联知识点的诊断题";
										}
									}
								}
							}
						}else if(sl.getIsFinish().equals(2)){//表示全部完成
							step = sl.getStep();
							//从detail表中获取指定logId的最后一条详情
							List<HwTraceStudyDetailInfo> sdList = sdm.listLastInfoByLogId(studyLogId);
							//获取最后（最近）的一条答题详情
							HwTraceStudyDetailInfo blsdLastInfo = sdList.get(0);
							//获取该题对应的知识点编号
							currentLoreId = blsdLastInfo.getLoreQuestion().getLoreInfo().getId();
							studyPath = "";
							if(step == 1){//表示是本知识典诊断时一次性全部正确通过
								option = 1;
								success = 2;
								path = String.valueOf(currentLoreId);
								nextLoreIdArray = String.valueOf(currentLoreId);
							}else{//通过溯源完成的
								option = 2;
								nextLoreIdArray = "0";
								successStep = "本知识点的诊断题";
								success = 6;//全部完成
							}
						}
					}
				}
			}
		}
		if(msg.equals("success")){
			map.put("option", option);
			map.put("totalMoney", totalMoney);
			map.put("success", success);
			map.put("path", path);
			map.put("pathChi", pathChi);
			map.put("studyPath", studyPath);
			map.put("studyPathChi", studyPathChi);
			map.put("nextLoreIdArray", nextLoreIdArray);
			map.put("successStep", successStep);
			map.put("nextLoreStep", nextLoreStep);
			map.put("currentloreName_study", currentloreName_study);
			map.put("access", access);
			map.put("tjId", tjId);//第一级编号
			map.put("hwTitle", hwTitle);//第一级名称
			map.put("subDetail", subDetail);
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 获取家庭作业溯源时知识点题库列表（针对性和再次诊断有用）
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getHwTraceQuestionData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		HwTraceStudyLogManager slm = (HwTraceStudyLogManager) AppFactory.instance(null).getApp(Constants.WEB_HW_TRACE_STUDY_LOG_INFO);
		HwTraceStudyDetailManager sdm = (HwTraceStudyDetailManager) AppFactory.instance(null).getApp(Constants.WEB_HW_TRACE_STUDY_DETAIL_INFO);
		HwStudyTjManager tjm = (HwStudyTjManager) AppFactory.instance(null).getApp(Constants.WEB_HW_STUDY_TJ_INFO);
		LoreInfoManager lm = (LoreInfoManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_INFO);
		LoreQuestionManager lqm = (LoreQuestionManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_QUESTION_INFO);
		Integer tjId = CommonTools.getFinalInteger("tjId", request);
		Integer userId = CommonTools.getLoginUserId(request);
		String nextLoreIdArray = CommonTools.getFinalStr("nextLoreIdArray", request);
		String loreType = Transcode.unescape_new1("loreType", request);//针对性诊断和再次诊断
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "error";
		Integer loreId = 0;
		Integer currentLoreId = 0;
		String loreName = "";
		if(tjId > 0 && userId > 0){
			HwStudyTjInfo tj = tjm.getEntityById(tjId);
			if(tj.getUser().getId().equals(userId)){
				msg = "success";
				if(loreType.equals("")){
					loreType = "针对性诊断";
				}
				if(loreId > 0 && loreType.equals("针对性诊断")){
					LoreInfo lore = lm.getEntityById(loreId);
					if(lore != null){
						loreName = lore.getLoreName();
						String[] pathArr = CommonTools.getLorePath(loreId, "diagnosis");
						map.put("path", pathArr[0]);
					}
				}
				SendHwInfo sendHw = tj.getSendHwInfo();
				loreName = sendHw.getHwTitle();//08-12家庭作业
				Integer basicLoreId = sendHw.getLoreInfo().getId();//发送家庭作业时的知识点编号
				//获取溯源路线
				String[] pathArr = CommonTools.getLorePath(basicLoreId, "diagnosis");
				String path =  pathArr[0];
				path.split(":")[0] = String.valueOf(tjId);//把第一级替换成家庭作业统计编号
				map.put("path", path);
				List<LoreQuestion> lqList_old = new ArrayList<LoreQuestion>();
				List<HwTraceStudyDetailInfo> sdList_used = new ArrayList<HwTraceStudyDetailInfo>();
				HwTraceStudyLogInfo sLog = slm.getEntityByTjId(tjId);
				Integer studyLogId = 0;
				List<Object> list_d = new ArrayList<Object>();
				if(sLog != null){
					studyLogId = sLog.getId();
					if(!nextLoreIdArray.equals("")){
						 String[] nextLoreIdArray_1 = nextLoreIdArray.split(",");
						 for(Integer i = 0 ; i < nextLoreIdArray_1.length ; i++){
							 loreId = Integer.parseInt(nextLoreIdArray_1[i]);
							 currentLoreId = loreId;
							 //获取该知识典所有类型为loreType的题型[0为题状态为有效状态]
							 lqList_old.addAll(lqm.listInfoByLoreId( CommonTools.getQuoteLoreId(currentLoreId), loreType, 0));//全部题列表
							 if(loreType.equals("再次诊断")){//获取上次的学习情况(根据logId+nextLoreIdArray+loreType)获取答题正确的题
								sdList_used.addAll(sdm.listCurrentRightInfoByLogId(studyLogId, currentLoreId, loreType));
							 }else{//获取上次的学习情况(根据logId+nextLoreIdArray+loreType)--针对性诊断
								sdList_used.addAll(sdm.listExistInfoByOption(studyLogId, currentLoreId, loreType));
							 }
						 }
					}else{
						//获取该知识典所有类型为loreType的题型[0为题状态为有效状态]
						//要是没有下一级loreId就是发布自助餐时的学习记录中的知识点编号
						loreId = sendHw.getLoreInfo().getMainLoreId();
						lqList_old.addAll(lqm.listInfoByLoreId(loreId, loreType, 0));//全部题列表
					}
					if(loreType.equals("针对性诊断")){//将做过的题的情况和未做过的题都列出来
						for(Integer i = 0 ; i < lqList_old.size() ; i++){
							LoreQuestion lq = lqList_old.get(i);
							Map<String,Object> map_d = new HashMap<String,Object>();
							Integer lqId_old = lq.getId();
							map_d.put("lqId", lqId_old);
							Integer quoteLoreId = lq.getLoreInfo().getId();
							String[] loreInfo = CommonTools.getRealLoreInfo(quoteLoreId, loreId);//当前题库的指定版本下的知识点
							map_d.put("currLoreId", Integer.parseInt(loreInfo[0]));
							map_d.put("currLoreName", loreInfo[1]);
							String lqType = lq.getQueType();
							map_d.put("lqType", lqType);
							map_d.put("loreType", lq.getLoreTypeName());
							map_d.put("lqSub", lq.getQueSub());
							map_d.put("answerA", lq.getA());
							map_d.put("answerB", lq.getB());
							map_d.put("answerC", lq.getC());
							map_d.put("answerD", lq.getD());
							map_d.put("answerE", lq.getE());
							map_d.put("answerF", lq.getF());
							Integer completeStatus = 0;//做题状态(0:已做,1:未做)
							for(Integer j = 0 ; j < sdList_used.size() ; j++){
								HwTraceStudyDetailInfo sd = sdList_used.get(j);
								LoreQuestion lq_use = sd.getLoreQuestion();
								if(lqId_old.equals(lq_use.getId())){//做过
									completeStatus = 1;
									map_d.put("realAnswer", sd.getRealAnswer());
									map_d.put("myAnswer", sd.getMyAnswer());
									map_d.put("result", sd.getResult());//答案对错0:错，1:对
									map_d.put("questionStep", sd.getQueStep());
									break;
								}
							}
							map_d.put("completeStatus", completeStatus);//做题状态(0:已做,1:未做)
							if(completeStatus.equals(0)){
								if(lqType.equals("单选题") || lqType.equals("多选题") || lqType.equals("判断题") || lqType.equals("填空题") || lqType.equals("问答题")){
									map_d.put("answerNum", 1);
								}else{//填空选择题
									map_d.put("answerNum", lq.getQueAnswer().split(",").length);
								}
							}
							if(lqType.equals("填空题") || lqType.equals("问答题")){
								map_d.put("realAnswer", lq.getQueAnswer());
							}
							list_d.add(map_d);
						}
					}else if(loreType.equals("巩固训练")){
						
					}else if(loreType.equals("再次诊断")){//再次诊断()：
						//分三种情况(当是再次诊断时，不会有2和1的状态)
						//0:诊断题未做完，下次的诊断题列表为做过的+剩下的题
						//3:诊断题做完，继续诊断的话，之前该知识点没有做对的题（全部题-做对的题）
						//4:诊断题没做,下次的诊断题是该知识点所有的再次诊断题
						Integer access = sLog.getAccess();
						if(access == 4){
							for(Integer i = 0 ; i < lqList_old.size() ; i++){
								LoreQuestion lq = lqList_old.get(i);
								Map<String,Object> map_d = new HashMap<String,Object>();
								map_d.put("lqId", lq.getId());
								Integer quoteLoreId = lq.getLoreInfo().getId();
								String[] loreInfo = CommonTools.getRealLoreInfo(quoteLoreId, loreId);//当前题库的指定版本下的知识点
								map_d.put("currLoreId", Integer.parseInt(loreInfo[0]));
								map_d.put("currLoreName", loreInfo[1]);
								String lqType = lq.getQueType();
								map_d.put("lqType", lqType);
								map_d.put("loreType", lq.getLoreTypeName());
								map_d.put("lqSub", lq.getQueSub());
								map_d.put("answerA", lq.getA());
								map_d.put("answerB", lq.getB());
								map_d.put("answerC", lq.getC());
								map_d.put("answerD", lq.getD());
								map_d.put("answerE", lq.getE());
								map_d.put("answerF", lq.getF());
								map_d.put("completeStatus", 0);//做题状态(0:未做,1:已做)
								if(lqType.equals("单选题") || lqType.equals("多选题") || lqType.equals("判断题") || lqType.equals("填空题") || lqType.equals("问答题")){
									map_d.put("answerNum", 1);
								}else{//填空选择题
									map_d.put("answerNum", lq.getQueAnswer().split(",").length);
								}
								if(lqType.equals("填空题") || lqType.equals("问答题")){
									map_d.put("realAnswer", lq.getQueAnswer());
								}
								list_d.add(map_d);
							}
						}else if(access == 3){
							//获取做对的再次诊断题
							for(Integer i = 0 ; i < lqList_old.size() ; i++){
								LoreQuestion lq = lqList_old.get(i);
								Map<String,Object> map_d = new HashMap<String,Object>();
								Integer lqId_old = lq.getId();
								Integer status = 1;
								for(Integer j = 0 ; j < sdList_used.size() ; j++){
									HwTraceStudyDetailInfo sd = sdList_used.get(j);
									if(lqId_old.equals(sd.getLoreQuestion().getId())){//做对过
										status = 0;
										break;
									}
								}
								if(status.equals(1)){//过滤掉已做正确的题
									map_d.put("lqId", lqId_old);
									Integer quoteLoreId = lq.getLoreInfo().getId();
									String[] loreInfo = CommonTools.getRealLoreInfo(quoteLoreId, loreId);//当前题库的指定版本下的知识点
									map_d.put("currLoreId", Integer.parseInt(loreInfo[0]));
									map_d.put("currLoreName", loreInfo[1]);
									String lqType = lq.getQueType();
									map_d.put("lqType", lqType);
									map_d.put("loreType", lq.getLoreTypeName());
									map_d.put("lqSub", lq.getQueSub());
									map_d.put("answerA", lq.getA());
									map_d.put("answerB", lq.getB());
									map_d.put("answerC", lq.getC());
									map_d.put("answerD", lq.getD());
									map_d.put("answerE", lq.getE());
									map_d.put("answerF", lq.getF());
									map_d.put("completeStatus", 0);//做题状态(0:未做,1:已做)
									if(lqType.equals("单选题") || lqType.equals("多选题") || lqType.equals("判断题") || lqType.equals("填空题") || lqType.equals("问答题")){
										map_d.put("answerNum", 1);
									}else{//填空选择题
										map_d.put("answerNum", lq.getQueAnswer().split(",").length);
									}
									if(lqType.equals("填空题") || lqType.equals("问答题")){
										map_d.put("realAnswer", lq.getQueAnswer());
									}
									list_d.add(map_d);
								}
							}
						}else if(access == 0){
							//表示题还未做完-显示答题正确的题和未做的题
							//?需要思考（接下来的题库列表为正确的+最后一次做错的+剩下没做的）
							//获取最后一道已做过的题
							List<HwTraceStudyDetailInfo> lastList = sdm.listLastInfoByLogId(studyLogId);
							 if(lastList.size() > 0){//表示存在最后一次诊断记录(列出的题为)
								 if(lastList.get(0).getLoreQuestion().getLoreTypeName().equals("再次诊断")){//说明最后做的一道题是再次诊断题，表示题还未做完
									//当前阶段刚做过的再次诊断题列表
									 Integer completeTimes = lastList.get(0).getCompleteTimes();
									//当前级别新做的再次诊断题
									 List<HwTraceStudyDetailInfo> sdList_new = sdm.listLastInfoByOption(studyLogId, loreId, loreType, completeTimes);
									//获取不是当前级别所有做正确的再次诊断题
									 List<HwTraceStudyDetailInfo> sdList_pre_right = sdm.listPretRightInfoByLogId(studyLogId, loreId, loreType, completeTimes);
									 
									 for(Integer i = 0 ; i < lqList_old.size() ; i++){
										LoreQuestion lq = lqList_old.get(i);
										Map<String,Object> map_d = new HashMap<String,Object>();
										Integer lqId_old = lq.getId();
										Integer status = 1;
										for(Integer j = 0 ; j < sdList_pre_right.size() ; j++){
											HwTraceStudyDetailInfo sd = sdList_pre_right.get(j);
											if(lqId_old.equals(sd.getLoreQuestion().getId())){//做对过
												status = 0;
												break;
											}
										}
										if(status.equals(1)){//过滤掉已做正确的题
											map_d.put("lqId", lqId_old);
											Integer quoteLoreId = lq.getLoreInfo().getId();
											String[] loreInfo = CommonTools.getRealLoreInfo(quoteLoreId, loreId);//当前题库的指定版本下的知识点
											map_d.put("currLoreId", Integer.parseInt(loreInfo[0]));
											map_d.put("currLoreName", loreInfo[1]);
											String lqType = lq.getQueType();
											map_d.put("lqType", lqType);
											map_d.put("loreType", lq.getLoreTypeName());
											map_d.put("lqSub", lq.getQueSub());
											map_d.put("answerA", lq.getA());
											map_d.put("answerB", lq.getB());
											map_d.put("answerC", lq.getC());
											map_d.put("answerD", lq.getD());
											map_d.put("answerE", lq.getE());
											map_d.put("answerF", lq.getF());
											Integer completeStatus = 0;//做题状态(0:已做,1:未做)
											for(Integer k = 0 ; k < sdList_new.size() ; k++){
												HwTraceStudyDetailInfo sd_new = sdList_new.get(k);
												if(lqId_old.equals(sd_new.getLoreQuestion().getId())){
													completeStatus = 1;
													map_d.put("realAnswer", sd_new.getRealAnswer());
													map_d.put("myAnswer", sd_new.getMyAnswer());
													map_d.put("result", sd_new.getResult());//答案对错0:错，1:对
													map_d.put("questionStep", sd_new.getQueStep());
													break;
												}
											}
											map_d.put("completeStatus", completeStatus);//做题状态(0:未做,1:已做)
											if(completeStatus.equals(0)){
												if(lqType.equals("单选题") || lqType.equals("多选题") || lqType.equals("判断题") || lqType.equals("填空题") || lqType.equals("问答题")){
													map_d.put("answerNum", 1);
												}else{//填空选择题
													map_d.put("answerNum", lq.getQueAnswer().split(",").length);
												}
											}
											if(lqType.equals("填空题") || lqType.equals("问答题")){
												map_d.put("realAnswer", lq.getQueAnswer());
											}
											list_d.add(map_d);
										}
									}
								 }else{//表示是刚从5步学习法过来
									//将已答题和数据库中的原题中未答的题组合在一起(巴菲特时用)
									 for(Integer i = 0 ; i < lqList_old.size() ; i++){
										 LoreQuestion lq = lqList_old.get(i);
										 Integer lqId_old = lq.getId();
										 Map<String,Object> map_d = new HashMap<String,Object>();
										 map_d.put("lqId", lqId_old);
										Integer quoteLoreId = lq.getLoreInfo().getId();
										String[] loreInfo = CommonTools.getRealLoreInfo(quoteLoreId, loreId);//当前题库的指定版本下的知识点
										map_d.put("currLoreId", Integer.parseInt(loreInfo[0]));
										map_d.put("currLoreName", loreInfo[1]);
										String lqType = lq.getQueType();
										map_d.put("lqType", lqType);
										map_d.put("loreType", lq.getLoreTypeName());
										map_d.put("lqSub", lq.getQueSub());
										map_d.put("answerA", lq.getA());
										map_d.put("answerB", lq.getB());
										map_d.put("answerC", lq.getC());
										map_d.put("answerD", lq.getD());
										map_d.put("answerE", lq.getE());
										map_d.put("answerF", lq.getF());
										map_d.put("realAnswer", "");
										map_d.put("myAnswer", "");
										map_d.put("result", 0);//答案对错0:错，1:对
										map_d.put("questionStep", 0);
										Integer completeStatus = 0;//做题状态(0:已做,1:未做)
										 for(Integer j = 0 ; j < sdList_used.size() ; j++){
											 HwTraceStudyDetailInfo sd = sdList_used.get(j);
											 LoreQuestion lq_use = sd.getLoreQuestion();
											 if(lqId_old.equals(lq_use.getId())){
												completeStatus = 1;
												 //表示已做过
												map_d.put("answerA", lq_use.getA());
												map_d.put("answerB", lq_use.getB());
												map_d.put("answerC", lq_use.getC());
												map_d.put("answerD", lq_use.getD());
												map_d.put("answerE", lq_use.getE());
												map_d.put("answerF", lq_use.getF());
												map_d.put("realAnswer", sd.getRealAnswer());
												map_d.put("myAnswer", sd.getMyAnswer());
												map_d.put("result", sd.getResult());//答案对错0:错，1:对
												map_d.put("questionStep", sd.getQueStep());
												break;
											 }
										 }
										 map_d.put("completeStatus", completeStatus);//做题状态(0:未做,1:已做)
										if(completeStatus.equals(0)){
											if(lqType.equals("单选题") || lqType.equals("多选题") || lqType.equals("判断题") || lqType.equals("填空题") || lqType.equals("问答题")){
												map_d.put("answerNum", 1);
											}else{//填空选择题
												map_d.put("answerNum", lq.getQueAnswer().split(",").length);
											}
										}
										if(lqType.equals("填空题") || lqType.equals("问答题")){
											map_d.put("realAnswer", lq.getQueAnswer());
										}
										list_d.add(map_d);
									 }
								 }
							 }
						}
					}
				}else{//新的挑战
					if(!nextLoreIdArray.equals("")){
						 String[] nextLoreIdArray_1 = nextLoreIdArray.split(",");
						 for(Integer i = 0 ; i < nextLoreIdArray_1.length ; i++){
							 loreId = Integer.parseInt(nextLoreIdArray_1[i]);
							 currentLoreId = loreId;
							 //获取该知识典所有类型为loreType的题型[0为题状态为有效状态]
							 lqList_old.addAll(lqm.listInfoByLoreId(CommonTools.getQuoteLoreId(loreId), loreType, 0));
							 if(loreType.equals("再次诊断")){//获取上次的学习情况(根据logId+nextLoreIdArray+loreType)获取答题正确的题
								 sdList_used.addAll(sdm.listCurrentRightInfoByLogId(studyLogId, loreId, loreType));
							 }else{//获取上次的学习情况(根据logId+nextLoreIdArray+loreType)
								 sdList_used.addAll(sdm.listExistInfoByOption(studyLogId, currentLoreId, loreType));
							 }
						 }
					}
					for(Integer i = 0 ; i < lqList_old.size() ; i++){
						LoreQuestion lq = lqList_old.get(i);
						Integer lqId_old = lq.getId();
						Map<String,Object> map_d = new HashMap<String,Object>();
						map_d.put("lqId", lqId_old);
						Integer quoteLoreId = lq.getLoreInfo().getId();
						String[] loreInfo = CommonTools.getRealLoreInfo(quoteLoreId, loreId);//当前题库的指定版本下的知识点
						map_d.put("currLoreId", Integer.parseInt(loreInfo[0]));
						map_d.put("currLoreName", loreInfo[1]);
						String lqType = lq.getQueType();
						map_d.put("lqType", lqType);
						map_d.put("loreType", lq.getLoreTypeName());
						map_d.put("lqSub", lq.getQueSub());
						map_d.put("answerA", lq.getA());
						map_d.put("answerB", lq.getB());
						map_d.put("answerC", lq.getC());
						map_d.put("answerD", lq.getD());
						map_d.put("answerE", lq.getE());
						map_d.put("answerF", lq.getF());
						map_d.put("realAnswer", "");
						map_d.put("myAnswer", "");
						map_d.put("result", 0);//答案对错0:错，1:对
						map_d.put("questionStep", 0);
						Integer completeStatus = 0;//做题状态(0:已做,1:未做)
						 for(Integer j = 0 ; j < sdList_used.size() ; j++){
							 HwTraceStudyDetailInfo sd = sdList_used.get(j);
							 LoreQuestion lq_use = sd.getLoreQuestion();
							 if(lqId_old.equals(lq_use.getId())){
								completeStatus = 1;
								 //表示已做过
								map_d.put("answerA", lq_use.getA());
								map_d.put("answerB", lq_use.getB());
								map_d.put("answerC", lq_use.getC());
								map_d.put("answerD", lq_use.getD());
								map_d.put("answerE", lq_use.getE());
								map_d.put("answerF", lq_use.getF());
								map_d.put("realAnswer", sd.getRealAnswer());
								map_d.put("myAnswer", sd.getMyAnswer());
								map_d.put("result", sd.getResult());//答案对错0:错，1:对
								map_d.put("questionStep", sd.getQueStep());
								break;
							 }
						 }
						 map_d.put("completeStatus", completeStatus);//做题状态(0:未做,1:已做)
						if(completeStatus.equals(0)){
							if(lqType.equals("单选题") || lqType.equals("多选题") || lqType.equals("判断题") || lqType.equals("填空题") || lqType.equals("问答题")){
								map_d.put("answerNum", 1);
							}else{//填空选择题
								map_d.put("answerNum", lq.getQueAnswer().split(",").length);
							}
						}
						if(lqType.equals("填空题") || lqType.equals("问答题")){
							map_d.put("realAnswer", lq.getQueAnswer());
						}
						list_d.add(map_d);
					 }
				}
				map.put("lqList", list_d);
				map.put("tjId", tjId);
				map.put("loreName", loreName);
				map.put("subDetail", "针对该知识点而设定的题目共计"+list_d.size()+"题");
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 将溯源学习时的答题记录插入数据库
	 * @author wm
	 * @date 2019-8-20 上午10:22:21
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward insertStudyInfo(ActionMapping mapping ,ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		HwTraceStudyLogManager slm = (HwTraceStudyLogManager) AppFactory.instance(null).getApp(Constants.WEB_HW_TRACE_STUDY_LOG_INFO);
		HwTraceStudyDetailManager sdm = (HwTraceStudyDetailManager) AppFactory.instance(null).getApp(Constants.WEB_HW_TRACE_STUDY_DETAIL_INFO);
		HwStudyTjManager tjm = (HwStudyTjManager) AppFactory.instance(null).getApp(Constants.WEB_HW_STUDY_TJ_INFO);
		LoreQuestionManager lqm = (LoreQuestionManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_QUESTION_INFO);
		UserManager um = (UserManager)AppFactory.instance(null).getApp(Constants.WEB_USER_INFO);
		Integer tjId = CommonTools.getFinalInteger("tjId", request);//家庭作业做题统计
		Integer questionStep = Integer.parseInt(request.getParameter("questionStep"));//题的顺序
		String myAnswer = Transcode.unescape_new1("myAnswer",request);//选择的答案
		String answerOptionArrayStr = Transcode.unescape_new1("answerOptionArray",request);//做题时的选项
		Integer lqId = CommonTools.getFinalInteger("lqId", request);//做题的编号
		String loreType = "";//针对性诊断，巩固训练，再次诊断
		Integer stuId = CommonTools.getLoginUserId(request);
		Integer result = 0;//0为错,1为对
		boolean flag = false;
		String[] answerOptionStr = {"","","","","",""};
		String currTime = CurrentTime.getCurrentTime();
		Integer currentLoreId = 0;
		Integer step = 1;
		Integer stepComplete = 0;//0:未做完题，1:做完题
		Integer isFinish = 1;//0:未做过,1:未通过，2:通过
		Integer oldStepMoney = 0;//该阶段得分
		String questionType = "";
		String dataBaseAnswer = "";
		String dataBaseAnswerChar = "";
		Integer studyLogId = 0;
		boolean updateFlag = false;
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "error";
		if(tjId > 0 && lqId > 0 && !myAnswer.equals("")){
			HwStudyTjInfo tj = tjm.getEntityById(tjId);
			if(tj != null){
				LoreQuestion lq = lqm.getEntityByLqId(lqId);
				if(lq != null){
					loreType = lq.getLoreTypeName();
					dataBaseAnswer = lq.getQueAnswer();
					questionType = lq.getQueType();
					Integer quoteLoreId = lq.getLoreInfo().getId();
					Integer loreId = tj.getSendHwInfo().getLoreInfo().getId();
					String[] loreInfo = CommonTools.getRealLoreInfo(quoteLoreId, loreId);//当前题库的指定版本下的知识点
					currentLoreId = Integer.parseInt(loreInfo[0]);
					if(questionType.equals("问答题") || questionType.equals("填空题")){
						if(myAnswer.indexOf("正确") >= 0){
							result = 1;
						}else{
							result = 0;
						}
						dataBaseAnswerChar = dataBaseAnswer;
					}else{
						JSONArray answerOptionArray = JSON.parseArray(answerOptionArrayStr);
						String[] dataBaseAnswerArray = dataBaseAnswer.split(",");
						for(int j = 0; j < dataBaseAnswerArray.length; j++){
							for(int i = 0; i < answerOptionArray.size(); i++){
								String answerOption = answerOptionArray.get(i).toString();
								if(answerOption.indexOf("Module/commonJs/ueditor/jsp/lore") >= 0){
									//表示答案选项是图片--截取前面的路径
									answerOption = answerOption.replace("Module/commonJs/ueditor/jsp/lore/", "");
								}
								if(dataBaseAnswerArray[j].equals(answerOption)){
									dataBaseAnswerChar += Convert.NumberConvertBigChar(i)+",";
									break;
								}
							}
						}
						dataBaseAnswerChar = dataBaseAnswerChar.substring(0, dataBaseAnswerChar.length() - 1);
						if(questionType.equals("多选题")){
							//顺序可以不同
							flag = false;
						}else{//不是多选题答案需要完全匹配(填空选择题、单选题，判断题)
							flag = true;
						}
						if(flag){//完全匹配
							if(dataBaseAnswerChar.equals(myAnswer)){
								result = 1;
							}else{
								result = 0;
							}
						}else{//答案顺序可以不同
							String[] myAnserArray = myAnswer.split(",");
							String[] realAnswerArray = dataBaseAnswerChar.split(",");
							String newMyAnswer = CommonTools.arraySort(myAnserArray);//排序后我的答案
							String newRealAnswer = CommonTools.arraySort(realAnswerArray);//排序后后台正确答案
							if(newMyAnswer.equals(newRealAnswer)){
								result = 1;
							}else{
								result = 0;
							}
						}
						for(int i = 0 ; i < answerOptionArray.size() ; i++){
							answerOptionStr[i] = answerOptionArray.get(i).toString();
						}
						HwTraceStudyLogInfo htsl = slm.getEntityByTjId(tjId);
						if(htsl != null){
							isFinish = htsl.getIsFinish();
							if(isFinish.equals(2)){//如果状态为2，说明是新开的题，studyLogId清0.
								studyLogId = 0;
							}else{
								studyLogId = htsl.getId();
							}
						}
						if(studyLogId > 0){//表示是继续之前的未做完的题（修改log里面的记录）
							if(sdm.listLastInfoByLogId(studyLogId).get(0).getLoreQuestion().getId().equals(lqId)){
								updateFlag = false;
								msg = "reSubmit";//不能重复提交
							}else{
								updateFlag = true;
								step = htsl.getStep();
								if(isFinish.equals(1)){//表示本知识点还未完成
									if(stepComplete.equals(1)){//表示该阶段已经完成
										//将step增加1，stepComplete重新清0
										step++;
										stepComplete = 0;
										oldStepMoney = 0;
									}
								}
								if(loreType.equals("巩固训练")){
									//巩固训练只修改access状态为31，只要不是最后的提交，下次还会继续停留在学习当前知识点的状态
									//-1表示不修改对应值
									updateFlag = slm.updateStudyLog(studyLogId, 3, 0, -1, -1, 31, -1,"");
								}else{//
									updateFlag = slm.updateStudyLog(studyLogId, step, stepComplete, isFinish, oldStepMoney, 0, -1,currTime);
								}
							}
						}else{//表示新开的题
							//step值为1，stepComplete为0，isFinish为1;
							if(result == 1){
								oldStepMoney++;
							}
							//此处由于是巴菲特关联知识点，巴菲特作为第一节，知识点作为第2节，所有首次插入巴菲特知识点学习记录时step默认数值为2
							step = 2;
							studyLogId = slm.addHwStudyLog(tjId, stuId, step, stepComplete, oldStepMoney, 0, 1);
							if(studyLogId > 0){
								updateFlag = true;
							}
						}
						if(studyLogId > 0 &&  updateFlag == true){
							Integer questionNumber_curr = sdm.getQuestionNumberByOption(studyLogId, lqId) + 1;
							sdm.addHTSDetail(stuId, studyLogId, lqId, currentLoreId, questionStep, dataBaseAnswerChar, result, myAnswer, answerOptionStr[0],
									answerOptionStr[1],answerOptionStr[2],answerOptionStr[3],
									answerOptionStr[4], answerOptionStr[5], questionNumber_curr);
							//修改用户中的经验和金币数（答一题增加1经验，答对一题再增加1经验）
							Integer coin = 0;
							Integer experience = Constants.EXPERIENCE;
							if(result == 1){//答题正确
								if(loreType.equals("巩固训练")){//巩固训练不计分
									coin = 0;
									experience = 0;
								}else{
									coin =  10;
									experience += Constants.EXPERIENCE;
								}
							}
							//修改用户的经验、金币数（增加）
							um.updateUser(stuId, coin, experience, 0, 0);
							msg = "success";
						}
					}
				}
			}
		}
		map.put("result", msg);
		map.put("studyResult", result);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 当前阶段完成(最后提交动作)，修改指定logId的stepComplete,isFinish状态
	 * @author wm
	 * @date 2019-8-20 下午05:47:18
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward updateLogStatus(ActionMapping mapping ,ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		HwTraceStudyLogManager slm = (HwTraceStudyLogManager) AppFactory.instance(null).getApp(Constants.WEB_HW_TRACE_STUDY_LOG_INFO);
		HwTraceStudyDetailManager sdm = (HwTraceStudyDetailManager) AppFactory.instance(null).getApp(Constants.WEB_HW_TRACE_STUDY_DETAIL_INFO);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "error";
		Integer tjId = CommonTools.getFinalInteger("tjId", request);//家庭作业做题统计编号
		Integer stepComplete = Integer.parseInt(request.getParameter("stepComplete"));
		Integer isFinish = CommonTools.getFinalInteger("isFinish", request);
		Integer access = CommonTools.getFinalInteger("access", request);
		Integer step = CommonTools.getFinalInteger("step", request);
		String submitType = CommonTools.getFinalStr("type", request);;//study(巩固训练),diagnosis(针对性诊断和再次诊断)
		Integer currentLoreId = CommonTools.getFinalInteger("currentLoreId", request);//当前做题的知识点编号
		Integer loreId = 0;//发送的家庭作业题库属于那个知识点名下（指定出版社下）
		Integer studyLogId = 0;
		Integer taskNumber = 0;
		if(tjId > 0){
			HwTraceStudyLogInfo htsl = slm.getEntityByTjId(tjId);
			if(htsl != null){
				studyLogId = htsl.getId();
				loreId = htsl.getHwStudyTjInfo().getSendHwInfo().getLoreInfo().getId();
				taskNumber = htsl.getTaskNumber() + 1;
				if(step.equals(3)){//再次诊断时用
					if(access.equals(1)){//再次诊断全部正确
						String[] studyPath = CommonTools.getLorePath(loreId, "sutdy");
						String studyPath_new = CommonTools.getCurrentStudyPath_new(studyPath[0], currentLoreId);
						if(studyPath_new.split(":").length == 1){//表示当前知识点是本知识点之前的最后一个知识点
							//表示当前层完成，stepComplete = 1;
							stepComplete = 0;
							access = 2;
							step = 4;
							isFinish = 1;
						}
					}
				}else{
					//根据学习记录编号获取有无当前知识点指定类型的答题记录
					List<HwTraceStudyDetailInfo>  sdList = sdm.listExistInfoByOption(studyLogId, currentLoreId, "再次诊断");
					if(submitType.equals("study")){//5步学习法学完后的提交动作
						if(sdList.size() > 0){//表示之前有做过的答题记录
							access = 3;
						}else{//表示还没做过再次诊断
							access = 4;
						}
					}else{//再次诊断时(针对性诊断的step不可能是3)再次诊断后的提交动作
						if(sdList.size() > 0){//表示之前有做过的答题记录
							access = 31;
						}else{//表示还没做过再次诊断
							access = 41;
						}
					}
				}
			}else if(step.equals(4)){
				if(access == 1){//再次诊断全部正确
					stepComplete = 0;
					access = 2;
					step = 4;
					isFinish = 1;
				}else{
					//根据学习记录编号获取有无当前知识点指定类型的答题记录
					List<HwTraceStudyDetailInfo>  blsdList = sdm.listExistInfoByOption(studyLogId, currentLoreId, "再次诊断");
					if(submitType.equals("study")){//5步学习法学完后的提交动作
						if(blsdList.size() > 0){//表示之前有做过的答题记录
							access = 3;
						}else{//表示还没做过再次诊断
							access = 4;
						}
					}else{//再次诊断时(针对性诊断的step不可能是3)再次诊断后的提交动作
						if(blsdList.size() > 0){//表示之前有做过的答题记录
							access = 31;
						}else{//表示还没做过再次诊断
							access = 41;
						}
					}
				}
			}
			//step=0表示不对step进行修改
			boolean flag = slm.updateStudyLog(studyLogId, step, stepComplete, isFinish, -1, access, taskNumber,"");
			if(flag){
				msg = "success";
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 获取五步学习法内容
	 * @author wm
	 * @date 2019-8-20 下午06:07:20
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getStepStudyData(ActionMapping mapping ,ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		LoreQuestionManager lqm = (LoreQuestionManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_QUESTION_INFO);
		LoreInfoManager lm = (LoreInfoManager)AppFactory.instance(null).getApp(Constants.WEB_LORE_INFO);
		HwStudyTjManager tjm = (HwStudyTjManager) AppFactory.instance(null).getApp(Constants.WEB_HW_STUDY_TJ_INFO);
		String loreTypeName = CommonTools.getFinalStr("loreTypeName", request);//五步类型video,guide,loreList,example,practice
		Integer currLoreId = CommonTools.getFinalInteger("currentLoreId", request);//即将要学习的知识点（就是map接口中的nextLoreIdArray--学习时为单个id）
		Integer tjId = CommonTools.getFinalInteger("tjId", request);
		String msg = "noInfo";
		Map<String,Object> map = new HashMap<String,Object>();
		Integer quoteLoreId = CommonTools.getQuoteLoreId(currLoreId);
		HwStudyTjInfo tj = tjm.getEntityById(tjId);
		if(tj != null){
			map.put("loreName", tj.getSendHwInfo().getHwTitle());
			map.put("subDetail", "检测你对该知识点的掌握情况");
			if(loreTypeName.equals("video")){//视频讲解
				List<LoreQuestion> lqList = lqm.listInfoByLoreId(quoteLoreId, "知识讲解", 0);
				if(lqList.size() > 0){
					msg = "success";
					map.put("sourceDetail", lqList.get(0).getQueAnswer());
					map.put("loreTypeName", loreTypeName);
				}else{
					msg = "noInfo";
				}
			}else if(loreTypeName.equals("guide") || loreTypeName.equals("loreList")){//点拨指导//知识清单
				if(loreTypeName.equals("guide")){
					loreTypeName = "点拨指导";
				}else{
					loreTypeName = "知识清单";
				}
				msg = "success";
				List<LoreQuestion> lqList = lqm.listInfoByLoreId(quoteLoreId, loreTypeName, 0);
				if(lqList.size() > 0){
					Integer lqId = lqList.get(0).getId();
					List<LoreQuestionSubInfo> lqsList = lqm.listLQSInfoByLqId(lqId, "");
					if(lqsList.size() > 0){
						List<Object> list_d = new ArrayList<Object>();
						for(LoreQuestionSubInfo lqs : lqsList){
							String loreType = lqs.getLoreTypeName();
							Map<String,Object> map_d = new HashMap<String,Object>();
							map_d.put("loreType", loreType);
							map_d.put("lqsTitle", lqs.getLqsTitle());
							map_d.put("lqsContent", lqs.getLqsContent());
							list_d.add(map_d);
						}
						map.put("sourceDetail", list_d);
						map.put("loreTypeName", loreTypeName);
					}else{
						msg = "noInfo";
					}
				}
			}else if(loreTypeName.equals("example")){//解题示范
				loreTypeName = "解题示范";
				msg = "success";
				List<LoreQuestion> lqList = lqm.listInfoByLoreId(quoteLoreId, loreTypeName, 0);
				if(lqList.size() > 0){
					List<Object> list_d = new ArrayList<Object>();
					for(LoreQuestion lq : lqList){
						Map<String,Object> map_d = new HashMap<String,Object>();
						map_d.put("queSub", lq.getQueSub());
						map_d.put("queAnswer", lq.getQueAnswer());
						map_d.put("queResolution", lq.getQueResolution());
						list_d.add(map_d);
					}
					map.put("sourceDetail", list_d);
					map.put("loreTypeName", loreTypeName);
				}else{
					msg = "noInfo";
				}
			}else if(loreTypeName.equals("practice")){//巩固训练
				loreTypeName = "巩固训练";
				msg = "success";
				if(currLoreId > 0){
					List<LoreQuestion> lqList = lqm.listInfoByLoreId(quoteLoreId, loreTypeName, 0);
					if(lqList.size() > 0){
						List<Object> list_d = new ArrayList<Object>();
						for(LoreQuestion lq : lqList){
							Map<String,Object> map_d = new HashMap<String,Object>();
							map_d.put("lqId", lq.getId());
							LoreInfo lore = lm.getEntityById(currLoreId);
							map_d.put("currLoreId", currLoreId);
							map_d.put("currLoreName", lore.getLoreName());
							String lqType = lq.getQueType();
							map_d.put("loreType", lq.getLoreTypeName());
							map_d.put("lqType", lqType);
							map_d.put("lqType", lq.getQueType());
							map_d.put("lqSub", lq.getQueSub());
							map_d.put("answerA", lq.getA());
							map_d.put("answerB", lq.getB());
							map_d.put("answerC", lq.getC());
							map_d.put("answerD", lq.getD());
							map_d.put("answerE", lq.getE());
							map_d.put("answerF", lq.getF());
							if(lqType.equals("单选题") || lqType.equals("多选题") || lqType.equals("判断题") || lqType.equals("填空题") || lqType.equals("问答题")){
								map_d.put("answerNum", 1);
							}else{//填空选择题
								map_d.put("answerNum", lq.getQueAnswer().split(",").length);
							}
							if(lqType.equals("填空题") || lqType.equals("问答题")){
								map_d.put("realAnswer", lq.getQueAnswer());
							}
							//巩固训练全部都需要重新做
							list_d.add(map_d);
						}
						map.put("sourceDetail", list_d);
						map.put("loreTypeName", loreTypeName);
						map.put("tjId", tjId);
					}else{
						msg = "noInfo";
					}
				}
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	
	/**
	 * 家庭作业最后提交动作
	 * @author wm
	 * @date 2019-8-20 下午06:17:47
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward updateHwCompleteStatus(ActionMapping mapping ,ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		HwStudyTjManager tjm = (HwStudyTjManager) AppFactory.instance(null).getApp(Constants.WEB_HW_STUDY_TJ_INFO);
		HwTraceStudyLogManager slm = (HwTraceStudyLogManager) AppFactory.instance(null).getApp(Constants.WEB_HW_TRACE_STUDY_LOG_INFO);
		Integer tjId = CommonTools.getFinalInteger("tjId", request);
		Integer stuId = CommonTools.getLoginUserId(request);
		Map<String,Boolean> map = new HashMap<String,Boolean>();
		String msg = "error";
		boolean submitFlag = false;
		if(tjId > 0){
			HwStudyTjInfo tj = tjm.getEntityById(tjId);
			if(tj != null){
				if(tj.getUser().getId().equals(stuId)){
					if(tj.getComStatus().equals(0)){//未完成状态下才能提交
						if(tj.getAllNum().equals(tj.getSuccNum() + tj.getErrorNum())){//所有题都做过才能提交
							if(tj.getSendHwInfo().getTraceStatus().equals(0)){//没开启溯源可直接提交
								submitFlag = true;
							}else{//开启溯源，查看溯源学习记录是否完成
								HwTraceStudyLogInfo hsl = slm.getEntityById(tjId);
								if(hsl != null){
									if(hsl.getIsFinish().equals(2)){//作业溯源学习记录任务完成才能提交
										submitFlag = true;
									}
								}
							}
							if(submitFlag){
//								tjm.updateInfoById(tjId, conStatus, succNum, errorNum)
							}
						}
					}
				}
			}
		}
		map.put("result", submitFlag);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
}

