/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.zsd.action.homework;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.zsd.action.base.Transcode;
import com.zsd.factory.AppFactory;
import com.zsd.module.BuffetAbilityTypeInfo;
import com.zsd.module.BuffetMindTypeInfo;
import com.zsd.module.BuffetTypeInfo;
import com.zsd.module.Chapter;
import com.zsd.module.ClassInfo;
import com.zsd.module.Edition;
import com.zsd.module.Education;
import com.zsd.module.HwAbilityRelationInfo;
import com.zsd.module.HwMindRelationInfo;
import com.zsd.module.HwQueInfo;
import com.zsd.module.HwStudyDetailInfo;
import com.zsd.module.HwStudyTjInfo;
import com.zsd.module.LoreInfo;
import com.zsd.module.LoreQuestion;
import com.zsd.module.SendHwInfo;
import com.zsd.module.TeaQueInfo;
import com.zsd.module.User;
import com.zsd.module.UserClassInfo;
import com.zsd.page.PageConst;
import com.zsd.service.BuffetAllManager;
import com.zsd.service.ChapterManager;
import com.zsd.service.ClassInfoManager;
import com.zsd.service.EditionManager;
import com.zsd.service.EducationManager;
import com.zsd.service.HwAbilityRelationManager;
import com.zsd.service.HwMindRelationManager;
import com.zsd.service.HwQueManager;
import com.zsd.service.HwStudyDetailManager;
import com.zsd.service.HwStudyTjManager;
import com.zsd.service.LoreInfoManager;
import com.zsd.service.LoreQuestionManager;
import com.zsd.service.SendHwManager;
import com.zsd.service.TeaQueManager;
import com.zsd.service.UserClassInfoManager;
import com.zsd.service.UserManager;
import com.zsd.tools.CommonTools;
import com.zsd.tools.Convert;
import com.zsd.tools.CurrentTime;
import com.zsd.util.Constants;

/** 
 * MyEclipse Struts
 * Creation date: 07-23-2019
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class HomeWorkAction extends DispatchAction {
	
	/**
	 * 班级列表按照降序排列（九年级1班）
	 * @author Administrator
	 * @createDate 2019-8-3
	 */
	@SuppressWarnings({ "unchecked", "rawtypes" })
	private class SortCName implements Comparator {
		@Override
	    public int compare(Object obj0, Object obj1) {
	      Map<String, String> map0 = (Map) obj0;
	      Map<String, String> map1 = (Map) obj1;
	      int flag = map0.get("cName").toString().compareTo(map1.get("cName").toString());
	      return flag; // 不取反，则按正序排列
	    }
	 }
	
	/**
	 * 按照班级号升序排列
	 * @author Administrator
	 * @createDate 2019-8-4
	 */
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public static class SortGName implements Comparator {
		@Override
	    public int compare(Object obj0, Object obj1) {
	      Map<String, String> map0 = (Map) obj0;
	      Map<String, String> map1 = (Map) obj1;
	      int flag = map0.get("gradeNo").toString().compareTo(map1.get("gradeNo").toString());
	      return flag; // 不取反，则按正序排列
	    }
	 }
	
	/**
	 * 导向系统家庭作业题库页面
	 * @author wm
	 * @date 2019-7-23 下午05:20:26
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward goHwPage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		return mapping.findForward("hwPage");
	}
	
	/**
	 * 分页获取系统家庭作业题库
	 * @author wm
	 * @date 2019-7-23 下午05:21:35
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception 
	 */
	public ActionForward getHwPageData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		HwQueManager hqm = (HwQueManager) AppFactory.instance(null).getApp(Constants.WEB_HW_QUE_INFO);
		HwMindRelationManager hmrm = (HwMindRelationManager) AppFactory.instance(null).getApp(Constants.WEB_HW_MIND_RELATION_INFO);
		HwAbilityRelationManager harm = (HwAbilityRelationManager) AppFactory.instance(null).getApp(Constants.WEB_HW_ABILITY_RELATION_INFO);
		Integer loreId = CommonTools.getFinalInteger("loreId", request);
		Integer count = hqm.getCountByLoreId(loreId);
		String msg = "暂无记录";
		Map<String,Object> map = new HashMap<String,Object>();
		if(count > 0){
			Integer pageSize = PageConst.getPageSize(String.valueOf(request.getParameter("limit")), 10);//等同于pageSize
			Integer pageNo = CommonTools.getFinalInteger("page", request);//等同于pageNo
			List<HwQueInfo> hqList = hqm.listPageInfoByLoreId(loreId, pageNo, pageSize);
			msg = "success";
			List<Object> list_d = new ArrayList<Object>();
			if(hqList.size() > 0){
				for(HwQueInfo hq : hqList){
					Map<String,Object> map_d = new HashMap<String,Object>();
					Integer hwId = hq.getId();
					map_d.put("id", hwId);
					map_d.put("btName", hq.getBuffetTypeInfo().getTypes());
					map_d.put("loreName", hq.getLoreInfo().getLoreName());
					map_d.put("hwTitle", hq.getTitle());
					String mindStr = "";
					String abilityStr = "";
					List<HwMindRelationInfo> hmrList = hmrm.listInfoByOpt(0, hwId);
					for(HwMindRelationInfo hmr : hmrList){
						mindStr += hmr.getBuffetMindTypeInfo().getMind() + "、";
					}
					if(!mindStr.equals("")){
						mindStr = mindStr.substring(0, mindStr.length() - 1);
					}
					List<HwAbilityRelationInfo>  harList = harm.listInfoByOpt(0, hwId);
					for(HwAbilityRelationInfo har : harList){
						abilityStr += har.getBuffetAbilityTypeInfo().getAbility() + "、";
					}
					if(!abilityStr.equals("")){
						abilityStr = abilityStr.substring(0, abilityStr.length() - 1);
					}
					map_d.put("mindStr", mindStr);
					map_d.put("abilityStr", abilityStr);
					map_d.put("inUse", hq.getInUse().equals(0) ? "有效" : "无效");
					list_d.add(map_d);
				}
				map.put("data", list_d);
				map.put("count", count);
				map.put("code", 0);
			}
		}
		map.put("msg", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 设置家庭作业题库有/无效状态
	 * @author wm
	 * @date 2019-7-24 上午10:25:20
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward setInUseStatus(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		HwQueManager hqm = (HwQueManager) AppFactory.instance(null).getApp(Constants.WEB_HW_QUE_INFO);
		Integer hwId = CommonTools.getFinalInteger("hwId", request);
		Integer inUse = CommonTools.getFinalInteger("inUse", request);//有效状态（0：有效，1：无效）
		Map<String,String> map = new HashMap<String,String>();
		String msg = "error";
		boolean flag = hqm.updateInUseById(hwId, inUse, CommonTools.getLoginAccount(request));
		if(flag){
			msg = "success";
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	
	/**
	 * 浏览指定知识下系统家庭作业
	 * @author wm
	 * @date 2019-7-24 上午10:58:22
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getHwDetailData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		HwQueManager hqm = (HwQueManager) AppFactory.instance(null).getApp(Constants.WEB_HW_QUE_INFO);
		HwMindRelationManager hmrm = (HwMindRelationManager) AppFactory.instance(null).getApp(Constants.WEB_HW_MIND_RELATION_INFO);
		HwAbilityRelationManager harm = (HwAbilityRelationManager) AppFactory.instance(null).getApp(Constants.WEB_HW_ABILITY_RELATION_INFO);
		Integer loreId = CommonTools.getFinalInteger("loreId", request);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "noInfo";
		List<Object> list_d_xqjf = new ArrayList<Object>();
		List<Object> list_d_ffgn = new ArrayList<Object>();
		List<Object> list_d_swxl = new ArrayList<Object>();
		List<Object> list_d_zlkf = new ArrayList<Object>();
		List<Object> list_d_nlpy = new ArrayList<Object>();
		List<Object> list_d_zksl = new ArrayList<Object>();
		List<HwQueInfo> hqList = hqm.listInfoByOpt(loreId, 0, -1, false);
		if(hqList.size() > 0){
			for(HwQueInfo hq : hqList){
				Map<String,Object> map_d = new HashMap<String,Object>();
				Integer hwId = hq.getId();
				List<HwMindRelationInfo> hmrList = hmrm.listInfoByOpt(0, hwId);
				List<HwAbilityRelationInfo>  harList = harm.listInfoByOpt(0, hwId);
				String swType = "";//思维
				String nlType = "";//能力
				for(HwMindRelationInfo hmr : hmrList){
					swType += hmr.getBuffetMindTypeInfo().getMind() + "、";
				}
				for(HwAbilityRelationInfo har : harList){
					nlType += har.getBuffetAbilityTypeInfo().getAbility() + "、";
				}
				if(!swType.equals("")){
					swType = swType.substring(0, swType.length() - 1);
				}
				if(!nlType.equals("")){
					nlType = nlType.substring(0, nlType.length() - 1);
				}
				String hqType = hq.getBuffetTypeInfo().getTypes();
				map_d.put("hqTitle", hq.getTitle());
				map_d.put("hqType", hq.getQueType());
				map_d.put("swType", swType);
				map_d.put("nlType", nlType);
				map_d.put("subject", hq.getSubject());
				map_d.put("hqAnswer", hq.getAnswer());
				map_d.put("hqResolution", hq.getResolution());//解析
				if(hqType.equals("兴趣激发")){
					list_d_xqjf.add(map_d);
				}else if(hqType.equals("方法归纳")){
					list_d_ffgn.add(map_d);
				}else if(hqType.equals("思维训练")){
					list_d_swxl.add(map_d);
				}else if(hqType.equals("智力开发")){
					list_d_zlkf.add(map_d);
				}else if(hqType.equals("能力培养")){
					list_d_nlpy.add(map_d);
				}else if(hqType.equals("中/高考涉猎")){
					list_d_zksl.add(map_d);
				}
			}
			map.put("xqjf", list_d_xqjf);
			map.put("ffgn", list_d_ffgn);
			map.put("swxl", list_d_swxl);
			map.put("zlkf", list_d_zlkf);
			map.put("nlpy", list_d_nlpy);
			map.put("zksl", list_d_zksl);
			msg = "success";
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 获取当前题型的题数
	 * @author wm
	 * @date 2019-7-24 下午04:26:56
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getCurrMaxNum(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		HwQueManager hqm = (HwQueManager) AppFactory.instance(null).getApp(Constants.WEB_HW_QUE_INFO);
		Integer btId = CommonTools.getFinalInteger("btId", request);//基础类型编号
		Integer loreId = CommonTools.getFinalInteger("loreId", request);//知识点编号
		Map<String,Integer> map = new HashMap<String,Integer>();
		List<HwQueInfo> bqList = hqm.listInfoByOpt(loreId, btId, -1, true);
		Integer num = 1;
		if(bqList.size() > 0){
			num = bqList.get(0).getNum() + 1;
		}
		map.put("currNum", num);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	
	/**
	 * 增加系统家庭作业
	 * @author wm
	 * @date 2019-7-24 下午04:28:29
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward addHw(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		HwQueManager hqm = (HwQueManager) AppFactory.instance(null).getApp(Constants.WEB_HW_QUE_INFO);
		HwMindRelationManager hmrm = (HwMindRelationManager) AppFactory.instance(null).getApp(Constants.WEB_HW_MIND_RELATION_INFO);
		HwAbilityRelationManager harm = (HwAbilityRelationManager) AppFactory.instance(null).getApp(Constants.WEB_HW_ABILITY_RELATION_INFO);
		BuffetAllManager bam = (BuffetAllManager) AppFactory.instance(null).getApp(Constants.WEB_BUFFET_ALL_INFO);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "error";
		Integer btId = CommonTools.getFinalInteger("btId", request);//基础类型编号
		Integer loreId = CommonTools.getFinalInteger("loreId", request);//通用版下的知识点编号
		String mindIdStr = CommonTools.getFinalStr("mindIdStr", request);//思维类型编号逗号拼接
		String abilityIdStr = CommonTools.getFinalStr("abilityIdStr", request);//能力类型编号逗号拼接
		String title = "";//标题
		List<HwQueInfo> bqList = hqm.listInfoByOpt(loreId, btId, -1, true);
		Integer orders = 0;//排序
		Integer num = 1;
		String btName = bam.getEntityByBtId(btId).getTypes();
		if(bqList.size() > 0){
			num = bqList.get(0).getNum() + 1;
			orders = bqList.get(0).getOrders() + 1;
		}else{
			if(btName.equals("兴趣激发")){
				orders = 1;
			}else if(btName.equals("方法归纳")){
				orders = 101;
			}else if(btName.equals("思维训练")){
				orders = 201;
			}else if(btName.equals("智力开发")){
				orders = 301;
			}else if(btName.equals("能力培养")){
				orders = 401;
			}else if(btName.equals("中/高考涉猎")){
				orders = 501;
			}
		}
		title = btName + "第" + num + "题";
		String queSub =  Transcode.unescape_new1("queSub", request);//题干
		String queAnswer = Transcode.unescape_new1("queAnswer", request);//答案
		String queResolution = Transcode.unescape_new1("queResolution", request);//解析
		String queType = Transcode.unescape_new1("queType", request);//题干类型
		if(!mindIdStr.equals("") && !abilityIdStr.equals("")){
			Integer hwId = hqm.addHW(btId, loreId, num, title, queSub, queAnswer, queResolution, queType, orders, CommonTools.getLoginAccount(request));
			if(hwId > 0){
				hmrm.addHMR(mindIdStr, hwId);
				harm.addHAR(abilityIdStr, hwId);
				msg = "success";
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 获取指定系统家庭作业详情
	 * @author wm
	 * @date 2019-7-24 下午05:10:23
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getHwDetail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		HwQueManager hqm = (HwQueManager) AppFactory.instance(null).getApp(Constants.WEB_HW_QUE_INFO);
		HwMindRelationManager hmrm = (HwMindRelationManager) AppFactory.instance(null).getApp(Constants.WEB_HW_MIND_RELATION_INFO);
		HwAbilityRelationManager harm = (HwAbilityRelationManager) AppFactory.instance(null).getApp(Constants.WEB_HW_ABILITY_RELATION_INFO);
		BuffetAllManager bam = (BuffetAllManager) AppFactory.instance(null).getApp(Constants.WEB_BUFFET_ALL_INFO);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "error";
		Integer hwId = CommonTools.getFinalInteger("hwId", request);//指定系统家庭作业编号
		if(hwId > 0){
			HwQueInfo hw = hqm.getEntityById(hwId);
			if(hw != null){
				msg = "success";
				map.put("hwId", hw.getId());
				map.put("hwType", hw.getQueType());
				List<BuffetTypeInfo> btList = bam.listBTInfo();
				List<Object> list_bt = new ArrayList<Object>();
				List<Object> list_mind = new ArrayList<Object>();
				List<Object> list_ability = new ArrayList<Object>();
				for(BuffetTypeInfo bt : btList){
					Map<String,Object> map_d = new HashMap<String,Object>();
					map_d.put("btId", bt.getId());
					map_d.put("btName", bt.getTypes());
					if(hw.getBuffetTypeInfo().getId().equals(bt.getId())){
						map_d.put("selFlag", true);
					}else{
						map_d.put("selFlag", false);
					}
					list_bt.add(map_d);
				}
				map.put("btList", list_bt);
				List<BuffetMindTypeInfo> bmList = bam.listBMTInfo();
				List<HwMindRelationInfo> hmrList = hmrm.listInfoByOpt(0, hwId);
				for(BuffetMindTypeInfo bmt : bmList){
					Map<String,Object> map_d = new HashMap<String,Object>();
					map_d.put("bmId", bmt.getId());
					map_d.put("bmName", bmt.getMind());
					boolean selFlag = false;
					for(HwMindRelationInfo hmr : hmrList){
						if(hmr.getBuffetMindTypeInfo().getId().equals(bmt.getId())){
							selFlag = true;
							break;
						}
					}
					map_d.put("selFlag", selFlag);
					list_mind.add(map_d);
				}
				map.put("bmList", list_mind);
				List<BuffetAbilityTypeInfo> baList = bam.listBATInfo();
				List<HwAbilityRelationInfo>  harList = harm.listInfoByOpt(0, hwId);
				for(BuffetAbilityTypeInfo bat : baList){
					Map<String,Object> map_d = new HashMap<String,Object>();
					map_d.put("baId", bat.getId());
					map_d.put("baName", bat.getAbility());
					boolean selFlag = false;
					for(HwAbilityRelationInfo har : harList){
						if(har.getBuffetAbilityTypeInfo().getId().equals(bat.getId())){
							selFlag = true;
							break;
						}
					}
					map_d.put("selFlag", selFlag);
					list_ability.add(map_d);
				}
				map.put("baList", list_ability);
				map.put("hwTitle", hw.getTitle());
				map.put("queSub", hw.getSubject());
				map.put("queAnswer", hw.getAnswer());
				map.put("queOptNum", hw.getAnswer().split(",").length);
				map.put("queResolution", hw.getResolution());
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 修改指定的系统家庭作业
	 * @author wm
	 * @date 2019-7-25 上午11:06:24
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward updateHwDetail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		HwQueManager hqm = (HwQueManager) AppFactory.instance(null).getApp(Constants.WEB_HW_QUE_INFO);
		HwMindRelationManager hmrm = (HwMindRelationManager) AppFactory.instance(null).getApp(Constants.WEB_HW_MIND_RELATION_INFO);
		HwAbilityRelationManager harm = (HwAbilityRelationManager) AppFactory.instance(null).getApp(Constants.WEB_HW_ABILITY_RELATION_INFO);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "error";
		Integer hwId = CommonTools.getFinalInteger("hwId", request);//题库编号
		String queType = Transcode.unescape_new1("queType", request);//类型
		String mindIdStr = CommonTools.getFinalStr("mindIdStr", request);//思维类型编号逗号拼接
		String abilityIdStr = CommonTools.getFinalStr("abilityIdStr", request);//能力类型编号逗号拼接
		String queSub = Transcode.unescape_new1("queSub", request);//题干
		String queAnswer = Transcode.unescape_new1("queAnswer", request);//答案，多个用逗号隔开
		String queResolution = Transcode.unescape_new1("queResolution", request);//解析
		if(hwId > 0){
			HwQueInfo hw = hqm.getEntityById(hwId);
			if(hw != null){
				if(!mindIdStr.equals("") && !abilityIdStr.equals("")){
					boolean flag = hqm.updateInfoById(hwId, queSub, queAnswer, queResolution, queType, CommonTools.getLoginAccount(request));
					if(flag){
						hmrm.delHMR(hwId);
						harm.delHAR(hwId);
						hmrm.addHMR(mindIdStr, hwId);
						harm.addHAR(abilityIdStr, hwId);
						msg = "success";
					}
				}
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 导向老师题库页面
	 * @author wm
	 * @date 2019-7-26 上午09:23:05
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward goTeaQuePage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		return mapping.findForward("tqPage");
	}
	
	/**
	 * 分页获取指定知识点下（指定老师的题库列表）--如果是知识点管理员看的是所有老师上传的题库列表
	 * @author wm
	 * @date 2019-7-26 上午09:37:17
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getTeaQuePageData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		TeaQueManager tqm = (TeaQueManager) AppFactory.instance(null).getApp(Constants.WEB_TEA_QUE_INFO);
		Integer loreId = CommonTools.getFinalInteger("loreId", request);//出版社下的知识点编号
		LoreInfoManager lm = (LoreInfoManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_INFO);
		Integer currUserId = 0;
		String msg = "暂无记录";
		Map<String,Object> map = new HashMap<String,Object>();
		String roleName = CommonTools.getLoginRoleName(request);
		if(roleName.equals("老师") || roleName.equals("知识点管理员")){
			if(roleName.equals("老师")){
				currUserId = CommonTools.getLoginUserId(request);
			}
			LoreInfo lore = lm.getEntityById(loreId);
			Integer ediId = lore.getChapter().getEducation().getEdition().getId();
			if(ediId > 1){//老师增加题库时选择的是其他版本
				//需要把其他版本的知识点转成通用版知识点
				loreId = lore.getMainLoreId();
			}
			Integer count = tqm.getCountByOpt(loreId, currUserId,-1);
			if(count > 0){
				Integer pageSize = PageConst.getPageSize(String.valueOf(request.getParameter("limit")), 10);//等同于pageSize
				Integer pageNo = CommonTools.getFinalInteger("page", request);//等同于pageNo
				List<TeaQueInfo> tqList = tqm.listInfoByOpt(loreId, currUserId, -1,true, pageNo, pageSize);
				msg = "success";
				List<Object> list_d = new ArrayList<Object>();
				String queTitlePre = "";
				if(roleName.equals("知识点管理员")){
					queTitlePre = tqList.get(0).getUser().getRealName() + "老师上传";
				}
				for(TeaQueInfo tq : tqList){
					Map<String,Object> map_d = new HashMap<String,Object>();
					map_d.put("tqId", tq.getId());
					map_d.put("queTitle", queTitlePre + tq.getQueTitle());
					map_d.put("tqType", "针对性诊断");
					map_d.put("inUse", tq.getInUse().equals(0) ? "有效" : "无效");
					map_d.put("addTeaName", tq.getUser().getRealName());//上传题老师
					list_d.add(map_d);
				}
				map.put("data", list_d);
				map.put("count", count);
				map.put("code", 0);
			}
		}
		map.put("msg", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}

	/**
	 * 获取指定题库详情
	 * @author wm
	 * @date 2019-7-26 下午04:39:15
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getTeaQueDetail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		TeaQueManager tqm = (TeaQueManager) AppFactory.instance(null).getApp(Constants.WEB_TEA_QUE_INFO);
		Integer tqId = CommonTools.getFinalInteger("tqId", request);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "error";
		TeaQueInfo tq = tqm.getEntityById(tqId);
		String roleName = CommonTools.getLoginRoleName(request);
		boolean flag = false;
		if(tq != null){
			String queTitle = tq.getQueTitle();
			if(roleName.equals("老师")){
				if(tq.getUser().getId().equals(CommonTools.getLoginUserId(request))){
					flag = true;
				}
			}else if(roleName.equals("知识点管理员")){
				flag = true;
				queTitle = tq.getUser().getRealName() + "老师上传" + queTitle;
			}
			if(flag){
				msg = "success";
				map.put("tqId", tq.getId());
				map.put("queTitle", queTitle);
				map.put("queSub", tq.getQueSub());
				map.put("loreName", tq.getLoreInfo().getLoreName());
				map.put("queType", tq.getQueType());
				map.put("queType2", tq.getQueType2());
				map.put("queAnswer", tq.getQueAnswer());
				map.put("queOptNum", tq.getQueAnswer().split(",").length);
				map.put("queResolution", tq.getQueResolution());
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 修改指定老师上传的题库详情
	 * @author wm
	 * @date 2019-7-26 下午05:10:25
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward updateTeaQue(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		TeaQueManager tqm = (TeaQueManager) AppFactory.instance(null).getApp(Constants.WEB_TEA_QUE_INFO);
		Integer tqId = CommonTools.getFinalInteger("tqId", request);
		String queSub = Transcode.unescape_new1("queSub", request);
		String queAnswer = Transcode.unescape_new1("queAnswer", request);
		String queResolution = Transcode.unescape_new1("queResolution", request);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "error";
		Boolean flag = false;
		String roleName = CommonTools.getLoginRoleName(request);
		TeaQueInfo tq = tqm.getEntityById(tqId);
		if(tq != null){
			if(roleName.equals("老师")){
				if(tq.getUser().getId().equals(CommonTools.getLoginUserId(request))){
					flag = true;
				}
			}else if(roleName.equals("知识点管理员")){
				flag = true;
			}
			if(flag){
				flag = tqm.updateInfoById(tqId, queSub, queAnswer, queResolution, "");
				if(flag){
					msg = "success";
				}
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 获取老师上传题库时的标题
	 * @author wm
	 * @date 2019-8-6 下午04:22:38
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getCurrMaxTeaQueNum(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		TeaQueManager tqm = (TeaQueManager) AppFactory.instance(null).getApp(Constants.WEB_TEA_QUE_INFO);
		LoreInfoManager lm = (LoreInfoManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_INFO);
		Integer loreId = CommonTools.getFinalInteger("loreId", request);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "error";
		String roleName = CommonTools.getLoginRoleName(request);
		if(roleName.equals("老师") && loreId > 0){
			LoreInfo lore = lm.getEntityById(loreId);
			Integer ediId = lore.getChapter().getEducation().getEdition().getId();
			if(ediId > 1){//老师增加题库时选择的是其他版本
				//需要把其他版本的知识点转成通用版知识点
				loreId = lore.getMainLoreId();
			}
			Integer userId = CommonTools.getLoginUserId(request);
			List<TeaQueInfo> tqList = tqm.listInfoByOpt(loreId, userId, -1,false, 0, 0);
			Integer currNum = 1;
			if(tqList.size() > 0){
				currNum = tqList.get(tqList.size() - 1).getQueNum() + 1;
			}
			map.put("currNum", "第" + currNum + "题");
			msg = "success";
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 老师增加家庭作业题库
	 * @author wm
	 * @date 2019-7-26 下午05:18:50
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward addTeaQue(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		TeaQueManager tqm = (TeaQueManager) AppFactory.instance(null).getApp(Constants.WEB_TEA_QUE_INFO);
		LoreInfoManager lm = (LoreInfoManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_INFO);
		Integer loreId = CommonTools.getFinalInteger("loreId", request);
		String queType = Transcode.unescape_new1("queType", request);
		String queSub = Transcode.unescape_new1("queSub", request);
		String queAnswer = Transcode.unescape_new1("queAnswer", request);
		String queResolution = Transcode.unescape_new1("queResolution", request);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "error";
		String roleName = CommonTools.getLoginRoleName(request);
		if(roleName.equals("老师") && loreId > 0){
			LoreInfo lore = lm.getEntityById(loreId);
			Integer ediId = lore.getChapter().getEducation().getEdition().getId();
			if(ediId > 1){//老师增加题库时选择的是其他版本
				//需要把其他版本的知识点转成通用版知识点
				loreId = lore.getMainLoreId();
			}
			Integer userId = CommonTools.getLoginUserId(request);
			List<TeaQueInfo> tqList = tqm.listInfoByOpt(loreId, userId, -1,false, 0, 0);
			Integer currNum = 1;
			if(tqList.size() > 0){
				currNum = tqList.get(tqList.size() - 1).getQueNum() + 1;
			}
			Integer tqId = tqm.addTQ(loreId, currNum, lm.getEntityById(loreId).getLoreName() + "第" + currNum + "题", queSub, queAnswer, queResolution, queType, "其他", userId);
			if(tqId > 0){
				msg = "success";
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 浏览老师题库列表
	 * @author wm
	 * @date 2019-8-5 下午06:29:59
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getTeaDetailData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		TeaQueManager tqm = (TeaQueManager) AppFactory.instance(null).getApp(Constants.WEB_TEA_QUE_INFO);
		LoreInfoManager lm = (LoreInfoManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_INFO);
		Integer loreId = CommonTools.getFinalInteger("loreId", request);
		Integer currUserId = CommonTools.getLoginUserId(request);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "noInfo";
		String roleName = CommonTools.getLoginRoleName(request);
		if(roleName.equals("知识点管理员") || roleName.equals("老师")){
			if(loreId > 0 && currUserId > 0){
				if(roleName.equals("知识点管理员")){
					currUserId = 0;
				}
				LoreInfo lore = lm.getEntityById(loreId);
				Integer ediId = lore.getChapter().getEducation().getEdition().getId();
				if(ediId > 1){//老师增加题库时选择的是其他版本
					//需要把其他版本的知识点转成通用版知识点
					loreId = lore.getMainLoreId();
				}
				List<TeaQueInfo> tqList = tqm.listInfoByOpt(loreId, currUserId, -1,false, 0, 0);
				msg = "success";
				List<Object> list_d = new ArrayList<Object>();
				for(TeaQueInfo tq : tqList){
					Map<String,Object> map_d = new HashMap<String,Object>();
					map_d.put("tqId", tq.getId());
					map_d.put("queTitle", tq.getQueTitle());
					map_d.put("queType", tq.getQueType());
					map_d.put("queSub", tq.getQueSub());
					map_d.put("queAnswer", tq.getQueAnswer());
					map_d.put("inUse", tq.getInUse().equals(0) ? "有效" : "无效");
					map_d.put("queResolution", tq.getQueResolution());
					list_d.add(map_d);
				}
				map.put("tqList", list_d);
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 设置老师上传题的有/无效
	 * @author wm
	 * @date 2019-8-6 下午04:55:20
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward setTeaInUseStatus(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		TeaQueManager tqm = (TeaQueManager) AppFactory.instance(null).getApp(Constants.WEB_TEA_QUE_INFO);
		Integer tqId = CommonTools.getFinalInteger("tqId", request);
		Integer inUse = CommonTools.getFinalInteger("inUse", request);//有效状态（0：有效，1：无效）
		String roleName = CommonTools.getLoginRoleName(request);
		Map<String,String> map = new HashMap<String,String>();
		String msg = "error";
		if(roleName.equals("老师") || roleName.equals("知识点管理员")){
			boolean flag = false;
			if(roleName.equals("老师")){
				TeaQueInfo tq = tqm.getEntityById(tqId);
				if(tq != null){
					if(tq.getUser().getId().equals(CommonTools.getLoginUserId(request))){
						flag = true;
					}
				}
			}else{
				flag = true;
			}
			if(flag){
				flag = tqm.updateInUseById(tqId, inUse);
				if(flag){
					msg = "success";
				}
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 导向老师的家庭作业页面
	 * @author wm
	 * @date 2019-7-31 上午10:19:51
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward goTeaHwPage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		return mapping.findForward("teaHwPage");
	}
	
	/**
	 * 导向学生家庭作业页面
	 * @author wm
	 * @date 2019-7-31 上午10:21:49
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward goStuHwPage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		return mapping.findForward("stuHwPage");
	}
	
	
	/**
	 * 获取老师自己所有的班级列表(包括临时接管)--作业记录时用
	 * @author wm
	 * @date 2019-8-3 下午04:56:49
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	@SuppressWarnings("unchecked")
	public ActionForward getMyClassData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		UserClassInfoManager ucm = (UserClassInfoManager) AppFactory.instance(null).getApp(Constants.WEB_USER_CLASS_INFO);
		Integer currUserId = CommonTools.getLoginUserId(request);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "noInfo";
		if(currUserId > 0){
			List<UserClassInfo> ucList = ucm.listTeaInfoByOpt(currUserId, 4);
			if(ucList.size() > 0){
				msg = "success";
				List<Object> list_d = new ArrayList<Object>();
				for(UserClassInfo uc : ucList){
					ClassInfo c = uc.getClassInfo();
					Map<String,Object> map_d = new HashMap<String,Object>();
					map_d.put("cId", c.getId());
					String buildeClassDate = c.getBuildeClassDate();
					String gradeName = Convert.dateConvertGradeName(buildeClassDate);//当前所在的年级
					map_d.put("cName", gradeName+c.getClassName());
					map_d.put("status", uc.getStatus());//1:临时接管，2：永久接管
					list_d.add(map_d);
				}
				SortCName sort = new SortCName();
				Collections.sort(list_d, sort);
				map.put("cList", list_d);
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 获取老师自己所有的班级列表(包括临时接管)--发布作业时用
	 * @author wm
	 * @date 2019-8-3 下午05:58:26
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	@SuppressWarnings("unchecked")
	public ActionForward getMyClassData_1(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		UserClassInfoManager ucm = (UserClassInfoManager) AppFactory.instance(null).getApp(Constants.WEB_USER_CLASS_INFO);
		SendHwManager swm = (SendHwManager) AppFactory.instance(null).getApp(Constants.WEB_SEND_HW_INFO);
		Integer hwType = CommonTools.getFinalInteger("hwType", request);//作业类型1-家庭作业,2-课后复习,3-课前预习
		Integer currUserId = CommonTools.getLoginUserId(request);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "noInfo";
		if(currUserId > 0){
			List<UserClassInfo> ucList = ucm.listTeaInfoByOpt(currUserId, 4);
			if(ucList.size() > 0){
				msg = "success";
				String gradeInfo = "";//1年级
				String classInfo = "";
				String classIdInfo = "";
				Integer subId = ucList.get(0).getSubjectId();//老师所在的学科
				for(UserClassInfo uc : ucList){
					ClassInfo c = uc.getClassInfo();
					String buildeClassDate = c.getBuildeClassDate();
					String gradeName = Convert.dateConvertGradeName(buildeClassDate);//当前所在的年级
					String className = c.getClassName();
					Integer classId = c.getId();
					String[] classInfoArr = classInfo.split(",");
					String[] classIdInfoArr = classIdInfo.split(",");
					if(gradeInfo.contains(gradeName)){
						String[] gradeInfoArr = gradeInfo.split(",");
						for(int j = 0 ; j < gradeInfoArr.length ; j++){
							if(gradeInfoArr[j].equals(gradeName)){
								classInfoArr[j] = classInfoArr[j]+":"+className;
								classInfo = "";
								for(int k = 0 ; k < classInfoArr.length ; k++){
									classInfo += classInfoArr[k] + ",";
								}
								
								classIdInfoArr[j] = classIdInfoArr[j]+":"+classId;
								classIdInfo = "";
								for(int k = 0 ; k < classIdInfoArr.length ; k++){
									classIdInfo += classIdInfoArr[k] + ",";
								}
								break;
							}
						}
					}else{
						gradeInfo += gradeName + ",";
						classInfo += className + ",";
						classIdInfo += classId + ",";
					}
				}
				gradeInfo = gradeInfo.substring(0,gradeInfo.length() - 1);
				classInfo = classInfo.substring(0,classInfo.length() - 1);
				classIdInfo = classIdInfo.substring(0, classIdInfo.length() - 1);
				String[] gradeArr = gradeInfo.split(",");
				List<Object> list_a = new ArrayList<Object>();
				for(int i = 0 ; i < gradeArr.length ; i++){
					Map<String,Object> map_d = new HashMap<String,Object>();
					map_d.put("gradeName", gradeArr[i]);
					map_d.put("gradeNo", Convert.ChineseConvertNumber(gradeArr[i]));
					String[] classArr = classInfo.split(",")[i].split(":");
					String[] classIdArr = classIdInfo.split(",")[i].split(":");
					List<Object> list_a1 = new ArrayList<Object>();
					for(int j = 0 ; j < classArr.length ; j++){
						Map<String,Object> map_d1 = new HashMap<String,Object>();
						map_d1.put("className", classArr[j]);
						map_d1.put("classId", classIdArr[j]);
						//发送老师取0的话，有可能是临时老师发布的作业
						if(swm.listPageInfoByOpt(0, subId, Integer.parseInt(classIdArr[j]), hwType, 0, 0, "", "", false, 0, 0).size() > 0){
							map_d1.put("checkStatus", 0);//该班级存在未检查的指定作业类型下的作业
						}else{
							map_d1.put("checkStatus", 1);//不存在或者未发布
						}
						list_a1.add(map_d1);
					}
					SortCName sort = new SortCName();
					Collections.sort(list_a1, sort);
					map_d.put("cList", list_a1);
					list_a.add(map_d);
				}
				SortGName sort = new SortGName();
				Collections.sort(list_a, sort);
				map.put("gcList", list_a);
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	/**
	 * 获取家庭作业发送列表（老师）
	 * @author wm
	 * @date 2019-7-31 上午10:26:35
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getSendHwData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		SendHwManager swm = (SendHwManager) AppFactory.instance(null).getApp(Constants.WEB_SEND_HW_INFO);
		HwStudyTjManager tjm = (HwStudyTjManager) AppFactory.instance(null).getApp(Constants.WEB_HW_STUDY_TJ_INFO);
		Integer currUserId = CommonTools.getLoginUserId(request);
		Integer classId = CommonTools.getFinalInteger("classId", request);
		Integer opt = CommonTools.getFinalInteger("opt", request);//0:首页，1：作业记录页面
		Integer hwType = CommonTools.getFinalInteger("hwType", request);//作业类型1-家庭作业,2-课后复习,3-课前预习--默认不传
		Integer checkStatus = CommonTools.getFinalInteger("checkStatus", request);//检查状态（0:未检查，1:已检查）--默认传-1
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "noInfo";
		String sDate = CommonTools.getFinalStr("sDate", request);
		String eDate = CommonTools.getFinalStr("eDate", request);
		boolean pageFlag = false;
		Integer pageNo = 1;
		Integer pageSize = 10;
		if(opt.equals(1)){
			pageFlag = true;
			pageNo = CommonTools.getFinalInteger("pageNo", request);
			pageSize = CommonTools.getFinalInteger("pageSize", request);
			if(pageSize <= 0){
				pageSize = 10;
			}
			if(sDate.equals("") && eDate.equals("")){
				sDate = CurrentTime.getStringDate();
				eDate = CurrentTime.getFinalDate(2);
			}
		}else{
			sDate = eDate = CurrentTime.getStringDate();
		}
		List<SendHwInfo> shList = swm.listPageInfoByOpt(currUserId, 0, classId, hwType, checkStatus, -1,sDate, eDate, pageFlag, pageNo, pageSize);
		if(shList.size() > 0){
			msg = "success";
			List<Object> list_d = new ArrayList<Object>();
			for(Integer i = 0 ; i < shList.size() ; i++){
				SendHwInfo shw = shList.get(i);
				Map<String,Object> map_d = new HashMap<String,Object>();
				map_d.put("hwSendId", shw.getId());
//				map_d.put("classId", shw.getClassInfo().getId());
				map_d.put("classInfo", shw.getClassName());
				map_d.put("endDate", shw.getEndDate());
				Integer hwType_base = shw.getHwType();
				String hwTypeChi = "";
				if(hwType_base.equals(1)){
					hwTypeChi = "家庭作业";
				}else if(hwType_base.equals(2)){
					hwTypeChi = "课后复习";
				}else if(hwType_base.equals(3)){
					hwTypeChi = "课前预习";
				}
				map_d.put("hwTitle", shw.getSendDate().substring(0, 10)+hwTypeChi);
				map_d.put("hwType", hwType_base);
//				map_d.put("loreId", shw.getLoreInfo().getId());
				map_d.put("loreInfo", shw.getHwTitle());//第一单元:数据的收集和整理
				List<HwStudyTjInfo> tjList = tjm.listInfoByOpt(shw.getId(), 0, -1, false, 1, 1);
				Integer zsComNum = 0;//按时完成
				Integer bzComNum = 0;//补做完成
				Integer unComNum = 0;//未完成
				if(tjList.size() > 0){
					for(HwStudyTjInfo tj : tjList){
						Integer comStatus = tj.getComStatus();
						if(comStatus.equals(0)){
							unComNum++;
						}else if(comStatus.equals(1)){
							zsComNum++;
						}else if(comStatus.equals(2)){
							bzComNum++;
						}
					}
				}
				map_d.put("zsComNum", zsComNum);
				map_d.put("bzComNum", bzComNum);
				map_d.put("unComNum", unComNum);
				list_d.add(map_d);
			}
			map.put("sendHwList", list_d);
			map.put("sDate", sDate);
			map.put("eDate", eDate);
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 获取指定发送作业的学生完成详细情况
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getSpecHwStuComDetail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		SendHwManager swm = (SendHwManager) AppFactory.instance(null).getApp(Constants.WEB_SEND_HW_INFO);
		HwStudyTjManager tjm = (HwStudyTjManager) AppFactory.instance(null).getApp(Constants.WEB_HW_STUDY_TJ_INFO);
		Integer currUserId = CommonTools.getLoginUserId(request);
		Integer hwSendId = CommonTools.getFinalInteger("hwSendId", request);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "error";
		String currentDate = CurrentTime.getStringDate();
		if(hwSendId > 0){
			SendHwInfo hwInfo = swm.getEntityById(hwSendId);
			if(hwInfo != null && hwInfo.getUser().equals(currUserId)){
				msg = "success";
				Integer hwType = hwInfo.getHwType();
				String hwTypeChi = "";
				if(hwType.equals(1)){
					hwTypeChi = "家庭作业";
				}else if(hwType.equals(2)){
					hwTypeChi = "课后复习";
				}else if(hwType.equals(3)){
					hwTypeChi = "课前预习";
				}
				map.put("hwTitle", hwInfo.getClassName()+hwInfo.getSendDate().substring(0, 10)+hwTypeChi+"作业详情");
				String endDate = hwInfo.getEndDate().substring(0, 10);
				if(CurrentTime.compareDate(endDate, currentDate) > 0){
					map.put("endStatus", "已截止");
				}else{
					map.put("endStatus", "正常");
				}
				map.put("loreInfo", hwInfo.getHwTitle());//第一单元:数据的收集和整理
				Integer pageNo = CommonTools.getFinalInteger("pageNo", request);
				Integer pageSize = CommonTools.getFinalInteger("pageSize", request);
				List<HwStudyTjInfo> tjList = tjm.listInfoByOpt(hwSendId, 0, -1, true, pageNo, pageSize);
				List<HwStudyTjInfo> tjList_all = tjm.listInfoByOpt(hwSendId, 0, -1, false, pageNo, pageSize);
				Integer stuNum = tjList_all.size();
				if(stuNum > 0){
					Integer allScore = 0;
					Double avgScore = 0.0;
					Integer zsComNum = 0;//按时完成
					Integer bzComNum = 0;//补做完成
					Integer unComNum = 0;//未完成
					for(HwStudyTjInfo tj :tjList_all){
						allScore += tj.getHwScore();
						Integer comStatus = tj.getComStatus();
						if(comStatus.equals(0)){
							unComNum++;
						}else if(comStatus.equals(1)){
							zsComNum++;
						}else if(comStatus.equals(2)){
							bzComNum++;
						}
					}
					avgScore = Convert.convertInputNumber_2(allScore * 1.0 / stuNum);
					map.put("avgScore", avgScore);
					map.put("zsComNum", zsComNum);
					map.put("bzComNum", bzComNum);
					map.put("unComNum", unComNum);
					if(tjList.size() > 0){
						List<Object> list_d = new ArrayList<Object>();
						for(HwStudyTjInfo tj :tjList){
							Map<String,Object> map_d = new HashMap<String,Object>();
							map_d.put("tjId", tj.getId());
							map_d.put("stuName", tj.getUser().getRealName());
							map_d.put("hwScore", tj.getHwScore());
							map_d.put("succNum", tj.getSuccNum());
							map_d.put("errorNum", tj.getErrorNum());
							map_d.put("unNum", tj.getAllNum() - tj.getHwScore() - tj.getSuccNum());
							list_d.add(map_d);
						}
						map.put("stuInfo", list_d);
					}else{
						msg = "noInfo";
					}
				}else{
					msg = "noInfo";
				}
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 获取指定发送作业的题目正确率
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getSpecHwQueComDetail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		SendHwManager swm = (SendHwManager) AppFactory.instance(null).getApp(Constants.WEB_SEND_HW_INFO);
		HwStudyTjManager tjm = (HwStudyTjManager) AppFactory.instance(null).getApp(Constants.WEB_HW_STUDY_TJ_INFO);
		HwStudyDetailManager hsdm = (HwStudyDetailManager) AppFactory.instance(null).getApp(Constants.WEB_HW_STUDY_DETAIL_INFO);
		LoreQuestionManager lqm = (LoreQuestionManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_QUESTION_INFO);
		HwQueManager hqm = (HwQueManager) AppFactory.instance(null).getApp(Constants.WEB_HW_QUE_INFO);
		TeaQueManager tqm = (TeaQueManager) AppFactory.instance(null).getApp(Constants.WEB_TEA_QUE_INFO);
		Integer currUserId = CommonTools.getLoginUserId(request);
		Integer hwSendId = CommonTools.getFinalInteger("hwSendId", request);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "error";
		if(hwSendId > 0){
			SendHwInfo hwInfo = swm.getEntityById(hwSendId);
			if(hwInfo != null && hwInfo.getUser().equals(currUserId)){
				//获取该作业的总人数
				Integer stuNum_all = tjm.getCountByOpt(hwSendId, 0, -1);
				Integer hwType = hwInfo.getHwType();
				String hwTypeChi = "";
				if(hwType.equals(1)){
					hwTypeChi = "家庭作业";
				}else if(hwType.equals(2)){
					hwTypeChi = "课后复习";
				}else if(hwType.equals(3)){
					hwTypeChi = "课前预习";
				}
				map.put("hwTitle", hwInfo.getClassName()+hwInfo.getSendDate().substring(0, 10)+hwTypeChi+"作业详情");
				if(stuNum_all > 0){
					msg = "success";
					String sysQueIdArr = hwInfo.getSysQueIdArr();
					String hwQueIdArr = hwInfo.getHwQueIdArr();
					String teaQueIdArr = hwInfo.getTeaQueIdArr();
					List<Object> list_d = new ArrayList<Object>();
					if(!sysQueIdArr.equals("")){//系统题库--知识点 下面的题库
						String[] sysQueIdArray =  sysQueIdArr.split(",");
						for(Integer i = 0 ; i < sysQueIdArray.length ; i++){
							LoreQuestion lq = lqm.getEntityByLqId(Integer.parseInt(sysQueIdArray[i]));
							if(lq != null){
								Map<String,Object> map_d = new HashMap<String,Object>();
								map_d.put("hwSendId", hwSendId);
								map_d.put("hwId", lq.getId());
								map_d.put("hwType", "sys");//系统题库
								Integer succNum = 0;//正确人数
								List<HwStudyDetailInfo> hsdList = hsdm.listInfoByOpt(hwSendId, 0, lq.getId(), "sys");
								if(hsdList.size() > 0){
									for(HwStudyDetailInfo hsd : hsdList){
										if(hsd.getResult().equals(1)){
											succNum++;
										}
									}
								}
								map_d.put("succRate", succNum * 100 / stuNum_all);
								list_d.add(map_d);
							}
						}
					}
					if(!hwQueIdArr.equals("")){//系统上传的家庭作业
						String[] hwQueIdArray =  hwQueIdArr.split(",");
						for(Integer i = 0 ; i < hwQueIdArray.length ; i++){
							HwQueInfo hq = hqm.getEntityById(Integer.parseInt(hwQueIdArray[i]));
							if(hq != null){
								Map<String,Object> map_d = new HashMap<String,Object>();
								map_d.put("hwSendId", hwSendId);
								map_d.put("hwId", hq.getId());
								map_d.put("hwType", "hw");//家庭作业题库
								Integer succNum = 0;//正确人数
								List<HwStudyDetailInfo> hsdList = hsdm.listInfoByOpt(hwSendId, 0, hq.getId(), "hw");
								if(hsdList.size() > 0){
									for(HwStudyDetailInfo hsd : hsdList){
										if(hsd.getResult().equals(1)){
											succNum++;
										}
									}
								}
								map_d.put("succRate", succNum * 100 / stuNum_all);
								list_d.add(map_d);
							}
						}
					}
					if(!teaQueIdArr.equals("")){//老师上传的家庭作业
						String[] teaQueIdArray =  teaQueIdArr.split(",");
						for(Integer i = 0 ; i < teaQueIdArray.length ; i++){
							TeaQueInfo tq = tqm.getEntityById(Integer.parseInt(teaQueIdArray[i]));
							if(tq != null){
								Map<String,Object> map_d = new HashMap<String,Object>();
								map_d.put("hwSendId", hwSendId);
								map_d.put("hwId", tq.getId());
								map_d.put("hwType", "tea");//老师题库
								Integer succNum = 0;//正确人数
								List<HwStudyDetailInfo> hsdList = hsdm.listInfoByOpt(hwSendId, 0, tq.getId(), "tea");
								if(hsdList.size() > 0){
									for(HwStudyDetailInfo hsd : hsdList){
										if(hsd.getResult().equals(1)){
											succNum++;
										}
									}
								}
								map_d.put("succRate", succNum * 100 / stuNum_all);
								list_d.add(map_d);
							}
						}
					}
					map.put("queList", list_d);
				}else{
					msg = "noInfo";
				}
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 获取指定题目的详细情况
	 * @author wm
	 * @date 2019-8-3 上午10:03:22
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getSpecHwQueComSubDetail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		SendHwManager swm = (SendHwManager) AppFactory.instance(null).getApp(Constants.WEB_SEND_HW_INFO);
		HwStudyTjManager tjm = (HwStudyTjManager) AppFactory.instance(null).getApp(Constants.WEB_HW_STUDY_TJ_INFO);
		HwStudyDetailManager hsdm = (HwStudyDetailManager) AppFactory.instance(null).getApp(Constants.WEB_HW_STUDY_DETAIL_INFO);
		LoreQuestionManager lqm = (LoreQuestionManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_QUESTION_INFO);
		HwQueManager hqm = (HwQueManager) AppFactory.instance(null).getApp(Constants.WEB_HW_QUE_INFO);
		TeaQueManager tqm = (TeaQueManager) AppFactory.instance(null).getApp(Constants.WEB_TEA_QUE_INFO);
		Integer currUserId = CommonTools.getLoginUserId(request);
		Integer hwSendId = CommonTools.getFinalInteger("hwSendId", request);
		Integer hwId = CommonTools.getFinalInteger("hwId", request);
		String hwType = CommonTools.getFinalStr("hwType", request);//题目类型（hw,sys,tea）
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "error";
		if(hwSendId > 0 && hwId > 0){
			SendHwInfo hwInfo = swm.getEntityById(hwSendId);
			if(hwInfo != null && hwInfo.getUser().equals(currUserId)){
				msg = "success";
				//获取该作业的总人数
				Integer stuNum_all = tjm.getCountByOpt(hwSendId, 0, -1);
				String sysQueIdArr = hwInfo.getSysQueIdArr();
				String hwQueIdArr = hwInfo.getHwQueIdArr();
				String teaQueIdArr = hwInfo.getTeaQueIdArr();
				List<Object> list_d = new ArrayList<Object>();
				if(!sysQueIdArr.equals("")){//系统题库--知识点 下面的题库
					String[] sysQueIdArray =  sysQueIdArr.split(",");
					for(Integer i = 0 ; i < sysQueIdArray.length ; i++){
						LoreQuestion lq = lqm.getEntityByLqId(Integer.parseInt(sysQueIdArray[i]));
						if(lq != null){
							Map<String,Object> map_d = new HashMap<String,Object>();
							map_d.put("hwId", lq.getId());
							boolean selFlag = false;
							if(hwType.equals("sys")){
								if(hwId.equals(lq.getId())){
									selFlag = true;
								}
							}
							map_d.put("selFlag",selFlag);
							//获取题库详情
							map_d.put("lqSub", lq.getQueSub());
							String queType = lq.getQueType();
							map_d.put("lqType", queType);
							map_d.put("answerA", lq.getA());
							map_d.put("answerB", lq.getB());
							map_d.put("answerC", lq.getC());
							map_d.put("answerD", lq.getD());
							map_d.put("answerE", lq.getE());
							map_d.put("answerF", lq.getF());
							String queAnswer = lq.getQueAnswer();
							//需要匹配出选项
							if(queType.equals("单选题") || queType.equals("多选题") || queType.equals("填空选择题") || queType.equals("判断题")){
								String queAnswer_text = "";
								String[] answerQueArr = queAnswer.replaceAll("&#wmd;", "'").split(",");
								String replaceStr = "Module/commonJs/ueditor/jsp/lore/";
								for(Integer j = 0 ; j < answerQueArr.length ; j++){
									if(answerQueArr[j].equals(lq.getA().replace(replaceStr,""))){
										queAnswer_text += "A,";
										continue;
									}
									if(answerQueArr[j].equals(lq.getB().replace(replaceStr,""))){
										queAnswer_text += "B,";
										continue;
									}
									if(answerQueArr[j].equals(lq.getC().replace(replaceStr,""))){
										queAnswer_text += "C,";
										continue;
									}
									if(answerQueArr[j].equals(lq.getD().replace(replaceStr,""))){
										queAnswer_text += "D,";
										continue;
									}
									if(answerQueArr[j].equals(lq.getE().replace(replaceStr,""))){
										queAnswer_text += "E,";
										continue;
									}
									if(answerQueArr[j].equals(lq.getF().replace(replaceStr,""))){
										queAnswer_text += "F,";
										continue;
									}
								}
								if(!queAnswer_text.equals("")){
									queAnswer_text = queAnswer_text.substring(0, queAnswer_text.length() - 1);
								}
								map_d.put("queAnswer", queAnswer_text);
							}else if(queType.equals("问答题") || queType.equals("填空题")){
								map_d.put("queAnswer", queAnswer);//直接给出答案
							}
							Integer succNum = 0;//正确人数
							Integer errorNum = 0;//错误人数
							Integer unNum = 0;//未做人数
							List<HwStudyDetailInfo> hsdList = hsdm.listInfoByOpt(hwSendId, 0, lq.getId(), "sys");
							List<Object> list_d_succ = new ArrayList<Object>();
							List<Object> list_d_error = new ArrayList<Object>();
							List<Object> list_d_unCom = new ArrayList<Object>();
							if(hsdList.size() > 0){
								for(HwStudyDetailInfo hsd : hsdList){
									if(hsd.getResult().equals(1)){
										succNum++;
										Map<String,Object> map_d_1 = new HashMap<String,Object>();
										User stu = hsd.getHwStudyTjInfo().getUser();
										map_d_1.put("stuName", stu.getRealName());
										map_d_1.put("headImg", stu.getPortrait());
										list_d_succ.add(map_d_1);
									}else if(hsd.getResult().equals(0)){
										errorNum++;
										Map<String,Object> map_d_1 = new HashMap<String,Object>();
										User stu = hsd.getHwStudyTjInfo().getUser();
										map_d_1.put("stuName", stu.getRealName());
										map_d_1.put("headImg", stu.getPortrait());
										list_d_error.add(map_d_1);
									}else{
										unNum++;
										Map<String,Object> map_d_1 = new HashMap<String,Object>();
										User stu = hsd.getHwStudyTjInfo().getUser();
										map_d_1.put("stuName", stu.getRealName());
										map_d_1.put("headImg", stu.getPortrait());
										list_d_unCom.add(map_d_1);
									}
								}
							}
							map_d.put("succStuList", list_d_succ);
							map_d.put("errorStuList", list_d_error);
							map_d.put("unComStuList", list_d_unCom);
							map_d.put("succRate", succNum * 100 / stuNum_all);//得分率
							list_d.add(map_d);
						}
					}
				}
				if(!hwQueIdArr.equals("")){//系统上传的家庭作业
					String[] hwQueIdArray =  hwQueIdArr.split(",");
					for(Integer i = 0 ; i < hwQueIdArray.length ; i++){
						HwQueInfo hq = hqm.getEntityById(Integer.parseInt(hwQueIdArray[i]));
						if(hq != null){
							Map<String,Object> map_d = new HashMap<String,Object>();
							map_d.put("hwId", hq.getId());
							boolean selFlag = false;
							if(hwType.equals("hw")){
								if(hwId.equals(hq.getId())){
									selFlag = true;
								}
							}
							map_d.put("selFlag",selFlag);
							
							map_d.put("lqSub", hq.getSubject());
							map_d.put("lqType", hq.getQueType());
							map_d.put("queAnswer", hq.getAnswer());
							
							Integer succNum = 0;//正确人数
							Integer errorNum = 0;//错误人数
							Integer unNum = 0;//未做人数
							List<HwStudyDetailInfo> hsdList = hsdm.listInfoByOpt(hwSendId, 0, hq.getId(), "hw");
							List<Object> list_d_succ = new ArrayList<Object>();
							List<Object> list_d_error = new ArrayList<Object>();
							List<Object> list_d_unCom = new ArrayList<Object>();
							if(hsdList.size() > 0){
								for(HwStudyDetailInfo hsd : hsdList){
									if(hsd.getResult().equals(1)){
										succNum++;
										Map<String,Object> map_d_1 = new HashMap<String,Object>();
										User stu = hsd.getHwStudyTjInfo().getUser();
										map_d_1.put("stuName", stu.getRealName());
										map_d_1.put("headImg", stu.getPortrait());
										list_d_succ.add(map_d_1);
									}else if(hsd.getResult().equals(0)){
										errorNum++;
										Map<String,Object> map_d_1 = new HashMap<String,Object>();
										User stu = hsd.getHwStudyTjInfo().getUser();
										map_d_1.put("stuName", stu.getRealName());
										map_d_1.put("headImg", stu.getPortrait());
										list_d_error.add(map_d_1);
									}else{
										unNum++;
										Map<String,Object> map_d_1 = new HashMap<String,Object>();
										User stu = hsd.getHwStudyTjInfo().getUser();
										map_d_1.put("stuName", stu.getRealName());
										map_d_1.put("headImg", stu.getPortrait());
										list_d_unCom.add(map_d_1);
									}
								}
							}
							map_d.put("succStuList", list_d_succ);
							map_d.put("errorStuList", list_d_error);
							map_d.put("unComStuList", list_d_unCom);
							map_d.put("succRate", succNum * 100 / stuNum_all);
							list_d.add(map_d);
						}
					}
				}
				if(!teaQueIdArr.equals("")){//老师上传的家庭作业
					String[] teaQueIdArray =  teaQueIdArr.split(",");
					for(Integer i = 0 ; i < teaQueIdArray.length ; i++){
						TeaQueInfo tq = tqm.getEntityById(Integer.parseInt(teaQueIdArray[i]));
						if(tq != null){
							Map<String,Object> map_d = new HashMap<String,Object>();
							map_d.put("hwId", tq.getId());
							boolean selFlag = false;
							if(hwType.equals("tea")){
								if(hwId.equals(tq.getId())){
									selFlag = true;
								}
							}
							map_d.put("selFlag",selFlag);
							
							map_d.put("lqSub", tq.getQueSub());
							map_d.put("lqType", tq.getQueType());
							map_d.put("queAnswer", tq.getQueAnswer());
							
							Integer succNum = 0;//正确人数
							Integer errorNum = 0;//错误人数
							Integer unNum = 0;//未做人数
							List<HwStudyDetailInfo> hsdList = hsdm.listInfoByOpt(hwSendId, 0, tq.getId(), "tea");
							List<Object> list_d_succ = new ArrayList<Object>();
							List<Object> list_d_error = new ArrayList<Object>();
							List<Object> list_d_unCom = new ArrayList<Object>();
							if(hsdList.size() > 0){
								for(HwStudyDetailInfo hsd : hsdList){
									if(hsd.getResult().equals(1)){
										succNum++;
										Map<String,Object> map_d_1 = new HashMap<String,Object>();
										User stu = hsd.getHwStudyTjInfo().getUser();
										map_d_1.put("stuName", stu.getRealName());
										map_d_1.put("headImg", stu.getPortrait());
										list_d_succ.add(map_d_1);
									}else if(hsd.getResult().equals(0)){
										errorNum++;
										Map<String,Object> map_d_1 = new HashMap<String,Object>();
										User stu = hsd.getHwStudyTjInfo().getUser();
										map_d_1.put("stuName", stu.getRealName());
										map_d_1.put("headImg", stu.getPortrait());
										list_d_error.add(map_d_1);
									}else{
										unNum++;
										Map<String,Object> map_d_1 = new HashMap<String,Object>();
										User stu = hsd.getHwStudyTjInfo().getUser();
										map_d_1.put("stuName", stu.getRealName());
										map_d_1.put("headImg", stu.getPortrait());
										list_d_unCom.add(map_d_1);
									}
								}
							}
							map_d.put("succStuList", list_d_succ);
							map_d.put("errorStuList", list_d_error);
							map_d.put("unComStuList", list_d_unCom);
							map_d.put("succRate", succNum * 100 / stuNum_all);
							list_d.add(map_d);
						}
					}
				}
				map.put("queList", list_d);
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 根据老师所选年级班级获取章节知识点列表并根据时间定位上下册并根据上次作业定位出版社（老师发布作业）
	 * @author wm
	 * @date 2019-8-4 下午05:23:43
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getChapterLoreData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		SendHwManager swm = (SendHwManager) AppFactory.instance(null).getApp(Constants.WEB_SEND_HW_INFO);
		ClassInfoManager cm = (ClassInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CLASS_INFO);
		UserClassInfoManager ucm = (UserClassInfoManager) AppFactory.instance(null).getApp(Constants.WEB_USER_CLASS_INFO);
		EducationManager em = (EducationManager) AppFactory.instance(null).getApp(Constants.WEB_EDUCATION_INFO);
		ChapterManager cpm = (ChapterManager) AppFactory.instance(null).getApp(Constants.WEB_CHAPTER_INFO);
		EditionManager edim = (EditionManager) AppFactory.instance(null).getApp(Constants.WEB_EDITION_INFO);
		LoreInfoManager lm = (LoreInfoManager)AppFactory.instance(null).getApp(Constants.WEB_LORE_INFO);
		Integer currUserId = CommonTools.getLoginUserId(request);
		Integer month = CurrentTime.getSpecInfo("month");
		String classIdStr = CommonTools.getFinalStr("classId", request);//多个逗号隔开
		String eduVolume = Transcode.unescape_new1("eduVolume", request);//上/下册
		Integer ediId = CommonTools.getFinalInteger("ediId", request);//出版社
		Integer hwType = CommonTools.getFinalInteger("hwType", request);//作业类型1-家庭作业,2-课后复习,3-课前预习
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "noInfo";
		if(currUserId > 0 && !classIdStr.equals("") && hwType > 0){
			UserClassInfo uc = ucm.getEntityByOpt(currUserId, 4);
			if(uc != null){
				msg = "success";
				Integer subId = uc.getSubjectId();//老师所教的学科
				String subName = uc.getSubjectName();//老师所在的学科
				String[] classIdArr = classIdStr.split(",");
				Integer classId_tmp = Integer.parseInt(classIdArr[0]);
				List<ClassInfo> cList = cm.listClassInfoById(classId_tmp);
				if(cList.size() > 0){
					String gradeName = Convert.dateConvertGradeName(cList.get(0).getBuildeClassDate());//老师所在的年级
					if(eduVolume.equals("")){
						if(month >= 3 && month < 9){//下册
							eduVolume = "上册";
						}else{
							eduVolume = "下册";
						}
						//没选出版社时出版社获取最近一次发送的家庭作业出版社
						List<SendHwInfo> shwList = swm.listPageInfoByOpt(currUserId, 0, 0, 0, -1, -1,"", "", false, 0, 0);
						if(shwList.size() > 0){
							SendHwInfo shw = shwList.get(0);
							ediId = shw.getLoreInfo().getChapter().getEducation().getEdition().getId();
						}else{
							ediId = 2;//默认定位到人教版
						}
					}
					//出版社列表
					List<Edition> ediList = edim.listInfoByShowStatus(0, -1);
					List<Object> list_d = new ArrayList<Object>();
					for(Edition edi : ediList){
						if(edi.getEdiName().equals("通用版")){
							continue;
						}
						Map<String,Object> map_d = new HashMap<String,Object>();
						map_d.put("ediId", edi.getId());
						map_d.put("ediName", edi.getEdiName());
						if(ediId.equals(edi.getId())){
							map_d.put("selFlag", true);
						}else{
							map_d.put("selFlag", false);
						}
						list_d.add(map_d);
					}
					map.put("subName", subName);//老师所在的学科
					map.put("gradeName", gradeName);//老师所在的年级
					map.put("ediList", list_d);//出版社列表
					//上下册数据
					List<Object> list_d_edu = new ArrayList<Object>();
					Map<String,Object> map_d_edu = new HashMap<String,Object>();
					map_d_edu.put("eduVolumeValue", "上册");
					map_d_edu.put("eduVolumeShow", gradeName+subName+"上册");
					if(eduVolume.equals("上册")){
						map_d_edu.put("selFlag", true);
					}else{
						map_d_edu.put("selFlag", false);
					}
					list_d_edu.add(map_d_edu);
					map_d_edu = new HashMap<String,Object>();
					map_d_edu.put("eduVolumeValue", "下册");
					map_d_edu.put("eduVolumeShow", gradeName+subName+"下册");
					if(eduVolume.equals("下册")){
						map_d_edu.put("selFlag", true);
					}else{
						map_d_edu.put("selFlag", false);
					}
					list_d_edu.add(map_d_edu);
					map.put("eduVolumeList", list_d_edu);//上下册
					//章节知识点列表
					List<Education> eduList = em.listInfoByOpt(ediId, gradeName, subId, eduVolume);//获取
					List<Object> list_d_cpt = new ArrayList<Object>();
					if(eduList.size() > 0){
						Integer eduId = eduList.get(0).getId();
						List<Chapter> cptList = cpm.ListInfoByEduId(eduId);
						if(cptList.size() > 0){
							for(Iterator<Chapter> it = cptList.iterator() ; it.hasNext();){
								Chapter cpt = it.next();
								Map<String,Object> map_d_2 = new HashMap<String,Object>();
								map_d_2.put("cptId", cpt.getId());
								map_d_2.put("cptName", cpt.getChapterName());
								List<Object> list_d3 = new ArrayList<Object>();
								List<LoreInfo> lList = lm.listInfoByCptId(cpt.getId());
								for(LoreInfo lore : lList){
									Map<String,Object> map_d_3 = new HashMap<String,Object>();
									map_d_3.put("loreId", lore.getId());
									map_d_3.put("loreName", lore.getLoreName());
									list_d3.add(map_d_3);
								}
								map_d_2.put("loreList", list_d3);
								list_d_cpt.add(map_d_2);
							}
							map.put("cptList", list_d_cpt);//章节、知识点列表
						}
					}
				}
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 根据所选章节知识点获取题库列表（老师发布作业）
	 * @author wm
	 * @date 2019-8-5 下午05:19:12
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getLoreQuestionData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		LoreInfoManager lm = (LoreInfoManager)AppFactory.instance(null).getApp(Constants.WEB_LORE_INFO);
		HwQueManager hqm = (HwQueManager) AppFactory.instance(null).getApp(Constants.WEB_HW_QUE_INFO);
		TeaQueManager tqm = (TeaQueManager) AppFactory.instance(null).getApp(Constants.WEB_TEA_QUE_INFO);
		LoreQuestionManager lqm = (LoreQuestionManager)AppFactory.instance(null).getApp(Constants.WEB_LORE_QUESTION_INFO);
		HwMindRelationManager hmrm = (HwMindRelationManager) AppFactory.instance(null).getApp(Constants.WEB_HW_MIND_RELATION_INFO);
		HwAbilityRelationManager harm = (HwAbilityRelationManager) AppFactory.instance(null).getApp(Constants.WEB_HW_ABILITY_RELATION_INFO);
		ClassInfoManager cm = (ClassInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CLASS_INFO);
		Integer currUserId = CommonTools.getLoginUserId(request);
		String classIdStr = CommonTools.getFinalStr("classId", request);//多个逗号隔开
		Integer hwType = CommonTools.getFinalInteger("hwType", request);//作业类型1-家庭作业,2-课后复习,3-课前预习
		Integer loreId = CommonTools.getFinalInteger("loreId", request);//之前选中的的知识点编号
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "noInfo";
		if(currUserId > 0 && !classIdStr.equals("") && hwType > 0 && loreId > 0){
			LoreInfo lore = lm.getEntityById(loreId);
			if(lore != null){
				Integer basicLoreId = lore.getMainLoreId();//通用知识点编号
				if(hwType.equals(1)){//获取系统家庭作业题库内容
					List<HwQueInfo> hqList = hqm.listInfoByLoreAndBuffetType(basicLoreId, "");
					List<Object> list_d_xqjf = new ArrayList<Object>();
					List<Object> list_d_ffgn = new ArrayList<Object>();
					List<Object> list_d_swxl = new ArrayList<Object>();
					List<Object> list_d_zlkf = new ArrayList<Object>();
					List<Object> list_d_nlpy = new ArrayList<Object>();
					List<Object> list_d_zksl = new ArrayList<Object>();
					if(hqList.size() > 0){
						msg = "success";
						for(HwQueInfo hq : hqList){
							Map<String,Object> map_d = new HashMap<String,Object>();
							Integer hwId = hq.getId();
							List<HwAbilityRelationInfo> harList = harm.listInfoByOpt(0,hwId);
							List<HwMindRelationInfo> hmrList = hmrm.listInfoByOpt(0, hwId);
							String swType = "";
							String nlType = "";
							for(Iterator<HwAbilityRelationInfo> it_a = harList.iterator() ; it_a.hasNext();){
								HwAbilityRelationInfo har = it_a.next();
								nlType += har.getBuffetAbilityTypeInfo().getAbility() + "、";
							}
							for(Iterator<HwMindRelationInfo> it_m = hmrList.iterator() ; it_m.hasNext();){
								HwMindRelationInfo bmr = it_m.next();
								swType += bmr.getBuffetMindTypeInfo().getMind() + "、";
							}
							if(!swType.equals("")){
								swType = swType.substring(0, swType.length() - 1);
							}
							if(!nlType.equals("")){
								nlType = nlType.substring(0, nlType.length() - 1);
							}
							String buffetType = hq.getBuffetTypeInfo().getTypes();
							map_d.put("lqId", hq.getId());
							map_d.put("queType", "hw");//sys,hw,tea
							map_d.put("lqType", hq.getQueType());
							map_d.put("lqTitle", hq.getTitle());
							map_d.put("lqSub", hq.getSubject());
							map_d.put("swType", swType);
							map_d.put("nlType", nlType);
							map_d.put("lqAnswer", hq.getAnswer());
							map_d.put("lqResolution", hq.getResolution());
							if(buffetType.equals("兴趣激发")){
								list_d_xqjf.add(map_d);
							}else if(buffetType.equals("方法归纳")){
								list_d_ffgn.add(map_d);
							}else if(buffetType.equals("思维训练")){
								list_d_swxl.add(map_d);
							}else if(buffetType.equals("智力开发")){
								list_d_zlkf.add(map_d);
							}else if(buffetType.equals("能力培养")){
								list_d_nlpy.add(map_d);
							}else if(buffetType.equals("中/高考涉猎")){
								list_d_zksl.add(map_d);
							}
						}
						map.put("xqjf", list_d_xqjf);
						map.put("ffgn", list_d_ffgn);
						map.put("swxl", list_d_swxl);
						map.put("zlkf", list_d_zlkf);
						map.put("nlpy", list_d_nlpy);
						map.put("zksl", list_d_zksl);
					}
				}else{//获取系统题库和老师上传题库
					List<LoreQuestion> lqList = lqm.listInfoByLoreId(basicLoreId, "针对性诊断", 0);
					List<TeaQueInfo> tqList = tqm.listInfoByOpt(basicLoreId, currUserId, 0,false, 0, 0);
					List<Object> list_d = new ArrayList<Object>();
					if(lqList.size() > 0){
						msg = "success";
						for(LoreQuestion lq : lqList){
							Map<String,Object> map_d = new HashMap<String,Object>();
							map_d.put("lqId", lq.getId());
							map_d.put("queType", "sys");//sys,hw,tea
							map_d.put("lqType", lq.getQueType());
							map_d.put("lqTitle", lq.getQueTitle());
							map_d.put("lqSub", lq.getQueSub());
							String answerA = lq.getA();
							String answerB = lq.getB();
							String answerC = lq.getC();
							String answerD = lq.getD();
							String answerE = lq.getE();
							String answerF = lq.getF();
							map_d.put("answerA", answerA);//选项A
							map_d.put("answerB", answerB);//选项B
							map_d.put("answerC", answerC);//选项C
							map_d.put("answerD", answerD);//选项D
							map_d.put("answerE", answerE);//选项E
							map_d.put("answerF", answerF);//选项F
							String queAnswer = lq.getQueAnswer();
							//需要匹配出选项
							String[] answerQueArr = queAnswer.split(",");
							String queAnswer_text = "";
							String replaceStr = "Module/commonJs/ueditor/jsp/lore/";
							for(Integer i = 0 ; i < answerQueArr.length ; i++){
								if(answerQueArr[i].equals(answerA.replace(replaceStr,""))){
									queAnswer_text += "A,";
									continue;
								}
								if(answerQueArr[i].equals(answerB.replace(replaceStr,""))){
									queAnswer_text += "B,";
									continue;
								}
								if(answerQueArr[i].equals(answerC.replace(replaceStr,""))){
									queAnswer_text += "C,";
									continue;
								}
								if(answerQueArr[i].equals(answerD.replace(replaceStr,""))){
									queAnswer_text += "D,";
									continue;
								}
								if(answerQueArr[i].equals(answerE.replace(replaceStr,""))){
									queAnswer_text += "E,";
									continue;
								}
								if(answerQueArr[i].equals(answerF.replace(replaceStr,""))){
									queAnswer_text += "F,";
									continue;
								}
							}
							if(!queAnswer_text.equals("")){
								queAnswer_text = queAnswer_text.substring(0, queAnswer_text.length() - 1);
							}
							map_d.put("lqAnswer", queAnswer_text);
							map_d.put("lqResolution", lq.getQueResolution());
							list_d.add(map_d);
						}
					}
					if(tqList.size() > 0){//老师上传题
						msg = "success";
						for(TeaQueInfo tq : tqList){
							Map<String,Object> map_d = new HashMap<String,Object>();
							map_d.put("lqId", tq.getId());
							map_d.put("queType", "tea");//sys,hw,tea
							map_d.put("lqType", tq.getQueType());
							map_d.put("lqTitle", tq.getQueTitle());
							map_d.put("lqSub", tq.getQueSub());
							map_d.put("lqAnswer", tq.getQueAnswer());
							map_d.put("lqResolution", tq.getQueResolution());
							list_d.add(map_d);
						}
					}
					if(msg.equals("success")){
						map.put("lqList", list_d);
					}
				}
			}
		}
		map.put("result", msg);
		if(msg.equals("success")){
			map.put("classIdStr", classIdStr);
			String classNameStr = "";
			String[] classIdArr = classIdStr.split(",");
//			List<Object> list_d = new ArrayList<Object>();
			for(int i = 0 ; i <  classIdArr.length; i++){
				Integer classId = Integer.parseInt(classIdArr[i]);
				List<ClassInfo> cList = cm.listClassInfoById(classId);
				if(cList.size() > 0){
					ClassInfo c = cList.get(0);
					String buildeClassDate = c.getBuildeClassDate();
					String gradeName = Convert.dateConvertGradeName(buildeClassDate);//当前所在的年级
//					Map<String,Object> map_d = new HashMap<String,Object>();
//					map_d.put("classId", c.getId());
//					map_d.put("className", gradeName+c.getClassName());
//					list_d.add(map_d);
					classNameStr += gradeName+c.getClassName() + ",";
				}
			}
			map.put("classNameStr", classNameStr.substring(0, classNameStr.length() - 1));
//			map.put("classList", list_d);
			map.put("hwType", hwType);
			map.put("loreId", loreId);
			map.put("endDate", CurrentTime.getStringDate());
		}
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 老师发送作业(老师发布作业)
	 * 如果hwType为家庭作业时lqIdStr格式为lqId1:hw,lqId2:hw,......
	 * 如果hwType为课前/后作业时lqIdStr格式为lqId1:tea,lqId2:tea,lqId3:sys,lqId4:sys......
	 * @author wm
	 * @date 2019-8-6 上午10:30:11
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward sendHw(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		LoreInfoManager lm = (LoreInfoManager)AppFactory.instance(null).getApp(Constants.WEB_LORE_INFO);
		SendHwManager swm = (SendHwManager)AppFactory.instance(null).getApp(Constants.WEB_SEND_HW_INFO);
		UserClassInfoManager ucm = (UserClassInfoManager) AppFactory.instance(null).getApp(Constants.WEB_USER_CLASS_INFO);
		ClassInfoManager cm = (ClassInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CLASS_INFO);
		HwStudyTjManager tjm = (HwStudyTjManager) AppFactory.instance(null).getApp(Constants.WEB_HW_STUDY_TJ_INFO);
		HwStudyDetailManager hsdm = (HwStudyDetailManager) AppFactory.instance(null).getApp(Constants.WEB_HW_STUDY_DETAIL_INFO);
		Integer currUserId = CommonTools.getLoginUserId(request);
		String classIdStr = CommonTools.getFinalStr("classIdStr", request);//多个逗号隔开
		Integer hwType = CommonTools.getFinalInteger("hwType", request);//作业类型1-家庭作业,2-课后复习,3-课前预习
		Integer loreId = CommonTools.getFinalInteger("loreId", request);//之前选中的的知识点编号
		String lqIdStr = CommonTools.getFinalStr("lqId", request);//多个逗号隔开
		String endDate = CommonTools.getFinalStr("endDate", request);//截止日期
		Integer traceStatus = CommonTools.getFinalInteger("traceStatus", request);//溯源标记-0(不溯源),1(溯源)
		Integer subId = 0;
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "error";
		if(currUserId > 0 && !classIdStr.equals("") && hwType > 0 && loreId > 0 && !lqIdStr.equals("")){
			if(ucm.getEntityByOpt(currUserId, 4) != null){//必须是班内老师才能发送
				msg = "success";
				String[] lqIdArr = lqIdStr.split(",");
				String[] classIdArr = classIdStr.split(",");
				subId = lm.getEntityById(loreId).getChapter().getEducation().getGradeSubject().getSubject().getId();
				String hwTypeChi = "";
				if(hwType.equals(1)){
					hwTypeChi = "家庭作业";
				}else if(hwType.equals(2)){
					hwTypeChi = "课后复习";
				}else if(hwType.equals(3)){
					hwTypeChi = "课前预习";
				}
				String sysQueIdArr = "";
				String hwQueIdArr = "";
				String teaQueIdArr = "";
				String queIdStr = "";
				String queAreaStr = "";
				for(int j = 0 ; j < lqIdArr.length ; j++){
					String lqId = lqIdArr[j].split(":")[0];
					String queArea = lqIdArr[j].split(":")[1];
					queIdStr += lqId + ",";
					queAreaStr += queArea + ",";
					if(queArea.equals("hw")){
						hwQueIdArr += lqId + ",";
					}else if(queArea.equals("sys")){
						sysQueIdArr += lqId + ",";
					}else if(queArea.equals("tea")){
						teaQueIdArr += lqId + ",";
					}
				}
				if(!queIdStr.equals("") && !queAreaStr.equals("")){
					queIdStr = queIdStr.substring(0, queIdStr.length() - 1);
					queAreaStr = queAreaStr.substring(0, queAreaStr.length() - 1);
				}
				Integer allNum = 0;
				if(!sysQueIdArr.equals("")){
					sysQueIdArr = sysQueIdArr.substring(0, sysQueIdArr.length() - 1);
					allNum += sysQueIdArr.split(",").length;
				}else if(!hwQueIdArr.equals("")){
					hwQueIdArr = hwQueIdArr.substring(0, hwQueIdArr.length() - 1);
					allNum += hwQueIdArr.split(",").length;
				}else if(!teaQueIdArr.equals("")){
					teaQueIdArr = teaQueIdArr.substring(0, teaQueIdArr.length() - 1);
					allNum += teaQueIdArr.split(",").length;
				}
//				swm.listPageInfoByOpt(currUserId, classId, hwType, checkStatus, inUse, sDate, eDate, false, 0, 0);
				for(int i = 0 ; i < classIdArr.length ; i++){
					Integer classId = Integer.parseInt(classIdArr[i]);
					List<ClassInfo> cList = cm.listClassInfoById(classId);
					if(cList.size() > 0){
						ClassInfo c = cList.get(0);
						String buildeClassDate = c.getBuildeClassDate();
						String gradeName = Convert.dateConvertGradeName(buildeClassDate);//当前所在的年级
						String className = gradeName+c.getClassName();
						//step:1增加指定班级的发送家庭作业记录
						Integer hwSendId = swm.addSendHw(currUserId, CurrentTime.getStringDate()+hwTypeChi, loreId, classId, className, subId, endDate, hwType, sysQueIdArr, hwQueIdArr, teaQueIdArr, 0, traceStatus);
						if(hwSendId > 0){
							//获取该班级所有学生
							List<UserClassInfo> ucList = ucm.listUcInfoByOpt(classId, 2, 1, 10000);
							if(ucList.size() > 0){
								String stuIdStr = "";
								for(UserClassInfo uc : ucList){
									stuIdStr += uc.getUser().getId() + ",";
								}
								//step:2增加家庭作业统计表数据
								tjm.addBatchHwStudyTj(hwSendId, stuIdStr, allNum);
								//获取指定班级指定发送编号的发送记录列表
								List<HwStudyTjInfo> tjList = tjm.listInfoByOpt(hwSendId, 0, -1, false, 0, 0);
								if(tjList.size() > 0){
									for(HwStudyTjInfo tj : tjList){
										//step:3增加家庭作业做题记录表
										hsdm.addBatchHWSD(tj.getId(), queIdStr, queAreaStr);
									}
								}
							}
						}
					}
				}
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 导向家庭作业报告页面
	 * @author wm
	 * @date 2019-8-7 上午08:42:01
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward goHwReportPage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		return mapping.findForward("hwReportPage");
	}
	
	/**
	 * 获取指定班级的家庭作业报告数据
	 * noInfo时为全部无记录
	 * success时部分有记录，（specDate为空时）初始进来时，判断unComUserList_eDate有无，存在则获取，不存在则获取userList
	 * 当点击横坐标指定日期时（specDate不为空时），判断unComUserList_specDate有无，存在则获取，不存在则获取userList
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getHwReportData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		SendHwManager swm = (SendHwManager)AppFactory.instance(null).getApp(Constants.WEB_SEND_HW_INFO);
		HwStudyTjManager tjm = (HwStudyTjManager) AppFactory.instance(null).getApp(Constants.WEB_HW_STUDY_TJ_INFO);
		UserClassInfoManager ucm = (UserClassInfoManager) AppFactory.instance(null).getApp(Constants.WEB_USER_CLASS_INFO);
		String eDate  = CommonTools.getFinalStr("currDate", request);
		String sDate = "";
		Integer classId = CommonTools.getFinalInteger("classId", request);
		Integer hwType = CommonTools.getFinalInteger("hwType", request);
		String specDate = CommonTools.getFinalStr("specDate", request);
		Integer currUserId = CommonTools.getLoginUserId(request);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "error";
		Integer stuNum = 0;
		//获取当前老师所在的班级任课信息
		Integer subId = ucm.getEntityByOpt(currUserId, 4).getSubjectId();
		//获取指定班级指定时间的作业
		if(classId > 0 && currUserId > 0 && subId > 0){
			if(eDate.equals("")){
				eDate = CurrentTime.getStringDate();
			}
			sDate = CurrentTime.getFinalDate(CurrentTime.getStringDate(), -6);//获取最近6天的时间
			if(hwType.equals(0)){
				hwType = 1;
			}
			List<SendHwInfo> sendList = swm.listPageInfoByOpt(0, subId, classId, hwType, -1, 0, sDate, eDate, false, 0, 0);
			String axisNameStr = sDate.substring(5) + ",";//xAxis-data
			for(int i = 5 ; i > 0 ; i--){
				axisNameStr += CurrentTime.getFinalDate(CurrentTime.getStringDate(), -i).substring(5) + ",";
			}
			axisNameStr += eDate.substring(5);
			String[] axisNameArr = {axisNameStr.split(",")[0],axisNameStr.split(",")[1],axisNameStr.split(",")[2],
					axisNameStr.split(",")[3],axisNameStr.split(",")[4],axisNameStr.split(",")[5],axisNameStr.split(",")[6]};
			Integer[] zsNumArr = {0,0,0,0,0,0,0};
			Integer[] bzNumArr = {0,0,0,0,0,0,0};
			Integer[] unNumArr = {0,0,0,0,0,0,0};
			Integer sendHwSize = sendList.size();
			List<Object> list_all_stu = new ArrayList<Object>();//所有学生列表
			if(sendHwSize > 0){
				msg = "success";
				Integer i = 0;
				if(sendHwSize < 7){//有些天没有发送
					List<UserClassInfo> ucList = ucm.listInfoByOpt(classId, 2);
					stuNum = ucList.size();
					if(stuNum > 0){
						for(UserClassInfo uc : ucList){
							User user = uc.getUser();
							Map<String,Object> map_d = new HashMap<String,Object>();
							map_d.put("userId", user.getId());
							map_d.put("userName", user.getRealName());
							map_d.put("userPortrait", user.getPortrait());
							map_d.put("sendHwId", 0);
							map_d.put("stuComType", "");
							map_d.put("comStatus", -1);
							map_d.put("classId", uc.getClassInfo().getId());
							list_all_stu.add(map_d);
						}
					}
				}
				for(Integer j = sendHwSize - 1 ; j >= 0 ; j--){
					SendHwInfo shw = sendList.get(j);
					Integer zsComNum = 0;
					Integer bzComNum = 0;
					Integer unComNum = 0;
					String sendDate = shw.getSendDate().substring(5, 10);
					List<HwStudyTjInfo> tjList = tjm.listInfoByOpt(shw.getId(), 0, -1, false, 0, 0);
					stuNum = tjList.size();
					if(stuNum > 0){
						List<Object> list_zs = new ArrayList<Object>();
						List<Object> list_bz = new ArrayList<Object>();
						List<Object> list_un = new ArrayList<Object>();
						for(HwStudyTjInfo tj : tjList){
							User user = tj.getUser();
							Map<String,Object> map_d_1 = new HashMap<String,Object>();
							Integer comStatus = tj.getComStatus();
							map_d_1.put("userId", user.getId());
							map_d_1.put("userName", user.getRealName());
							map_d_1.put("userPortrait", user.getPortrait());
							map_d_1.put("sendHwId", shw.getId());
							map_d_1.put("comStatus", comStatus);
							map_d_1.put("classId", shw.getClassInfo().getId());
							if(comStatus.equals(0)){
								unComNum++;
								map_d_1.put("stuComType", "unCom");
								list_un.add(map_d_1);
							}else if(comStatus.equals(1)){
								zsComNum++;
								map_d_1.put("stuComType", "zsCom");
								list_zs.add(map_d_1);
							}else if(comStatus.equals(2)){
								bzComNum++;
								map_d_1.put("stuComType", "bzCom");
								list_bz.add(map_d_1);
							}
						}
						if(axisNameStr.contains(sendDate)){
							zsNumArr[i] = zsComNum;
							bzNumArr[i] = bzComNum;
							unNumArr[i] = unComNum;
						}
						//学生信息
						if(axisNameStr.contains(sendDate)){
							map.put("unComUserList_"+sendDate, list_un);
							map.put("zsComUserList_"+sendDate, list_zs);
							map.put("bzComUserList_"+sendDate, list_bz);
						}else{
							map.put("userList", list_all_stu);
						}
						i++;
					}
				}
			}else{
				msg = "noInfo";
				map.put("userList", list_all_stu);
			}
			map.put("xAxisData", axisNameArr);
			map.put("yAxisZsData", zsNumArr);
			map.put("yAxisBzData", bzNumArr);
			map.put("yAxisUnData", unNumArr);
			map.put("specDate", eDate.substring(0,5)+specDate);
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 获取指定学生的学习记录
	 * 在图表页面点击一个学生过来时都传递，当在指定学生记录中切换班级时，默认为第一个学生的记录
	 * @author wm
	 * @date 2019-8-8 上午08:49:06
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getSpecStuStudyDetail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		SendHwManager swm = (SendHwManager)AppFactory.instance(null).getApp(Constants.WEB_SEND_HW_INFO);
		UserClassInfoManager ucm = (UserClassInfoManager)AppFactory.instance(null).getApp(Constants.WEB_USER_CLASS_INFO);
		HwStudyTjManager tjm = (HwStudyTjManager) AppFactory.instance(null).getApp(Constants.WEB_HW_STUDY_TJ_INFO);
		Integer stuId = CommonTools.getFinalInteger("stuId", request);//公用参数
		Integer sendHwId = CommonTools.getFinalInteger("sendHwId", request); 
		Integer comStatus = CommonTools.getFinalInteger("comStatus", request);
		Integer classId = CommonTools.getFinalInteger("classId", request);//公用参数
		Integer currUserId = CommonTools.getLoginUserId(request);
		Map<String,Object> map = new HashMap<String,Object>();
		//获取当前老师所在的班级任课信息
		Integer subId = ucm.getEntityByOpt(currUserId, 4).getSubjectId();
		if(stuId > 0 && classId > 0 && subId > 0){
			List<HwStudyTjInfo> tjList = new ArrayList<HwStudyTjInfo>();
			//获取指定班级下的学生列表
			List<UserClassInfo> ucList = ucm.listInfoByOpt(classId, 2);
			List<Object> list_d = new ArrayList<Object>();
			for(UserClassInfo uc : ucList){
				User user = uc.getUser();
				Map<String,Object> map_d = new HashMap<String,Object>();
				map_d.put("userId", user.getId());
				map_d.put("userName", user.getRealName());
				map_d.put("userPortrait", user.getPortrait());
				list_d.add(map_d);
			}
			map.put("userList", list_d);
			//获取指定学生，指定状态，指定时间的家庭作业记录
			if(sendHwId > 0){//表示从报告页面点击过来的初始页面
				tjList = tjm.listInfoBySendHwId(sendHwId);
			}else{//日期为1天以上时
				Integer pageNo = CommonTools.getFinalInteger("pageNo", request);//日期为1天以上时才传递
				Integer pageSize = CommonTools.getFinalInteger("pageSize", request);//日期为1天以上时才传递
				String sDate = CommonTools.getFinalStr("sDate", request);
				String eDate = CommonTools.getFinalStr("eDate", request);
				tjList = tjm.listInfoByOpt_1(subId, stuId, comStatus, sDate, eDate, true, pageNo, pageSize);
			}
		}
		return null;
	}
}