/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.zsd.action.onlineStudy;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.zsd.action.base.Transcode;
import com.zsd.factory.AppFactory;
import com.zsd.module.Chapter;
import com.zsd.module.ClassInfo;
import com.zsd.module.Edition;
import com.zsd.module.Education;
import com.zsd.module.GradeSubject;
import com.zsd.module.LoreInfo;
import com.zsd.module.LoreQuestion;
import com.zsd.module.LoreQuestionSubInfo;
import com.zsd.module.NetTeacherStudent;
import com.zsd.module.RelationZdResult;
import com.zsd.module.School;
import com.zsd.module.StuSubjectEduInfo;
import com.zsd.module.StudyAllTjInfo;
import com.zsd.module.StudyDetailInfo;
import com.zsd.module.StudyLogInfo;
import com.zsd.module.StudyMapInfo;
import com.zsd.module.StudyStuQfTjInfo;
import com.zsd.module.StudyStuTjInfo;
import com.zsd.module.StudyTaskInfo;
import com.zsd.module.Subject;
import com.zsd.module.User;
import com.zsd.module.UserClassInfo;
import com.zsd.module.json.LoreTreeMenuJson;
import com.zsd.service.ChapterManager;
import com.zsd.service.EditionManager;
import com.zsd.service.EducationManager;
import com.zsd.service.GradeSubjectManager;
import com.zsd.service.LoreInfoManager;
import com.zsd.service.LoreQuestionManager;
import com.zsd.service.NetTeacherStudentManager;
import com.zsd.service.RelationZdResultManager;
import com.zsd.service.SchoolManager;
import com.zsd.service.StuSubjectEduManager;
import com.zsd.service.StudyAllTjInfoManager;
import com.zsd.service.StudyDetailManager;
import com.zsd.service.StudyLogManager;
import com.zsd.service.StudyMapManager;
import com.zsd.service.StudyStuQfTjManager;
import com.zsd.service.StudyStuTjInfoManager;
import com.zsd.service.StudyTaskManager;
import com.zsd.service.UserClassInfoManager;
import com.zsd.service.UserManager;
import com.zsd.tools.CommonTools;
import com.zsd.tools.Convert;
import com.zsd.tools.CurrentTime;
import com.zsd.util.Constants;

/** 
 * MyEclipse Struts
 * Creation date: 05-24-2019
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class OnlineStudyAction extends DispatchAction {
	
	/**
	 * 导向在线学习页面
	 * @author wm
	 * @date 2019-5-24 下午04:22:51
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward goStudyPage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		return mapping.findForward("studyPage");
	}
	
	/**
	 * 获取用户的首页数据
	 * @author wm
	 * @date 2019-6-18 上午10:30:15
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getWelcomeData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		UserClassInfoManager ucm = (UserClassInfoManager)AppFactory.instance(null).getApp(Constants.WEB_USER_CLASS_INFO);
		Integer userId = CommonTools.getLoginUserId(request);
		Integer roleId = CommonTools.getLoginRoleId(request);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "error";
		if(roleId.equals(2)){//学生
			List<UserClassInfo> ucList = ucm.listInfoByOpt_1(userId, roleId);
			ClassInfo c = null;
			if(ucList.size() > 0){
				UserClassInfo uc = ucList.get(0);
				c = uc.getClassInfo();
				Integer realGradeNumber = Convert.dateConvertGradeNumber(c.getBuildeClassDate());//当前学生的真实年级
				if(realGradeNumber > 12){
					realGradeNumber = 12;
				}
				map.put("gradeName", Convert.NunberConvertChinese(realGradeNumber));
				//获取学生最近三天的学习记录(包括在线学习，家庭作业，自助餐)
			}
		}else if(roleId.equals(3)){//网络导师
			
		}else if(roleId.equals(4)){//学科老师
			
		}else if(roleId.equals(5)){//各级管理员
			
		}else if(roleId.equals(6)){//家长
			
		}
		
		return null;
	}
	
	/**
	 * 获取在线学习初始数据
	 * @author wm
	 * @date 2019-5-24 下午04:23:41
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getInitStudyData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		GradeSubjectManager gsm = (GradeSubjectManager) AppFactory.instance(null).getApp(Constants.WEB_GRADE_SUBJECT_INFO);
		UserClassInfoManager ucm = (UserClassInfoManager)AppFactory.instance(null).getApp(Constants.WEB_USER_CLASS_INFO);
		EditionManager em = (EditionManager) AppFactory.instance(null).getApp(Constants.WEB_EDITION_INFO);
		EducationManager edum = (EducationManager) AppFactory.instance(null).getApp(Constants.WEB_EDUCATION_INFO);
		StuSubjectEduManager ssem = (StuSubjectEduManager)  AppFactory.instance(null).getApp(Constants.WEB_STU_SUB_EDU_INFO);
		StudyLogManager slm = (StudyLogManager)AppFactory.instance(null).getApp(Constants.WEB_STUDY_LOG_INFO);
		NetTeacherStudentManager ntsm = (NetTeacherStudentManager) AppFactory.instance(null).getApp(Constants.WEB_NET_TEACHER_STUDENT);
		Integer userId = CommonTools.getLoginUserId(request);
		Integer roleId = CommonTools.getLoginRoleId(request);
		String checkLoginStatus = "";
		//客户端信息
		String clientInfo = CommonTools.getCilentInfo_new(request);
		if(clientInfo.equals("pc") || clientInfo.indexOf("Web") > 0){//电脑端或者手机浏览器端
			checkLoginStatus = "success";
		}else{
			Integer loginStatus_local = CommonTools.getFinalInteger("loginStatus", request);
			checkLoginStatus = CommonTools.checkUserLoginStatus(request,userId,loginStatus_local);
		}
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "error";
		if(checkLoginStatus.equals("success")){
			Integer subId = CommonTools.getFinalInteger("subId", request);//学科编号
			Integer ediId = CommonTools.getFinalInteger("ediId", request);//出版社编号
			Integer gradeNumber = CommonTools.getFinalInteger("gradeNumber", request);//高三初三复习时传递过来的年级编号
			Integer studyLogId = CommonTools.getFinalInteger("studyLogId", request);//学习记录编号（从学习记录的继续学习进入时）
			/**
			 * 比如说从学习记录里面只传递studyLogId的继续学习时需要直接进入map页面，这时就需要加载上面的学科，年级，出版社数据和map数据
			 * 从溯源路线图页面过来时只传递studyLogId
			 * 首页时还需要加载学习上下册数据
			 */
			String opt = "manu";//手动选择
			List<Object> list_edu = new ArrayList<Object>();
			List<Object> list_nt = new ArrayList<Object>();
			Integer gsId_curr = 0;
			if(roleId.equals(2)){
				msg = "success";
				String gradeName = "";
				//获取该学生的班级,然后获取该班级所在年级
				List<UserClassInfo> ucList = ucm.listInfoByOpt_1(userId, roleId);
				ClassInfo c = null;
				if(ucList.size() > 0){
					UserClassInfo uc = ucList.get(0);
					c = uc.getClassInfo();
					User user = uc.getUser();
					Integer remainDays = CurrentTime.compareDate(CurrentTime.getStringDate(), user.getEndDate());
					Integer freeStatus = user.getFreeStatus();//0:收费,1:免费
					List<Object> list_grade = new ArrayList<Object>();
					Integer realGradeNumber = Convert.dateConvertGradeNumber(c.getBuildeClassDate());//当前学生的真实年级
					if(realGradeNumber > 0){
						if(realGradeNumber >= 12 || realGradeNumber.equals(9)){//初三或者高三的时候可以复习之前的
							if(realGradeNumber > 12){
								realGradeNumber = 12;
							}
							if(studyLogId > 0){//从学习记录过来时通过记录获取学科和出版社
								gradeNumber = realGradeNumber;
								StudyLogInfo sl = slm.getEntityById(studyLogId);
								if(sl != null){
									subId = sl.getSubject().getId();
									ediId = sl.getLoreInfo().getChapter().getEducation().getEdition().getId();
									opt = "noShow";
								}
							}
							for(Integer i = 2 ; i >= 0 ; i--){
								Map<String,Object> map_d = new HashMap<String,Object>();
								map_d.put("gradeNumber", realGradeNumber - i);
								map_d.put("gradeName", Convert.NunberConvertChinese(realGradeNumber - i));
								if(gradeNumber.equals(0)){
									if(i.equals(0)){
										map_d.put("selFlag", true);
									}else{
										map_d.put("selFlag", false);
									}
								}else{
									if(gradeNumber.equals(realGradeNumber - i)){
										map_d.put("selFlag", true);
									}else{
										map_d.put("selFlag", false);
									}
								}
								list_grade.add(map_d);
							}
						}else{//其他年级时只有一组
							if(studyLogId > 0){//从学习记录过来时通过记录获取学科和出版社
								gradeNumber = realGradeNumber;
								StudyLogInfo sl = slm.getEntityById(studyLogId);
								if(sl != null){
									subId = sl.getSubject().getId();
									ediId = sl.getLoreInfo().getChapter().getEducation().getEdition().getId();
									opt = "noShow";
								}
							}
							Map<String,Object> map_d = new HashMap<String,Object>();
							map_d.put("gradeNumber", realGradeNumber);
							map_d.put("gradeNanme", Convert.NunberConvertChinese(realGradeNumber));
							list_grade.add(map_d);
						}
					}
					map.put("gradeList", list_grade);
					if(gradeNumber.equals(0)){//如果页面没传递，直接通过学生获取
						gradeNumber = realGradeNumber;
					}
					if(gradeNumber > 0){
						if(subId.equals(0)){
							opt = "init";//初始加载
							subId = 2;//默认为数学
						}
						gradeName = Convert.NunberConvertChinese(gradeNumber);
						//获取当前年级对应的学科列表
						List<GradeSubject>  gsList = gsm.listSpecInfoByGname(gradeName);
						List<Object> list_sub = new ArrayList<Object>();
						List<Object> list_edi = new ArrayList<Object>();
						if(gsList.size() > 0){
							for(Iterator<GradeSubject> it = gsList.iterator() ; it.hasNext();){
								GradeSubject gs = it.next();
								Subject sub = gs.getSubject();
								Map<String,Object> map_d = new HashMap<String,Object>();
								map_d.put("subId", sub.getId());
								if(sub.getId().equals(subId)){//默认为数学
									gsId_curr = gs.getId();
									map_d.put("selFlag", true);
								}else{
									map_d.put("selFlag", false);
								}
								map_d.put("subName", sub.getSubName());
								map_d.put("subImg", sub.getImgUrl());
								list_sub.add(map_d);
							}
							map.put("subList", list_sub);
							if(opt.equals("init")){//打开在线学习页面初始化加载时
								//获取学生学科教材信息列表
								List<StuSubjectEduInfo> sseList = ssem.listInfoByOpt(userId, subId);
								if(sseList.size() > 0){
									msg = "success";
									for(StuSubjectEduInfo sse : sseList){
										Education edu_study = sse.getEducation();
										Integer ediId_study = edu_study.getEdition().getId();
										if(ediId.equals(0)){
											ediId = ediId_study;
										}
										List<Education> eduList = edum.listInfoByOpt(ediId, gsId_curr);//获取当前年级学科、出版社下的教材信息
										if(eduList.size() > 0){
											for(Integer i = 0 ; i < eduList.size() ; i++){
												Education edu = eduList.get(i);
												ssem.updateSSEById(sse.getId(), edu.getId());
												Map<String,Object> map_d = new HashMap<String,Object>();
												map_d.put("eduId", edu.getId());
												Subject sub = edu.getGradeSubject().getSubject();
												map_d.put("subName", sub.getSubName());
												map_d.put("subImg", sub.getImgUrl());
												map_d.put("eduVolume", edu.getEduVolume());
												map_d.put("remainDays", remainDays);
												map_d.put("studyDays", CurrentTime.compareDate(user.getSignDate().substring(0, 10), CurrentTime.getStringDate()));
												map_d.put("freeStatus", freeStatus.equals(0) ? "免费试用/付费使用" : "免费使用");
												if(freeStatus.equals(0)){
													map_d.put("date_range", user.getSignDate().substring(0, 10) + "至" + user.getEndDate().substring(0, 10));
												}else{
													map_d.put("date_range", user.getSignDate() + "至[长期免费]");
												}
												list_edu.add(map_d);
											}
											map.put("studyList", list_edu);
											break;
										}else{
											msg = "noInfo";
										}
									}
								}else{
									msg = "noInfo";//mei
								}
							}else if(opt.equals("manu")){
								List<Education> eduList = edum.listInfoByOpt(ediId, gsId_curr);//获取当前年级学科、出版社下的教材信息
								if(eduList.size() > 0){
									msg = "success";
									//获取学生学科教材信息列表
									List<StuSubjectEduInfo> sseList = ssem.listInfoByOpt(userId, subId);
									if(sseList.size() > 0){
										for(Integer j = 0 ; j < sseList.size() ; j++){
											ssem.updateSSEById(sseList.get(j).getId(), eduList.get(j).getId());
										}
									}else{
										for(Integer i = 0 ; i < eduList.size() ; i++){
											ssem.addSSE(userId, subId, eduList.get(i).getId());
										}
									}
									for(Integer i = 0 ; i < eduList.size() ; i++){
										Education edu = eduList.get(i);
										Map<String,Object> map_d = new HashMap<String,Object>();
										map_d.put("eduId", edu.getId());
										Subject sub = edu.getGradeSubject().getSubject();
										map_d.put("subName", sub.getSubName());
										map_d.put("subImg", sub.getImgUrl());
										map_d.put("eduVolume", edu.getEduVolume());
										map_d.put("remainDays", remainDays);
										map_d.put("studyDays", CurrentTime.compareDate(user.getSignDate().substring(0, 10), CurrentTime.getStringDate()));
										map_d.put("freeStatus", freeStatus.equals(0) ? "免费试用/付费使用" : "免费使用");
										if(freeStatus.equals(0)){
											map_d.put("date_range", user.getSignDate().substring(0, 10) + "至" + user.getEndDate().substring(0, 10));
										}else{
											map_d.put("date_range", user.getSignDate() + "至[长期免费]");
										}
										list_edu.add(map_d);
									}
									map.put("studyList", list_edu);
								}else{
									msg = "noInfo";
								}
							}
							if(list_edu.size() > 0){//存在上下册学习内容
								if(clientInfo.equals("pc") || clientInfo.indexOf("Web") > 0){//电脑端或者手机浏览器端
									//获取指定学科正在绑定的网络导师信息
									NetTeacherStudent nts = ntsm.getValidInfoByOpt(userId, subId);
									if(nts != null){
										Map<String,Object> map_d = new HashMap<String,Object>();
										map_d.put("ntId", nts.getNetTeacherInfo().getId());
										map_d.put("ntName", nts.getNetTeacherInfo().getUser().getRealName());
										map_d.put("ntPortrait", nts.getNetTeacherInfo().getUser().getPortrait());
										list_nt.add(map_d);
									}
									map.put("ntList", list_nt);
								}
							}
							//获取出版社列表
							List<Edition> ediList = em.listInfoByShowStatus(0, 0);
							for(Iterator<Edition> it = ediList.iterator() ; it.hasNext();){
								Edition edi = it.next();
								Map<String,Object> map_d = new HashMap<String,Object>();
								if(edi.getEdiName().contains("通用")){
									continue;
								}
								map_d.put("ediId", edi.getId());
								map_d.put("ediName", edi.getEdiName());
								if(ediId.equals(0)){//默认没有出版社
									map_d.put("selFlag", false);
								}else{
									if(ediId.equals(edi.getId())){
										map_d.put("selFlag", true);
									}else{
										map_d.put("selFlag", false);
									}
								}
								list_edi.add(map_d);
							}
							map.put("ediList", list_edi);
						}else{
							 msg = "error";
						}
					}else{
						 msg = "error";
					}
				}else{
					 msg = "error";
				}
			}
		}else{
			msg = checkLoginStatus;
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 在线学习中章节知识点选择
	 * @author wm
	 * @date 2019-5-28 上午11:34:26
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward goChaptePage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		Integer eduId = CommonTools.getFinalInteger("eduId", request);//教材编号
		Integer cptId = CommonTools.getFinalInteger("cptId", request);//章节编号
		request.setAttribute("eduId", eduId);
		request.setAttribute("cptId", cptId);
		return mapping.findForward("cptPage");
	}
	
	/**
	 * 根据教材编号或者章节信息
	 * @author wm
	 * @date 2019-5-28 下午03:15:44
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getStudyCptData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		EducationManager edum = (EducationManager) AppFactory.instance(null).getApp(Constants.WEB_EDUCATION_INFO);
		LoreInfoManager lm = (LoreInfoManager)AppFactory.instance(null).getApp(Constants.WEB_LORE_INFO);
		ChapterManager cm = (ChapterManager) AppFactory.instance(null).getApp(Constants.WEB_CHAPTER_INFO);
		StudyLogManager slm = (StudyLogManager) AppFactory.instance(null).getApp(Constants.WEB_STUDY_LOG_INFO);
		Integer eduId = CommonTools.getFinalInteger("eduId", request);//教材编号
		List<Chapter> cptList = cm.ListInfoByEduId(eduId);
		String msg = "noInfo";
		Map<String,Object> map = new HashMap<String,Object>();
		List<Education> eduList = edum.listSpecInfoById(eduId);
		if(eduList.size() > 0){
			Education edu = eduList.get(0);
			map.put("eduInfo", edu.getGradeSubject().getGradeName() + edu.getGradeSubject().getSubject().getSubName() + edu.getEduVolume());
			if(cptList.size() > 0){
				msg = "success";
				List<Object> list_d = new ArrayList<Object>();
				Integer i = 1;
				for(Chapter cpt : cptList){
					//默认获取第一单元的知识点，其他单元的通过单独点击获取
					Map<String,Object> map_d = new HashMap<String,Object>();
					map_d.put("cptId", cpt.getId());
					map_d.put("cptName", cpt.getChapterName());
					if(i.equals(1)){
						List<LoreInfo> lList = lm.listInfoByCptId(cpt.getId());
						List<Object> list_d_1 = new ArrayList<Object>();
						for(LoreInfo lore : lList){
							Map<String,Object> map_d_1 = new HashMap<String,Object>();
							map_d_1.put("loreId", lore.getId());
							map_d_1.put("loreName", lore.getLoreName());
							List<StudyLogInfo> slList = slm.listLastStudyInfoByOpt(CommonTools.getLoginUserId(request), lore.getId(), 1);
							//0:未学习,1:未通过,2:已经掌握
							if(slList.size() > 0){
								map_d_1.put("studyStatus", slList.get(0).getIsFinish());
								map_d_1.put("studyLogId", slList.get(0).getId());//studyLogId
							}else{
								map_d_1.put("studyStatus", 0);
								map_d_1.put("studyLogId", 0);
							}
							list_d_1.add(map_d_1);
						}
						map_d.put("loreList", list_d_1);
					}
					list_d.add(map_d);
					i++;
				}
				map.put("cptList", list_d);
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 获取指定章节下知识点列表
	 * @author wm
	 * @date 2019-5-28 下午05:20:16
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getLoreData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		LoreInfoManager lm = (LoreInfoManager)AppFactory.instance(null).getApp(Constants.WEB_LORE_INFO);
		StudyLogManager slm = (StudyLogManager) AppFactory.instance(null).getApp(Constants.WEB_STUDY_LOG_INFO);
		Integer cptId = CommonTools.getFinalInteger("cptId", request);//章节编号
		Integer stuId = CommonTools.getLoginUserId(request);
		String msg = "noInfo";
		Map<String,Object> map = new HashMap<String,Object>();
		List<LoreInfo> lList = lm.listInfoByCptId(cptId);
		if(lList.size() > 0){
			msg = "success";
			List<Object> list_d = new ArrayList<Object>();
			for(LoreInfo lore : lList){
				Map<String,Object> map_d = new HashMap<String,Object>();
				map_d.put("loreId", lore.getId());
				map_d.put("loreName", lore.getLoreName());
				List<StudyLogInfo> slList = slm.listLastStudyInfoByOpt(stuId, lore.getId(), 1);
				//0:未学习,1:未通过,2:已经掌握
				if(slList.size() > 0){
					map_d.put("studyStatus", slList.get(0).getIsFinish());
					map_d.put("studyLogId", slList.get(0).getId());//studyLogId
				}else{
					map_d.put("studyStatus", 0);
					map_d.put("studyLogId", 0);
				}
				list_d.add(map_d);
			}
			map.put("loreList", list_d);
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 检查一个知识点一个学生一天只能完成一次（自学）true-可以继续学习
	 * @author wm
	 * @date 2019-5-29 上午10:31:51
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward checkCurrentLore(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		StudyLogManager slm = (StudyLogManager) AppFactory.instance(null).getApp(Constants.WEB_STUDY_LOG_INFO);
		Integer studyLogId = CommonTools.getFinalInteger("studyLogId", request);
		boolean studyFlag = false;
		Map<String,Boolean> map = new HashMap<String,Boolean>();
		//自学的知识点一天只能完成一次，家庭作业只要状态是完成就不能再做(家庭不用在这判断)
		List<StudyLogInfo> slList = new ArrayList<StudyLogInfo>();
		if(studyLogId > 0){
			slList.add(slm.getEntityById(studyLogId));
		}else{
//			slList = slm.listLastStudyInfoByOpt(stuId, loreId, 1);
//			studyLogId等于0表示没有学习记录
		}
		if(slList.size() == 0){
			studyFlag = true;
		}else{
			StudyLogInfo sl = slList.get(0);
			Integer isFinish = sl.getIsFinish();
			String addTime = sl.getAddTime();
			if(isFinish.equals(1)){//未完成
				studyFlag = true;
			}else{//已完成
				//匹配时间
				addTime = addTime.substring(0, 10);
				if(!addTime.equals(CurrentTime.getStringDate())){
					studyFlag = true;
				}
			}
		}
		map.put("studyFlag", studyFlag);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	
	/**
	 * 进入学习地图页面(传递当前学习知识点编号和学习记录编号)
	 * @author wm
	 * @date 2019-5-30 上午08:19:25
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward goStudyMapPage(ActionMapping mapping ,ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		Integer loreId = CommonTools.getFinalInteger("loreId", request);
		Integer studyLogId = CommonTools.getFinalInteger("studyLogId", request);
		request.setAttribute("loreId", loreId);
		request.setAttribute("studyLogId", studyLogId);
		return mapping.findForward("studyMapPage");
	}
	
	/**
	 * 获取当前学习层数（未学习初始0）--不开启
	 * @author wm
	 * @date 2019-6-10 上午10:03:15
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getStudyMapInfo(ActionMapping mapping ,ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		StudyMapManager smm = (StudyMapManager)AppFactory.instance(null).getApp(Constants.WEB_STUDY_MAP_INFO);
		Integer loreId =  CommonTools.getFinalInteger("loreId", request);
		Integer stuId = CommonTools.getLoginUserId(request);
		Integer currStep = 0;
		Integer mapId = 0;
		List<StudyMapInfo> smList = smm.listInfoByOpt(stuId, loreId);
		if(smList.size() > 0){//存在学习记录
			StudyMapInfo sm = smList.get(0);
			mapId = sm.getId();
			currStep = sm.getCurrStep();
		}else{//不存在
			currStep = 0;
			mapId = 0;//初始学习地图
		}
		Map<String,Integer> map = new HashMap<String,Integer>();
		map.put("mapId", mapId);
		map.put("currStep", currStep);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 获取指定学习记录的学习任务
	 * @author wm
	 * @date 2019-5-29 下午06:01:43
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getStudyTaskInfo(ActionMapping mapping ,ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		StudyTaskManager stm = (StudyTaskManager)AppFactory.instance(null).getApp(Constants.WEB_STUDY_TASK_INFO);
		StudyLogManager slm = (StudyLogManager)AppFactory.instance(null).getApp(Constants.WEB_STUDY_LOG_INFO);
		Integer loreId =  CommonTools.getFinalInteger("loreId", request);
		Integer studyLogId = CommonTools.getFinalInteger("studyLogId", request);
		Integer logType = CommonTools.getFinalInteger("logType", request);//1:自学（默认不传）,2:家庭作业
		if(logType.equals(0)){
			logType = 1;
		}
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "noInfo";
		StudyLogInfo sl = null;
		if(studyLogId > 0){
			sl = slm.getEntityById(studyLogId);
		}else{
//			List<StudyLogInfo> slList = slm.listLastStudyInfoByOpt(CommonTools.getLoginUserId(request), loreId, logType);
//			if(slList.size() > 0){
//				sl = slList.get(0);
//			}
		}
		if(sl != null){//表示已经有记录
			//获取任务描述列表
			List<StudyTaskInfo> stList = stm.listTaskInfoByOpt(sl.getId(), "");
			if(stList.size() > 0){
				msg = "success";
				List<Object> list_d = new ArrayList<Object>();
				for(StudyTaskInfo st : stList){
					Map<String,Object> map_d = new HashMap<String,Object>();
					map_d.put("taskName", st.getTaskName());
					map_d.put("coin", st.getCoin());
					list_d.add(map_d);
				}
				map.put("taskList", list_d);
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 获取知识点的听，说，读，写内容
	 * @author wm
	 * @date 2019-6-10 下午03:49:43
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getSourceDetail(ActionMapping mapping ,ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		Integer stuId = CommonTools.getLoginUserId(request);
		Integer loreId =  CommonTools.getFinalInteger("loreId", request);
		String loreTypeName = Transcode.unescape_new1("loreTypeName", request);
		LoreQuestionManager lqm = (LoreQuestionManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_QUESTION_INFO);
		StudyMapManager smm = (StudyMapManager)AppFactory.instance(null).getApp(Constants.WEB_STUDY_MAP_INFO);
		Integer quoteLoreId = 0;
		String msg = "noInfo";
		Map<String,Object> map = new HashMap<String,Object>();
		if(loreId > 0 && !loreTypeName.equals("")){
			quoteLoreId = CommonTools.getQuoteLoreId(loreId);
			List<LoreQuestion> lqList = lqm.listInfoByLoreId(quoteLoreId, loreTypeName, 0);
			if(lqList.size() > 0){
				msg = "success";
				List<StudyMapInfo> smList = smm.listInfoByOpt(stuId, loreId);
				if(smList.size() > 0){//存在学习记录
					StudyMapInfo sm = smList.get(0);
					Integer currStep = sm.getCurrStep();
					if(currStep.equals(0)){
						if(loreTypeName.equals("知识讲解")){
							smm.updateStepById(sm.getId(), 1);
						}else{
							msg = "zsjjNotStart";
						}
					}else if(currStep.equals(1)){
						if(loreTypeName.equals("点拨指导")){
							smm.updateStepById(sm.getId(), 2);
						}else if(loreTypeName.equals("知识讲解")){
							//知识讲解能点开，但是不更新层数
						}else{
							msg = "dbzdNotStart";
						}
					}else if(currStep.equals(2)){
						if(loreTypeName.equals("知识清单")){
							smm.updateStepById(sm.getId(), 3);
						}else if(loreTypeName.equals("知识讲解") || loreTypeName.equals("点拨指导")){
							//知识讲解,点拨指导都能点开，但是不更新层数
						}else{//解题示范不能点开
							msg = "zsqdNotStart";
						}
					}else if(currStep.equals(3)){
						if(loreTypeName.equals("解题示范")){
							smm.updateStepById(sm.getId(), 4);
						}
						//其他都能打开
					}
				}else{
					if(loreTypeName.equals("知识讲解")){
						smm.addSM(stuId, loreId, 1);
					}else{
						msg = "zsjjNotStart";
					}
				}
				if(msg.equals("success")){
					if(loreTypeName.equals("知识讲解")){
						String sourceDetail = lqList.get(0).getQueAnswer();
						if(!sourceDetail.equals("")){
							map.put("sourceDetail", sourceDetail);
						}else{
							msg = "noInfo";
						}
					}else if(loreTypeName.equals("点拨指导") || loreTypeName.equals("知识清单")){
						Integer lqId = lqList.get(0).getId();
						List<LoreQuestionSubInfo> lqsList = lqm.listLQSInfoByLqId(lqId,"");
						if(lqsList.size() > 0){
							List<Object> list_d = new ArrayList<Object>();
							for(LoreQuestionSubInfo lqs : lqsList){
								String loreType = lqs.getLoreTypeName();
								Map<String,Object> map_d = new HashMap<String,Object>();
								map_d.put("loreType", loreType);
								map_d.put("lqsTitle", lqs.getLqsTitle());
								map_d.put("lqsContent", lqs.getLqsContent());
								list_d.add(map_d);
							}
							map.put("sourceDetailList", list_d);
						}else{
							msg = "noInfo";
						}
					}else if(loreTypeName.equals("解题示范")){
						List<Object> list_d = new ArrayList<Object>();
						for(LoreQuestion lq : lqList){
							Map<String,Object> map_d = new HashMap<String,Object>();
							map_d.put("lqId", lq.getId());
							map_d.put("queTitle", lq.getQueTitle());
							map_d.put("queSub", lq.getQueSub());
							map_d.put("queAnswer", lq.getQueAnswer());
							map_d.put("queResolution", lq.getQueResolution());
							list_d.add(map_d);
						}
						map.put("sourceDetailList", list_d);
					}
				}
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 获取学习地图数据
	 * @author wm
	 * @date 2019-5-30 上午09:11:32
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getStudyMapData(ActionMapping mapping ,ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		StudyLogManager slm = (StudyLogManager)AppFactory.instance(null).getApp(Constants.WEB_STUDY_LOG_INFO);
		LoreInfoManager lm = (LoreInfoManager)AppFactory.instance(null).getApp(Constants.WEB_LORE_INFO);
		LoreQuestionManager lqm = (LoreQuestionManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_QUESTION_INFO);
		StudyDetailManager sdm = (StudyDetailManager) AppFactory.instance(null).getApp(Constants.WEB_STUDY_DETAIL_INFO);
		Map<String,Object> map = new HashMap<String,Object>();
		Integer loreId =  CommonTools.getFinalInteger("loreId", request);//知识点最初的编号
		Integer studyLogId = CommonTools.getFinalInteger("studyLogId", request);//学习记录编号
		Integer logType = CommonTools.getFinalInteger("logType", request);//1:自学（默认不传）,2:家庭作业
//		UserClassInfoManager ucm = (UserClassInfoManager)AppFactory.instance(null).getApp(Constants.WEB_USER_CLASS_INFO);
		if(logType.equals(0)){
			logType = 1;
		}
		Integer currentLoreId =  0;//当前知识点编号
		Integer stuId = CommonTools.getLoginUserId(request);
		String msg = "error";
		String path = "";//针对性诊断的路线
		String pathChi = "";
		String studyPath = "";//学习的路线
		String studyPathChi = "";
		Integer stepCount = 0;//知识点有多少级
		Integer loreCount = 0;//有多少知识点
		Integer isFinish = 0;//该知识点完成状态（1:未完成,2:已完成）
		Integer task = 1;//第几个任务数（课后复习任务数）
		Integer money = 10;
		String loreTaskName = "";
		String buttonValue = "开始挑战";
		String pathType = "diagnosis";//类型:diagnosis--诊断，study--学习
		String loreTypeName = "针对性诊断";
		Integer access = -1;//本级知识点完成状态
		Integer quoteLoreId = 0;//通用知识点
		String nextLoreIdArray = "";//下级知识典编号数组
		String loreName = "";
//		Integer classId = 0;
		if(loreId > 0){
//			UserClassInfo  uc = ucm.getEntityByOpt(stuId, 2);//获取学生所在班级信息
//			if(uc != null){
//				classId = uc.getClassInfo().getId();
//			}
			LoreInfo lore = lm.getEntityById(loreId);
			if(lore != null){
				loreName = lore.getLoreName();
				msg = "success";
				if(lore.getInUse().equals(0)){//知识点有效才能继续
					quoteLoreId = lore.getMainLoreId();//通用知识点才有题
					String[] pathArr = CommonTools.getLorePath(loreId, "diagnosis");
					path =  pathArr[0];
					pathChi = pathArr[1];
					LoreTreeMenuJson ltmj = new LoreTreeMenuJson();
//					List<MyTreeNode> ltList = ltmj.showTree(loreId, 0,"desc");
//					StringBuilder buff = new StringBuilder();
//					StringBuilder buffChi = new StringBuilder();
//					ltmj.getPath(ltList, buff,buffChi);
//					path = buff.delete(buff.length() - 1, buff.length()).toString();
					if(!path.equals("")){
						stepCount = path.split(":").length;//多少级
						loreCount = ltmj.getLoreNum(path);//多少个知识点
					}
					String[] studyPathArr =  ltmj.getStudyPath(path,pathChi,"onlineStudy");
					studyPath = studyPathArr[0];
					studyPathChi = studyPathArr[1];
					StudyLogInfo sl = null;
					if(studyLogId.equals(0)){//新诊断
						List<StudyLogInfo> slList = slm.listLastStudyInfoByOpt(stuId, loreId, logType);
						if(slList.size() > 0){
							sl = slList.get(0);
							if(!sl.getIsFinish().equals(2)){
								studyLogId = sl.getId();
							}
						}
					}else{//之前有记录
						sl = slm.getEntityById(studyLogId);
						if(sl.getIsFinish().equals(2)){
							if(sl.getAddTime().substring(0, 10).equals(CurrentTime.getStringDate())){//当天完成
								
							}else{//之前完成
								studyLogId = 0;
								sl = null;
							}
						}
					}
					if(sl != null){//表示存在记录
						List<LoreQuestion> lqList = new ArrayList<LoreQuestion>();
						isFinish = sl.getIsFinish();
						if(isFinish == 2){//为学习和已经掌握都表示要重新开始
							task = 1;
							loreTaskName = "针对性诊断";
							loreTypeName = "针对性诊断";
							if(logType.equals(1)){//自学
								//只获取系统题库
								lqList = lqm.listInfoByLoreId(quoteLoreId, loreTypeName, 0);
							}else{//家庭作业
								//获取系统题库和自己老师发布的题库
								lqList = lqm.listInfoByLoreId(quoteLoreId, loreTypeName, 0);
							}
							money *= lqList.size();
							currentLoreId = loreId;
						}else{//未通过，需要定位到现在需要学习的地方
							Integer step = sl.getStep();//答题阶段--（针对性诊断-1、关联性诊断-2、关联知识点学习-3、本知识点学习-4、再次诊断-5）
							Integer stepComplete = sl.getStepComplete();//本阶段整体完成情况--0:未完成,1:已完成
							access = sl.getAccess();//本阶段详细完成情况（溯源诊断时分级完成情况）
							//从detail表中获取指定logId的最后一条详情
							List<StudyDetailInfo> sdList = sdm.listLastInfoByLogId(studyLogId, 0, "");
							if(sdList.size() > 0){
								//获取该题对应的知识点编号
								currentLoreId = sdList.get(0).getLoreInfo().getId();
								if(stepComplete == 0){//0:表示本阶段未完成（未做完题标记）
									if(step == 1){//诊断题未做完---loreId==currentLoreId
										buttonValue = "继续诊断";
										loreTaskName = "针对性诊断";
										loreTypeName = "针对性诊断";
										lqList = lqm.listInfoByLoreId(quoteLoreId, loreTypeName, 0);
										money *= lqList.size();
										task = 1;
										currentLoreId = loreId;
										nextLoreIdArray = currentLoreId + "";
									}else if(step == 2){//表示已经开始下级关联子知识点的诊断loreId不等于currentLoreId
										Integer answerNumber = 0;//题数
										String[] pathArray = path.split(":");
										Integer currentI = CommonTools.getCurrentStep(pathArray,currentLoreId);
										String[] currentPathArray = null;
										if(access == 0){//表示关联性诊断当前级还未完成。
											currentPathArray = pathArray[currentI].split("\\|");
										}else{//表示关联性诊断当前级已经完成，需要进行关联性诊断的下一级子知识点的关联性诊断
											currentPathArray = pathArray[currentI + 1].split("\\|");
											currentI = currentI + 1;
										}
										Integer currentPathLength = currentPathArray.length;
										task = currentI + 1;
										buttonValue = "继续诊断";
										loreTypeName = "针对性诊断";
										loreTaskName = task - 1+"级关联知识点诊断";
										for(Integer k = 0 ; k < currentPathLength ; k++){
											nextLoreIdArray += currentPathArray[k] + ",";
											lqList = lqm.listInfoByLoreId(CommonTools.getQuoteLoreId(Integer.parseInt(currentPathArray[k])), loreTypeName, 0);
											answerNumber += lqList.size();
										}
										money *= answerNumber;
										nextLoreIdArray = nextLoreIdArray.substring(0, nextLoreIdArray.length() - 1);
									}else if(step == 3){//关联知识点学习
										if(access == 4){//第一次进入再次诊断(列出再次诊断的全部试题)
											task = sl.getTaskNumber();
											pathType = "diagnosis";
											buttonValue = "再次诊断";
											loreTypeName = "再次诊断";
											String[] pathArray = path.split(":");
											Integer currentStep = CommonTools.getCurrentStep(pathArray, currentLoreId);
											Integer stepNumber = currentStep;
											LoreInfo lore_temp = lm.getEntityById(currentLoreId);
											loreTaskName = stepNumber +"级关联知识点("+lore_temp.getLoreName()+")诊断";
											//2014-10-22日修改（获取该知识典所有类型为loreTypeName的题型[0为题状态为有效状态]）
											List<LoreQuestion> zcList = lqm.listInfoByLoreId(CommonTools.getQuoteLoreId(currentLoreId), loreTypeName, 0);
											money *= zcList.size();
											nextLoreIdArray = String.valueOf(currentLoreId);
										}else if(access == 41){//开始学习
											task = sl.getTaskNumber();
											pathType = "study";
											buttonValue = "开始学习";
											loreTypeName = "再次诊断";
											String[] pathArray = path.split(":");
											
											Integer currentStep = CommonTools.getCurrentStep(pathArray, currentLoreId);
											Integer stepNumber = currentStep;

											LoreInfo lore_temp = lm.getEntityById(currentLoreId);
											loreTaskName = stepNumber +"级关联知识点("+lore_temp.getLoreName()+")学习";
											money = 0;
											nextLoreIdArray = String.valueOf(currentLoreId);
										}else if(access == 3){//之前有做过再次诊断，但未全部正确（做错题的不重复列表）
											task = sl.getTaskNumber();
											pathType = "diagnosis";
											buttonValue = "继续诊断";
											loreTypeName = "再次诊断";
											String[] pathArray = path.split(":");
											
											Integer currentStep = CommonTools.getCurrentStep(pathArray, currentLoreId);
											Integer  stepNumber = currentStep;
											LoreInfo lore_temp = lm.getEntityById(currentLoreId);
											loreTaskName = stepNumber +"级关联知识点("+lore_temp.getLoreName()+")诊断";
											//2014-10-22日修改（获取该知识典所有类型为loreTypeName的题型[0为题状态为有效状态]）
											//做对的题
											List<StudyDetailInfo> sdList_current_right = sdm.listCurrentRightInfoByLogId(studyLogId, currentLoreId, loreTypeName);
//											//该知识点类型为再次诊断的全部题
											List<LoreQuestion> zcList = lqm.listInfoByLoreId(CommonTools.getQuoteLoreId(currentLoreId), loreTypeName, 0);
//											//该知识点答对的题
											money *= zcList.size() - sdList_current_right.size();
											nextLoreIdArray = String.valueOf(currentLoreId);
										}else if(access == 31){//继续学习
											task = sl.getTaskNumber();
											pathType = "study";
											buttonValue = "继续学习";
											loreTypeName = "再次诊断";
											String[] pathArray = path.split(":");
											
											Integer currentStep = CommonTools.getCurrentStep(pathArray, currentLoreId);
											Integer  stepNumber = currentStep;
											LoreInfo lore_temp = lm.getEntityById(currentLoreId);
											loreTaskName = stepNumber +"级关联知识点("+lore_temp.getLoreName()+")学习";
											money = 0;//学习的没金币
											nextLoreIdArray = String.valueOf(currentLoreId);
										}else if(access == 2){//5部学习法(金币为0)
											task = sl.getTaskNumber();
											pathType = "diagnosis";
											buttonValue = "开始学习";
											loreTypeName = "再次诊断";
											String[] pathArray = path.split(":");
											
											Integer currentStep = CommonTools.getCurrentStep(pathArray, currentLoreId);
											Integer stepNumber = currentStep;

											LoreInfo lore_temp = lm.getEntityById(currentLoreId);
											loreTaskName = stepNumber +"级关联知识点("+lore_temp.getLoreName()+")学习";
											money = 0;
											nextLoreIdArray = String.valueOf(currentLoreId);
										}else if(access == 1){//当前知识点的再次诊断完成，需要定位到下一个知识
											task = sl.getTaskNumber();
											pathType = "study";
											loreTypeName = "再次诊断";
											String[] pathArray = path.split(":");
											String studyPath_new = CommonTools.getCurrentStudyPath_new(studyPath, currentLoreId);//获取当前知识点以后的知识点
											if(studyPath_new.split(":").length == 1){
												buttonValue = "本知识点学习";
												loreTaskName = "学习本知识点";
												money = 0;
												nextLoreIdArray = String.valueOf(loreId);
											}else{
												buttonValue = "开始学习";
												Integer currentLoreId_new = Integer.parseInt(studyPath_new.split(":")[0].split("\\|")[0]);
												Integer currentStep = CommonTools.getCurrentStep(pathArray, currentLoreId_new);
												Integer stepNumber = currentStep;
												LoreInfo lore_temp = lm.getEntityById(currentLoreId_new);
												loreTaskName = stepNumber +"级关联知识点("+lore_temp.getLoreName()+")学习";
												money = 0;
												nextLoreIdArray = String.valueOf(currentLoreId_new);
											}
										}else if(access == 0){//表示题没做完,继续诊断
											task = sl.getTaskNumber();
											pathType = "diagnosis";
											buttonValue = "继续诊断";
											loreTypeName = "再次诊断";
											String[] pathArray = path.split(":");
											
											Integer currentStep = CommonTools.getCurrentStep(pathArray, currentLoreId);
											Integer stepNumber = currentStep;//因为是当前知识点的下一级

											LoreInfo lore_temp = lm.getEntityById(currentLoreId);
											loreTaskName = stepNumber +"级关联知识点("+lore_temp.getLoreName()+")诊断";
											//做过的题和剩下的题拼装
											//全部题
											//根据全部再次诊断题除去该知识典做对的题就是目前需要在测试的再次诊断题
											//2014-10-22日修改（获取该知识典所有类型为loreTypeName的题型[0为题状态为有效状态]）
											List<LoreQuestion> lqList_all = lqm.listInfoByLoreId(CommonTools.getQuoteLoreId(currentLoreId), loreTypeName, 0);
//											已做的题（这个时候肯定没有重复的题）
											//获取最后一道已做过的题
											 List<StudyDetailInfo> lastList = sdm.listLastInfoByLogId(studyLogId, currentLoreId, "");
											 List<StudyDetailInfo> sdList_pre_right = new ArrayList<StudyDetailInfo>();
											 if(lastList.size() > 0){//表示存在最后一次诊断记录(列出的题为)
												 if(lastList.get(0).getLoreQuestion().getLoreTypeName().equals("再次诊断")){//说明最后做的一道题是再次诊断题，表示题还未做完
													 //当前阶段刚做过的再次诊断题列表
													 Integer completeTimes = lastList.get(0).getCompleteTimes();
													 //获取不是当前级别所有做正确的再次诊断题
													 sdList_pre_right = sdm.listPretRightInfoByLogId(studyLogId, currentLoreId, loreTypeName, completeTimes);
												 }
											 }
											money *= (lqList_all.size() - sdList_pre_right.size());//一直显示全部题的金币数
											nextLoreIdArray = String.valueOf(currentLoreId);
										}
									}else if(step == 4){//本知识点学习
										if(access == 4){//学习完还没再次诊断
											task = sl.getTaskNumber();
											pathType = "diagnosis";
											buttonValue = "本知识点诊断";
											loreTypeName = "再次诊断";
											loreTaskName = "本知识点诊断";
											//根据全部再次诊断题除去该知识典做对的题就是目前需要在测试的再次诊断题
											//2014-10-22日修改（获取该知识典所有类型为loreTypeName的题型[0为题状态为有效状态]）
											List<LoreQuestion> zcList = lqm.listInfoByLoreId(CommonTools.getQuoteLoreId(currentLoreId), loreTypeName, 0);
											money *= zcList.size();
											nextLoreIdArray = String.valueOf(loreId);
										}else if(access == 41){//还没学习
											task = sl.getTaskNumber();
											pathType = "study";
											buttonValue = "开始学习";
											loreTypeName = "再次诊断";
											loreTaskName = "学习本知识点";
											money = 0;
											nextLoreIdArray = String.valueOf(loreId);
										}else if(access == 3){//之前有做过再次诊断，但未全部正确（做错题的不重复列表）
											task = sl.getTaskNumber();
											pathType = "diagnosis";
											buttonValue = "继续诊断";
											loreTypeName = "再次诊断";
											loreTaskName = "本知识点诊断";
											//根据全部再次诊断题除去该知识典做对的题就是目前需要在测试的再次诊断题
											//2014-10-22日修改（获取该知识典所有类型为loreTypeName的题型[0为题状态为有效状态]）
											//做对的题
											List<StudyDetailInfo> sdList_current_right = sdm.listCurrentRightInfoByLogId(studyLogId, currentLoreId, loreTypeName);
											//该知识点类型为再次诊断的全部题
											List<LoreQuestion> zcList = lqm.listInfoByLoreId(CommonTools.getQuoteLoreId(currentLoreId), loreTypeName, 0);
											//该知识点答对的题
											money *= zcList.size() - sdList_current_right.size();
											nextLoreIdArray = String.valueOf(loreId);
										}else if(access == 31){//继续学习
											task = sl.getTaskNumber();
											pathType = "study";
											buttonValue = "继续学习";
											loreTypeName = "再次诊断";
											loreTaskName = "学习本知识点";
											money = 0;//学习的没金币
											nextLoreIdArray = String.valueOf(currentLoreId);
										}else if(access == 2){//本知识点学习
											task = sl.getTaskNumber();
											pathType = "study";
											buttonValue = "本知识点学习";
											loreTypeName = "再次诊断";
											loreTaskName = "学习本知识点";
											money = 0;
											nextLoreIdArray = String.valueOf(loreId);
										}else if(access == 0){//再次诊断没做完，继续诊断
											task = sl.getTaskNumber();
											pathType = "diagnosis";
											buttonValue = "继续诊断";
											loreTypeName = "再次诊断";
											loreTaskName = "本知识点诊断";
											//做过的题和剩下的题拼装
											//全部题
											//2014-10-22日修改（获取该知识典所有类型为loreTypeName的题型[0为题状态为有效状态]）
											List<LoreQuestion> lqList_all = lqm.listInfoByLoreId(CommonTools.getQuoteLoreId(loreId), loreTypeName, 0);
											
											//获取最后一道已做过的题
											List<StudyDetailInfo> lastList = sdm.listLastInfoByLogId(studyLogId, loreId, "");
											 List<StudyDetailInfo> sdList_pre_right = new ArrayList<StudyDetailInfo>();
											 if(lastList.size() > 0){//表示存在最后一次诊断记录(列出的题为)
												 if(lastList.get(0).getLoreQuestion().getLoreTypeName().equals("再次诊断")){//说明最后做的一道题是再次诊断题，表示题还未做完
													 //当前阶段刚做过的再次诊断题列表
													 Integer completeTimes = lastList.get(0).getCompleteTimes();
													 //获取不是当前级别所有做正确的再次诊断题
													 sdList_pre_right = sdm.listPretRightInfoByLogId(studyLogId, loreId, loreTypeName, completeTimes);
												 }
											 }
											money *= (lqList_all.size() - sdList_pre_right.size());//一直显示全部题的金币数
											nextLoreIdArray = String.valueOf(loreId);
										}
									}
								}else{//1:表示本阶段已经完成（做完题标记）
									//对于本阶段已经完成而全部没完成的，step完成的范围只能是1-3
									if(step == 1){//第一阶段--本知识点针对性诊断已经做完题，还没进入下一步
										//获取下级知识点
										Integer answerNumber = 0;
										String[] pathArray = path.split(":");
										Integer currentI = CommonTools.getCurrentStep(pathArray, currentLoreId);
										if(currentI + 1 == pathArray.length){
											//表示是最后一级（只有一级）
											//进入学习阶段
											currentLoreId = loreId;
											nextLoreIdArray = String.valueOf(loreId);
											task = 2;
											buttonValue = "本知识点学习";
											loreTaskName = "学习本知识点";
											money = 0;
											pathType = "study";
										}else{
											//表示有下级
											String[] nextPathArray = pathArray[currentI + 1].split(",");
											Integer nextPathLength = nextPathArray.length;
											task = currentI + 2;
											buttonValue = "启动溯源";
											loreTaskName = task - 1+"级关联知识点诊断";
											for(Integer k = 0 ; k < nextPathLength ; k++){
												String[] nextDetailPathArray = nextPathArray[k].split("\\|");
												for(Integer l = 0 ; l < nextDetailPathArray.length ; l++){
													nextLoreIdArray += nextDetailPathArray[l] + ",";
													//2014-10-22日修改（获取该知识典所有类型为针对性诊断的题型[0为题状态为有效状态]）
													lqList = lqm.listInfoByLoreId(CommonTools.getQuoteLoreId(Integer.parseInt(nextDetailPathArray[l])), "针对性诊断", 0);
													answerNumber += lqList.size();
												}
											}
											money *= answerNumber;
											nextLoreIdArray = nextLoreIdArray.substring(0, nextLoreIdArray.length() - 1);
										}
									}else if(step == 2){//关联知识典完成--进入关联知识典的学习
										//关联性诊断已经完成，可能是2种情况。
										//1：当前题全部做对，直接进入第三步-当前知识典的上一级关联知识典的学习
										//2：关联性诊断题全部做完，需要进入到第三步--关联知识典的学习
										if(access == 1){//当前题全部正确
											Integer stepNumber = CommonTools.getCurrentStep(path.split(":"), currentLoreId) - 1;
											studyPath = CommonTools.getStudyPath_new(studyPath, studyPathChi,currentLoreId)[0];
											//获取studyPath_new的第二组的数据中的第一组数据
											nextLoreIdArray = studyPath.split(":")[1].split("\\|")[0];
											currentLoreId = Integer.parseInt(nextLoreIdArray);
											
											LoreInfo lore_temp = lm.getEntityById(currentLoreId);
											loreTaskName = stepNumber+"级关联知识点("+lore_temp.getLoreName()+")学习";
											if(nextLoreIdArray.equals(String.valueOf(loreId))){
												loreTaskName = "学习本知识点";
												currentLoreId = loreId;
											}
										}else{//关联性诊断题全部做完(诊断的最后一级)
											String[] pathArray = studyPath.split(":");
											Integer stepNumber = pathArray.length  - 1;
											LoreInfo lore_temp = lm.getEntityById(currentLoreId);
											loreTaskName = stepNumber+"级关联知识点("+lore_temp.getLoreName()+")学习";
										}
										task = stepCount + 1;
										buttonValue = "开始学习";
										pathType = "study";
										money = 0;
										nextLoreIdArray = String.valueOf(currentLoreId);
									}else if(step == 3){//表示第3步刚刚完成，需要进入第4步本知识典的学习
										task = sl.getTaskNumber();
										pathType = "study";
										buttonValue = "本知识点学习";
										loreTypeName = "再次诊断";
										loreTaskName = "学习本知识点";
										money = 0;
										nextLoreIdArray = String.valueOf(loreId);
									}
								}
							}
						}
					}else{//表示没有学习记录，第一次开始
						task = 1;
						loreTaskName = "针对性诊断";
						//先查询lore表中，看知识点是否是被关联过来的
						Integer realLoreId = CommonTools.getQuoteLoreId(loreId);
						//2014-10-22日修改（获取该知识典所有类型为loreTypeName的题型[0为题状态为有效状态]）
						List<LoreQuestion> lqList = lqm.listInfoByLoreId(realLoreId, loreTypeName, 0);
						money *= lqList.size();
						currentLoreId = loreId;
						nextLoreIdArray = String.valueOf(currentLoreId);
					}
				}else{
					msg = "inUseError";//知识点无效，不能继续11
				}
				map.put("loreTaskName", loreTaskName);
				map.put("loreType", loreTypeName);
				map.put("coin", money);
				map.put("stepCount", stepCount);
				map.put("loreCount", loreCount);
				map.put("buttonValue", buttonValue);
				map.put("task", task);
				map.put("nextLoreIdArray", nextLoreIdArray);
				map.put("currentLoreId", currentLoreId);
				map.put("pathType", pathType);
				map.put("loreName", loreName);
				map.put("loreId", loreId);
				map.put("studyLogId", studyLogId);
				map.put("access", access);
				map.put("isFinish", isFinish);
				map.put("eduId", lore.getChapter().getEducation().getId());
				map.put("cptId", lore.getChapter().getId());
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 导向溯源路线图页面
	 * @author wm
	 * @date 2019-6-4 下午05:01:05
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward goTracebackPage(ActionMapping mapping ,ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		Integer loreId =  CommonTools.getFinalInteger("loreId", request);//知识点最初的编号
		Integer studyLogId = CommonTools.getFinalInteger("studyLogId", request);//学习记录编号
		request.setAttribute("loreId", loreId);
		request.setAttribute("studyLogId", studyLogId);
		return mapping.findForward("tracePage");
	}
	
	/**
	 * 获取溯源路线图数据
	 * @author wm
	 * @date 2019-6-4 下午05:26:09
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getTracebackData(ActionMapping mapping ,ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		StudyLogManager slm = (StudyLogManager)AppFactory.instance(null).getApp(Constants.WEB_STUDY_LOG_INFO);
		LoreInfoManager lm = (LoreInfoManager)AppFactory.instance(null).getApp(Constants.WEB_LORE_INFO);
		StudyDetailManager sdm = (StudyDetailManager) AppFactory.instance(null).getApp(Constants.WEB_STUDY_DETAIL_INFO);
		StudyTaskManager stm = (StudyTaskManager) AppFactory.instance(null).getApp(Constants.WEB_STUDY_TASK_INFO);
		StudyMapManager smm = (StudyMapManager)AppFactory.instance(null).getApp(Constants.WEB_STUDY_MAP_INFO);
		Integer loreId =  CommonTools.getFinalInteger("loreId", request);//知识点最初的编号
		Integer studyLogId = CommonTools.getFinalInteger("studyLogId", request);//学习记录编号
		Integer logType = CommonTools.getFinalInteger("logType", request);//1:自学（默认不传）,2:家庭作业
		if(logType.equals(0)){
			logType = 1;
		}
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "error";
		Integer currentLoreId = 0;//当前知识点编号
		Integer stuId = CommonTools.getLoginUserId(request);
		Integer totalMoney = -1;
		Integer step = 0;//答题阶段--（针对性诊断-1、关联性诊断-2、关联知识点学习-3、本知识点学习-4、再次诊断-5）
		Integer stepComplete = 0;
		Integer access = 0;//access:0:未做完，1--当前级全部正确，2:当前级部分正确或者无正确
		Integer isFinish = 0;//该知识点完成状态（1:未完成,2:已完成）
		String loreName = "";
		String path = "";//loreId组合
		String pathChi = "";//loreName组合
		String studyPath = "";
		String studyPathChi = "";
		String nextLoreIdArray = "";
		Integer option = 0;//1--诊断,2--学习
		String successStep = "";
		Integer success = -1;//0:正确,1:不正确
		String currentloreName_study = "";//当前5步学习法时的知识典名称
		String nextLoreStep = "上一级的关联知识点";
		if(loreId > 0){
			loreName = lm.getEntityById(loreId).getLoreName();
		}
		if(studyLogId > 0){
			StudyLogInfo sl = slm.getEntityById(studyLogId);
			if(sl != null){
				msg = "success";
				if(loreId.equals(0)){
					loreId = sl.getLoreInfo().getId();
				}
				String[] pathArr =  CommonTools.getLorePath(loreId, "diagnosis");
				path = pathArr[0];
				pathChi = pathArr[1];
				StudyTaskInfo st = stm.getLastInfoByLogId(studyLogId);
				if(st != null){
					totalMoney = st.getCoin();
					stepComplete = sl.getStepComplete();
					step = sl.getStep();
					access = sl.getAccess();
					isFinish = sl.getIsFinish();
					if(isFinish == 1){//表示未全部完成
						//获取最后（最近）的一条答题详情
						List<StudyDetailInfo> sdList = sdm.listLastInfoByLogId(studyLogId, 0, "");
						if(sdList.size() > 0){
							//获取该题对应的知识点编号
							currentLoreId = sdList.get(0).getLoreInfo().getId();
							if(stepComplete > 0){//本阶段答题已完成(还未进行下一级)
								if(step == 1){//针对性诊断
									//通过当前知识点获取下级子知识点
									String[] pathArray = path.split(":");
									Integer currentI = CommonTools.getCurrentStep(pathArray,currentLoreId);
									if(currentI + 1 == pathArray.length){
										//表示是最后一级（只有一级）
										//溯源完成，开始学习
										studyPath = String.valueOf(loreId);
										studyPathChi = lm.getEntityById(loreId).getLoreName();
										currentLoreId = loreId;
										option = 2;//即将准备学习
										nextLoreIdArray = String.valueOf(loreId);
										successStep = "本知识点";
										success = 2;
									}else{
										option = 1;//继续诊断
										nextLoreIdArray = "";
//										String[] nextPathArray = pathArray[currentI + 1].split(",");
//										Integer nextPathLength = nextPathArray.length;
//										for(Integer k = 0 ; k < nextPathLength ; k++){
//											String[] nextDetailPathArray = nextPathArray[k].split("\\|");
//											for(Integer l = 0 ; l < nextDetailPathArray.length ; l++){
//												nextLoreIdArray += nextDetailPathArray[l] + ",";
//											}
//										}
										String nextPath = pathArray[currentI + 1];
										String[] nextDetailPathArray = nextPath.split("\\|");
										for(Integer l = 0 ; l < nextDetailPathArray.length ; l++){
											nextLoreIdArray += nextDetailPathArray[l] + ",";
										}
										
										if(nextLoreIdArray.length() > 0){
											nextLoreIdArray = nextLoreIdArray.substring(0, nextLoreIdArray.length() - 1);
										}
										successStep = "本知识点";
										success = 1;
									}
								}else if(step == 2){//表示关联知识点诊断完成/或者是某一级的关联知识点全部正确，需要进入学习阶段
									LoreTreeMenuJson ltmj = new LoreTreeMenuJson();
//									studyPath = ltmj.getStudyPath(path);
									String[] studyPathArr = ltmj.getStudyPath(path,pathChi,"onlineStudy");
									studyPath = studyPathArr[0];
									studyPathChi = studyPathArr[1];
									//根据当前currentLoreId截取studyPath
//									String studyPath_new = CommonTools.getStudyPath_new(studyPath, currentLoreId);
									String[] studyPath_new_arr = CommonTools.getStudyPath_new(studyPath,studyPathChi, currentLoreId);
									studyPath = studyPath_new_arr[0];
									studyPathChi = studyPath_new_arr[1];
									option = 2;
//									studyPath = studyPath_new;
									Integer stepNumber = CommonTools.getCurrentStep(path.split(":"), currentLoreId);
									successStep = stepNumber+"级关联知识点的诊断题";
									if(access == 1){//当前关联知识典诊断全部正确，进入当前知识典的下级进行学习
										success = 3;
										//获取studyPath_new的第二组的数据中的第一组数据
										nextLoreIdArray = studyPath.split(":")[1].split("\\|")[0];
										if(nextLoreIdArray.equals(String.valueOf(loreId))){
											nextLoreStep = "本知识点";
										}
									}else{//学习完了所有的关联知识典，返回逆序进行全部学习access=2
										success = 2;
										nextLoreIdArray = String.valueOf(currentLoreId);
									}
								}else if(step ==3){//关联知识点学习
									LoreTreeMenuJson ltmj = new LoreTreeMenuJson();
//									studyPath = ltmj.getStudyPath(path);
									String[] studyPathArr = ltmj.getStudyPath(path,pathChi,"onlineStudy");
									studyPath = studyPathArr[0];
									studyPathChi = studyPathArr[1];
									option = 2;
									success = 5;
									nextLoreIdArray = String.valueOf(loreId);
								}
							}else{//本阶段答题完成，但本知识点所有的关联性诊断未完成
								//不会存在access=1的情况，1表示当前题全部正确，如果是全部正确的话，那么stepComplete>0
								if(step == 3){//
									if(access == 4 || access == 41){//第一/N次进入再次诊断（列出再次诊断全部题）
										option = 2;
										success = 4;
										nextLoreIdArray = String.valueOf(currentLoreId);
										LoreTreeMenuJson ltmj = new LoreTreeMenuJson();
//										studyPath = ltmj.getStudyPath(path);
										String[] studyPathArr = ltmj.getStudyPath(path,pathChi,"onlineStudy");
										studyPath = studyPathArr[0];
										studyPathChi = studyPathArr[1];
										Integer stepNumber = CommonTools.getCurrentStep(path.split(":"), currentLoreId);
										successStep = stepNumber+"级关联知识点的诊断题";
										//获取studyPath_new的第二组的数据中的第一组数据
										currentloreName_study = lm.getEntityById(currentLoreId).getLoreName();
										if(nextLoreIdArray.equals(String.valueOf(loreId))){
											nextLoreStep = "本知识点";
										}
									}else if(access == 3){//之前没把再次诊断全部做对（列出做错的再次诊断题）
										option = 2;
										success = 4;
										nextLoreIdArray = String.valueOf(currentLoreId);
										LoreTreeMenuJson ltmj = new LoreTreeMenuJson();
//										studyPath = ltmj.getStudyPath(path);
										String[] studyPathArr = ltmj.getStudyPath(path,pathChi,"onlineStudy");
										studyPath = studyPathArr[0];
										studyPathChi = studyPathArr[1];
										Integer stepNumber = CommonTools.getCurrentStep(path.split(":"), currentLoreId);
										//获取studyPath_new的第二组的数据中的第一组数据
										currentloreName_study = lm.getEntityById(currentLoreId).getLoreName();
										successStep = stepNumber+"级关联知识点("+currentloreName_study+")";
										if(nextLoreIdArray.equals(String.valueOf(loreId))){
											nextLoreStep = "本知识点";
										}
									}else if(access == 31){//之前没把再次诊断全部做对（列出做错的再次诊断题）
										option = 2;
										success = 2;
										nextLoreIdArray = String.valueOf(currentLoreId);
										LoreTreeMenuJson ltmj = new LoreTreeMenuJson();
//										studyPath = ltmj.getStudyPath(path);
										String[] studyPathArr = ltmj.getStudyPath(path,pathChi,"onlineStudy");
										studyPath = studyPathArr[0];
										studyPathChi = studyPathArr[1];
										Integer stepNumber = CommonTools.getCurrentStep(path.split(":"), currentLoreId);
										//获取studyPath_new的第二组的数据中的第一组数据
										currentloreName_study = lm.getEntityById(currentLoreId).getLoreName();
										successStep = stepNumber+"级关联知识点("+currentloreName_study+")";
										if(nextLoreIdArray.equals(String.valueOf(loreId))){
											nextLoreStep = "本知识点";
										}
									}else if(access == 2){//进入5步学习法
										option = 2;
										success = 1;
										nextLoreIdArray = String.valueOf(currentLoreId);
										LoreTreeMenuJson ltmj = new LoreTreeMenuJson();
//										studyPath = ltmj.getStudyPath(path);
										String[] studyPathArr = ltmj.getStudyPath(path,pathChi,"onlineStudy");
										studyPath = studyPathArr[0];
										studyPathChi = studyPathArr[1];
										//根据当前currentLoreId截取studyPath
//										String studyPath_new = CommonTools.getStudyPath_new(studyPath, currentLoreId);
										String[] studyPath_new_arr = CommonTools.getStudyPath_new(studyPath,studyPathChi, currentLoreId);
										studyPath = studyPath_new_arr[0];
										studyPathChi = studyPath_new_arr[1];
										Integer stepNumber = CommonTools.getCurrentStep(path.split(":"), currentLoreId);
										successStep = stepNumber+"级关联知识点的诊断题";
										//获取studyPath_new的第二组的数据中的第一组数据
										currentloreName_study = lm.getEntityById(currentLoreId).getLoreName();
										if(nextLoreIdArray.equals(String.valueOf(loreId))){
											nextLoreStep = "本知识点";
										}
									}else if(access == 1){//题做完，全部正确（需要定位到下一个知识点）
										LoreTreeMenuJson ltmj = new LoreTreeMenuJson();
//										studyPath = ltmj.getStudyPath(path);
										String[] studyPathArr = ltmj.getStudyPath(path,pathChi,"onlineStudy");
										studyPath = studyPathArr[0];
										studyPathChi = studyPathArr[1];
										String studyPath_new = CommonTools.getCurrentStudyPath_new(studyPath, currentLoreId);
										Integer currentLoreId_new = Integer.parseInt(studyPath_new.split(":")[0].split("\\|")[0]);
										option = 2;
										nextLoreIdArray = String.valueOf(currentLoreId_new);
										success = 5;//进入5步学习法
										//获取studyPath_new的第二组的数据中的第一组数据
										currentloreName_study = lm.getEntityById(currentLoreId_new).getLoreName();
										if(nextLoreIdArray.equals(String.valueOf(loreId))){
											nextLoreStep = "本知识点";
										}
									}else if(access == 0){//表示已经做了再次诊断题，但是没做完（将已做的题和未做的列出来）
										LoreTreeMenuJson ltmj = new LoreTreeMenuJson();
//										studyPath = ltmj.getStudyPath(path);
										String[] studyPathArr = ltmj.getStudyPath(path,pathChi,"onlineStudy");
										studyPath = studyPathArr[0];
										studyPathChi = studyPathArr[1];
										//根据当前currentLoreId截取studyPath
										option = 2;
										nextLoreIdArray = String.valueOf(currentLoreId);
										Integer stepNumber = CommonTools.getCurrentStep(path.split(":"), currentLoreId);
										successStep = stepNumber+"级关联知识点";
										success = 0;//再次诊断未做完
										//获取studyPath_new的第二组的数据中的第一组数据
										currentloreName_study = lm.getEntityById(currentLoreId).getLoreName();
										if(nextLoreIdArray.equals(String.valueOf(loreId))){
											nextLoreStep = "本知识点";
										}
									}
								}else if(step == 4){
									if(access == 4){//第一次进入再次诊断（列出再次诊断全部题）
										option = 2;
										success = 4;
										nextLoreIdArray = String.valueOf(loreId);
										LoreTreeMenuJson ltmj = new LoreTreeMenuJson();
//										studyPath = ltmj.getStudyPath(path);
										String[] studyPathArr = ltmj.getStudyPath(path,pathChi,"onlineStudy");
										studyPath = studyPathArr[0];
										studyPathChi = studyPathArr[1];
										successStep = "本知识点的诊断题";
										currentloreName_study = lm.getEntityById(loreId).getLoreName();
										if(nextLoreIdArray.equals(String.valueOf(loreId))){
											nextLoreStep = "本知识点";
										}
									}else if(access == 41){
										option = 2;
										success = 4;
										nextLoreIdArray = String.valueOf(loreId);
										LoreTreeMenuJson ltmj = new LoreTreeMenuJson();
//										studyPath = ltmj.getStudyPath(path);
										String[] studyPathArr = ltmj.getStudyPath(path,pathChi,"onlineStudy");
										studyPath = studyPathArr[0];
										studyPathChi = studyPathArr[1];
									}else if(access == 3){//之前没把再次诊断全部做对（列出做错的再次诊断题）
										option = 2;
										success = 4;
										nextLoreIdArray = String.valueOf(loreId);
										LoreTreeMenuJson ltmj = new LoreTreeMenuJson();
//										studyPath = ltmj.getStudyPath(path);
										String[] studyPathArr = ltmj.getStudyPath(path,pathChi,"onlineStudy");
										studyPath = studyPathArr[0];
										studyPathChi = studyPathArr[1];
										successStep = "本知识点的诊断题";
										//获取studyPath_new的第二组的数据中的第一组数据
										currentloreName_study = lm.getEntityById(loreId).getLoreName();
										if(nextLoreIdArray.equals(String.valueOf(loreId))){
											nextLoreStep = "本知识点";
										}
									}else if(access == 31){//之前没把再次诊断全部做对（列出做错的再次诊断题）
										option = 2;
										success = 2;
										nextLoreIdArray = String.valueOf(loreId);
										LoreTreeMenuJson ltmj = new LoreTreeMenuJson();
//										studyPath = ltmj.getStudyPath(path);
										String[] studyPathArr = ltmj.getStudyPath(path,pathChi,"onlineStudy");
										studyPath = studyPathArr[0];
										studyPathChi = studyPathArr[1];
										successStep = "本知识点的诊断题";
										//获取studyPath_new的第二组的数据中的第一组数据
										currentloreName_study = lm.getEntityById(loreId).getLoreName();
										if(nextLoreIdArray.equals(String.valueOf(loreId))){
											nextLoreStep = "本知识点";
										}
									}else if(access == 2){
										LoreTreeMenuJson ltmj = new LoreTreeMenuJson();
//										studyPath = ltmj.getStudyPath(path);
										String[] studyPathArr = ltmj.getStudyPath(path,pathChi,"onlineStudy");
										studyPath = studyPathArr[0];
										studyPathChi = studyPathArr[1];
										option = 2;
										nextLoreIdArray = String.valueOf(loreId);
										success = 5;//进入5步学习法
									}else if(access == 0){
										LoreTreeMenuJson ltmj = new LoreTreeMenuJson();
//										studyPath = ltmj.getStudyPath(path);
										String[] studyPathArr = ltmj.getStudyPath(path,pathChi,"onlineStudy");
										studyPath = studyPathArr[0];
										studyPathChi = studyPathArr[1];
										option = 2;
										nextLoreIdArray = String.valueOf(loreId);
										successStep = "本知识点的诊断题";
										success = 0;//再次诊断未做完
										//获取studyPath_new的第二组的数据中的第一组数据
										currentloreName_study = lm.getEntityById(loreId).getLoreName();
										if(nextLoreIdArray.equals(String.valueOf(loreId))){
											nextLoreStep = "本知识点";
										}
									}
								}else{//5:再次诊断
									if(access.equals(2)){
										nextLoreIdArray = "";
										option = 1;
										String[] pathArray = path.split(":");
										Integer currentI = CommonTools.getCurrentStep(pathArray, currentLoreId);
										String[] currentPathArray = pathArray[currentI+1].split("\\|");
										for(Integer i = 0 ; i < currentPathArray.length ; i++){
											nextLoreIdArray += currentPathArray[i]+",";
										}
										if(nextLoreIdArray.length() > 0){
											nextLoreIdArray = nextLoreIdArray.substring(0, nextLoreIdArray.length() - 1);
										}
										successStep = currentI+"级关联知识点的诊断题";
										success = 1;
									}else{//本阶段还未点最后的提交，access为0
										nextLoreIdArray = "";
										option = 1;
										String[] pathArray = path.split(":");
										Integer currentI = CommonTools.getCurrentStep(pathArray, currentLoreId);											
										String[] currentPathArray = pathArray[currentI].split("\\|");
										for(Integer i = 0 ; i < currentPathArray.length ; i++){
											nextLoreIdArray += currentPathArray[i]+",";
										}
										if(nextLoreIdArray.length() > 0){
											nextLoreIdArray = nextLoreIdArray.substring(0, nextLoreIdArray.length() - 1);
										}
										if(currentI == 0){
											successStep = "本知识点";
											success = 0;
										}else{
											success = 1;
											successStep = currentI+"级关联知识点的诊断题";
										}
									}
								}
							}
						}
					}else if(isFinish == 2){//表示全部完成
						//从detail表中获取指定logId的最后一条详情
						List<StudyDetailInfo> sdList = sdm.listLastInfoByLogId(studyLogId, 0, "");
						StudyDetailInfo sdLastInfo = sdList.get(0);
						//获取该题对应的知识点编号
						currentLoreId = sdLastInfo.getLoreQuestion().getLoreInfo().getId();
						studyPath = "";
						if(step == 1){//表示是本知识典诊断时一次性全部正确通过
							option = 1;
							success = 2;
							path = String.valueOf(currentLoreId);
							pathChi = lm.getEntityById(currentLoreId).getLoreName();
							nextLoreIdArray = String.valueOf(currentLoreId);
						}else{//通过溯源完成的
							List<StudyTaskInfo> stList_new = stm.listTaskInfoByOpt(studyLogId, "");
							totalMoney = stList_new.get(0).getCoin();
							LoreTreeMenuJson ltmj = new LoreTreeMenuJson();
//							studyPath = ltmj.getStudyPath(path);
							String[] studyPathArr = ltmj.getStudyPath(path,pathChi,"onlineStudy");
							studyPath = studyPathArr[0];
							studyPathChi = studyPathArr[1];
							option = 2;
							nextLoreIdArray = "0";
							successStep = "本知识点的诊断题";
							success = 6;//全部完成
						}
					}
				}
			}
		}else{//第一次
			List<StudyMapInfo> smList = smm.listInfoByOpt(stuId, loreId);
			if(smList.size() > 0){//存在学习记录
				if(smList.get(0).getCurrStep().equals(4)){
					LoreInfo lore = lm.getEntityById(loreId);
					if(lore != null){
						msg = "success";
//						List<StudyLogInfo> slList = slm.listLastStudyInfoByOpt(stuId, loreId, logType);
						List<StudyLogInfo> slList = new ArrayList<StudyLogInfo>();
						if(slList.size() > 0){
							if(slList.get(0).getIsFinish() == 2){
								if(slList.get(0).getStep() == 1){
									option = 2;
									success = 6;
									studyPath = String.valueOf(loreId);
									studyPathChi = lore.getLoreName();
									nextLoreIdArray = "0";
									studyLogId = slList.get(0).getId();
									List<StudyTaskInfo> stList_new = stm.listTaskInfoByOpt(studyLogId, "");
									totalMoney = stList_new.get(0).getCoin();
								}else if(slList.get(0).getStep() == 5){
									StudyTaskInfo st = stm.getLastInfoByLogId(studyLogId);
									totalMoney = st.getCoin();
									String[] pathArr = CommonTools.getLorePath(loreId, "diagnosis");
									path = pathArr[0];
									pathChi = pathArr[1];
//									path = CommonTools.getLorePath(loreId, "diagnosis");
									LoreTreeMenuJson ltmj = new LoreTreeMenuJson();
									String[] studyPathArr = ltmj.getStudyPath(path,pathChi,"onlineStudy");
									studyPath = studyPathArr[0];
									studyPathChi = studyPathArr[1];
									option = 2;
									nextLoreIdArray = "0";
									successStep = "本知识点的诊断题";
									success = 6;//全部完成
								}
							}
						}else{//表示此知识典是第一次做，之前没有完成的记录
							option = 1;
							String[] pathArr = CommonTools.getLorePath(loreId, "diagnosis");
							path = pathArr[0];
							pathChi = pathArr[1];
							nextLoreIdArray = String.valueOf(loreId);
						}
					}
				}else{
					msg = "jtsfNotStart";//解题示范未学习
				}
			}else{
				msg = "jtsfNotStart";//解题示范未学习
			}
		}
		if(msg.equals("success")){
			map.put("option", option);
			map.put("totalMoney", totalMoney);
			map.put("success", success);
			map.put("path", path);
			map.put("pathChi", pathChi);
			map.put("studyPath", studyPath);
			map.put("studyPathChi", studyPathChi);
			map.put("nextLoreIdArray", nextLoreIdArray);
			map.put("successStep", successStep);
			map.put("nextLoreStep", nextLoreStep);
			map.put("currentloreName_study", currentloreName_study);
			map.put("access", access);
			map.put("loreId", loreId);
			map.put("loreName", loreName);
			map.put("studyLogId", studyLogId);
			map.put("isFinish", isFinish);
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 导向做题页面
	 * @author wm
	 * @date 2019-6-11 上午09:20:56
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward goQuestionPage(ActionMapping mapping ,ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		Integer loreId = CommonTools.getFinalInteger("loreId", request);
		Integer studyLogId = CommonTools.getFinalInteger("studyLogId", request);
		String pathType = CommonTools.getFinalStr("pathType", request);//路径类型(diagnosis,study)
		String loreType = Transcode.MyTranscodeUTF(request.getParameter("loreType"));
		String nextLoreIdArray = CommonTools.getFinalStr("nextLoreIdArray",request);
		String loreTaskName =  Transcode.MyTranscodeUTF(request.getParameter("loreTaskName"));//任务名称
		request.setAttribute("loreId", loreId);
		request.setAttribute("studyLogId", studyLogId);
		request.setAttribute("loreType", loreType);
		request.setAttribute("nextLoreIdArray", nextLoreIdArray);
		request.setAttribute("loreTaskName", loreTaskName);
		String page = "";
		if(pathType.equals("study")){
			page = "stepStudyPage";
		}else{
			page = "questionPage";
		}
		return mapping.findForward(page);
	}
	
	/**
	 * 获取做题题库（针对性诊断和再次诊断有用）
	 * @author wm
	 * @date 2019-6-11 上午09:21:41
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getQuestionData(ActionMapping mapping ,ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		StudyLogManager slm = (StudyLogManager)AppFactory.instance(null).getApp(Constants.WEB_STUDY_LOG_INFO);
		LoreQuestionManager lqm = (LoreQuestionManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_QUESTION_INFO);
		StudyDetailManager sdm = (StudyDetailManager) AppFactory.instance(null).getApp(Constants.WEB_STUDY_DETAIL_INFO);
		StudyMapManager smm = (StudyMapManager)AppFactory.instance(null).getApp(Constants.WEB_STUDY_MAP_INFO);
		LoreInfoManager lm = (LoreInfoManager)AppFactory.instance(null).getApp(Constants.WEB_LORE_INFO);
		Integer loreId = CommonTools.getFinalInteger("loreId", request);
		Integer studyLogId = CommonTools.getFinalInteger("studyLogId", request);
		String loreType = Transcode.unescape_new1("loreType", request);
		String nextLoreIdArray = CommonTools.getFinalStr("nextLoreIdArray",request);
		String loreTaskName = Transcode.unescape_new1("loreTaskName", request);
		Integer stuId = CommonTools.getLoginUserId(request);
		Integer currentLoreId = 0;
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "success";
		String loreName = "";
		if(loreType.equals("")){
			loreType = "针对性诊断";
		}
		if(loreId > 0){
			LoreInfo lore = lm.getEntityById(loreId);
			if(lore != null){
				loreName = lore.getLoreName();
				String[] pathArr = CommonTools.getLorePath(loreId, "diagnosis");
				map.put("path", pathArr[0]);
			}
		}
		if(studyLogId > 0){//表示是继续之前的操作
			StudyLogInfo sl = slm.getEntityById(studyLogId);
			if(sl != null){
				List<LoreQuestion> lqList_old = new ArrayList<LoreQuestion>();
				List<StudyDetailInfo> sdList_used = new ArrayList<StudyDetailInfo>();
				if(!nextLoreIdArray.equals("")){
					String[] nextLoreIdArray_1 = nextLoreIdArray.split(",");
					for(Integer i = 0 ; i < nextLoreIdArray_1.length ; i++){
						loreId = Integer.parseInt(nextLoreIdArray_1[i]);
						currentLoreId = loreId;
						lqList_old.addAll(lqm.listInfoByLoreId( CommonTools.getQuoteLoreId(currentLoreId), loreType, 0));//全部题列表
						if(loreType.equals("再次诊断")){//获取上次的学习情况(根据logId+nextLoreIdArray+loreType)获取答题正确的题
							sdList_used.addAll(sdm.listCurrentRightInfoByLogId(studyLogId, currentLoreId, loreType));
						}else{//获取上次的学习情况(根据logId+nextLoreIdArray+loreType)--针对性诊断
							sdList_used.addAll(sdm.listInfoByOpt(studyLogId, currentLoreId, loreType));
						}
					}
				}else{
					lqList_old.addAll(lqm.listInfoByLoreId( CommonTools.getQuoteLoreId(loreId), loreType, 0));//全部题列表
				}
				List<Object> list_d = new ArrayList<Object>();
				if(loreType.equals("针对性诊断")){//将做过的题的情况和未做过的题都列出来
					if(lqList_old.size() > 0){
						for(Integer i = 0 ; i < lqList_old.size() ; i++){
							LoreQuestion lq = lqList_old.get(i);
							Map<String,Object> map_d = new HashMap<String,Object>();
							Integer lqId_old = lq.getId();
							map_d.put("lqId", lqId_old);
							Integer quoteLoreId = lq.getLoreInfo().getId();
							String[] loreInfo = CommonTools.getRealLoreInfo(quoteLoreId, loreId);//当前题库的指定版本下的知识点
							map_d.put("currLoreId", Integer.parseInt(loreInfo[0]));
							map_d.put("currLoreName", loreInfo[1]);
							String lqType = lq.getQueType();
							map_d.put("lqType", lqType);
							map_d.put("loreType", lq.getLoreTypeName());
							map_d.put("lqSub", lq.getQueSub());
							map_d.put("answerA", lq.getA());
							map_d.put("answerB", lq.getB());
							map_d.put("answerC", lq.getC());
							map_d.put("answerD", lq.getD());
							map_d.put("answerE", lq.getE());
							map_d.put("answerF", lq.getF());
							Integer completeStatus = 0;//做题状态(0:未做,1:已做)
							if(sdList_used.size() > 0){
								for(Integer j = 0 ; j < sdList_used.size() ; j++){
									StudyDetailInfo sd = sdList_used.get(j);
									LoreQuestion lq_use = sd.getLoreQuestion();
									if(lqId_old.equals(lq_use.getId())){//做过
										completeStatus = 1;
										map_d.put("answerA", sd.getA());
										map_d.put("answerB", sd.getB());
										map_d.put("answerC", sd.getC());
										map_d.put("answerD", sd.getD());
										map_d.put("answerE", sd.getE());
										map_d.put("answerF", sd.getF());
										map_d.put("realAnswer", sd.getRealAnswer());
										map_d.put("myAnswer", sd.getMyAnswer());
										map_d.put("result", sd.getResult());//答案对错0:错，1:对
										map_d.put("questionStep", sd.getQueStep());
										Integer lqsId = lq.getQueTips();
										if(lqsId > 0){
											LoreQuestionSubInfo lqs = lqm.getEntityByLqsId(lqsId);
											if(lqs != null){
												map_d.put("tipsTitle", lqs.getLqsTitle());
												map_d.put("tipsContent", lqs.getLqsContent());
											}
										}
										break;
									}
								}
							}else{//在做错题是在旁边显示出提示信息
//								Integer lqsId = lq.getQueTips();
//								if(lqsId > 0){
//									LoreQuestionSubInfo lqs = lqm.getEntityByLqsId(lqsId);
//									if(lqs != null){
//										map_d.put("tipsTitle", lqs.getLqsTitle());
//										map_d.put("tipsContent", lqs.getLqsContent());
//									}
//								}
							}
							map_d.put("completeStatus", completeStatus);//做题状态(0:未做,1:已做)
							if(completeStatus.equals(0)){
								if(lqType.equals("单选题") || lqType.equals("多选题") || lqType.equals("判断题") || lqType.equals("填空题") || lqType.equals("问答题")){
									map_d.put("answerNum", 1);
								}else{//填空选择题
									map_d.put("answerNum", lq.getQueAnswer().split(",").length);
								}
							}
							if(lqType.equals("填空题") || lqType.equals("问答题")){
								map_d.put("realAnswer", lq.getQueAnswer());
							}
							list_d.add(map_d);
						}
					}
					map.put("lqList", list_d);
				}else if(loreType.equals("再次诊断")){//再次诊断()：
					 //分三种情况(当是再次诊断时，不会有2和1的状态)
					 //0:诊断题未做完，下次的诊断题列表为做过的+剩下的题
					 //3:诊断题做完，继续诊断的话，之前该知识点没有做对的题（全部题-做对的题）
					 //4:诊断题没做,下次的诊断题是该知识点所有的再次诊断题
					//再次诊断时nextLoreIdArray只有一个值
					Integer access = sl.getAccess();
					if(access == 4){
						//lqList_old
						for(Integer i = 0 ; i < lqList_old.size() ; i++){
							LoreQuestion lq = lqList_old.get(i);
							Map<String,Object> map_d = new HashMap<String,Object>();
							map_d.put("lqId", lq.getId());
							Integer quoteLoreId = lq.getLoreInfo().getId();
							String[] loreInfo = CommonTools.getRealLoreInfo(quoteLoreId, loreId);//当前题库的指定版本下的知识点
							map_d.put("currLoreId", Integer.parseInt(loreInfo[0]));
							map_d.put("currLoreName", loreInfo[1]);
							String lqType = lq.getQueType();
							map_d.put("lqType", lqType);
							map_d.put("loreType", lq.getLoreTypeName());
							map_d.put("lqSub", lq.getQueSub());
							map_d.put("answerA", lq.getA());
							map_d.put("answerB", lq.getB());
							map_d.put("answerC", lq.getC());
							map_d.put("answerD", lq.getD());
							map_d.put("answerE", lq.getE());
							map_d.put("answerF", lq.getF());
							map_d.put("completeStatus", 0);//做题状态(0:未做,1:已做)
							Integer lqsId = lq.getQueTips();
							if(lqsId > 0){
								LoreQuestionSubInfo lqs = lqm.getEntityByLqsId(lqsId);
								if(lqs != null){
									map_d.put("tipsTitle", lqs.getLqsTitle());
									map_d.put("tipsContent", lqs.getLqsContent());
								}
							}
							if(lqType.equals("单选题") || lqType.equals("多选题") || lqType.equals("判断题") || lqType.equals("填空题") || lqType.equals("问答题")){
								map_d.put("answerNum", 1);
							}else{//填空选择题
								map_d.put("answerNum", lq.getQueAnswer().split(",").length);
							}
							if(lqType.equals("填空题") || lqType.equals("问答题")){
								map_d.put("realAnswer", lq.getQueAnswer());
							}
							list_d.add(map_d);
						}
						map.put("lqList", list_d);
					}else if(access == 3){
						//获取做对的再次诊断题
						for(Integer i = 0 ; i < lqList_old.size() ; i++){
							LoreQuestion lq = lqList_old.get(i);
							Map<String,Object> map_d = new HashMap<String,Object>();
							Integer lqId_old = lq.getId();
							Integer status = 1;
							for(Integer j = 0 ; j < sdList_used.size() ; j++){
								StudyDetailInfo sd = sdList_used.get(j);
								if(lqId_old.equals(sd.getLoreQuestion().getId())){//做对过
									status = 0;
									break;
								}
							}
							if(status.equals(1)){//过滤掉已做正确的题
								map_d.put("lqId", lqId_old);
								Integer quoteLoreId = lq.getLoreInfo().getId();
								String[] loreInfo = CommonTools.getRealLoreInfo(quoteLoreId, loreId);//当前题库的指定版本下的知识点
								map_d.put("currLoreId", Integer.parseInt(loreInfo[0]));
								map_d.put("currLoreName", loreInfo[1]);
								String lqType = lq.getQueType();
								map_d.put("lqType", lqType);
								map_d.put("loreType", lq.getLoreTypeName());
								map_d.put("lqSub", lq.getQueSub());
								map_d.put("answerA", lq.getA());
								map_d.put("answerB", lq.getB());
								map_d.put("answerC", lq.getC());
								map_d.put("answerD", lq.getD());
								map_d.put("answerE", lq.getE());
								map_d.put("answerF", lq.getF());
								map_d.put("completeStatus", 0);//做题状态(0:未做,1:已做)
								Integer lqsId = lq.getQueTips();
								if(lqsId > 0){
									LoreQuestionSubInfo lqs = lqm.getEntityByLqsId(lqsId);
									if(lqs != null){
										map_d.put("tipsTitle", lqs.getLqsTitle());
										map_d.put("tipsContent", lqs.getLqsContent());
									}
								}
								if(lqType.equals("单选题") || lqType.equals("多选题") || lqType.equals("判断题") || lqType.equals("填空题") || lqType.equals("问答题")){
									map_d.put("answerNum", 1);
								}else{//填空选择题
									map_d.put("answerNum", lq.getQueAnswer().split(",").length);
								}
								if(lqType.equals("填空题") || lqType.equals("问答题")){
									map_d.put("realAnswer", lq.getQueAnswer());
								}
								list_d.add(map_d);
							}
						}
						map.put("lqList", list_d);
					}else if(access == 0){
						//表示题还未做完-显示答题正确的题和未做的题
						 //?需要思考（接下来的题库列表为正确的+最后一次做错的+剩下没做的）
						 //获取最后一道已做过的题
						 List<StudyDetailInfo> lastList = sdm.listLastInfoByLogId(studyLogId, loreId, "");
						 if(lastList.size() > 0){//表示存在最后一次诊断记录(列出的题为)
							 if(lastList.get(0).getLoreQuestion().getLoreTypeName().equals("再次诊断")){//说明最后做的一道题是再次诊断题，表示题还未做完
								//当前阶段刚做过的再次诊断题列表
								 Integer completeTimes = lastList.get(0).getCompleteTimes();
								//当前级别新做的再次诊断题
								 List<StudyDetailInfo> sdList_new = sdm.listLastInfoByOpt(studyLogId, loreId, loreType, completeTimes);
								//获取不是当前级别所有做正确的再次诊断题
								 List<StudyDetailInfo> sdList_pre_right = sdm.listPretRightInfoByLogId(studyLogId, loreId, loreType, completeTimes);
								 
								 for(Integer i = 0 ; i < lqList_old.size() ; i++){
									LoreQuestion lq = lqList_old.get(i);
									Map<String,Object> map_d = new HashMap<String,Object>();
									Integer lqId_old = lq.getId();
									Integer status = 1;
									for(Integer j = 0 ; j < sdList_pre_right.size() ; j++){
										StudyDetailInfo sd = sdList_pre_right.get(j);
										if(lqId_old.equals(sd.getLoreQuestion().getId())){//做对过
											status = 0;
											break;
										}
									}
									if(status.equals(1)){//过滤掉已做正确的题
										map_d.put("lqId", lqId_old);
										Integer quoteLoreId = lq.getLoreInfo().getId();
										String[] loreInfo = CommonTools.getRealLoreInfo(quoteLoreId, loreId);//当前题库的指定版本下的知识点
										map_d.put("currLoreId", Integer.parseInt(loreInfo[0]));
										map_d.put("currLoreName", loreInfo[1]);
										String lqType = lq.getQueType();
										map_d.put("lqType", lqType);
										map_d.put("loreType", lq.getLoreTypeName());
										map_d.put("lqSub", lq.getQueSub());
										map_d.put("answerA", lq.getA());
										map_d.put("answerB", lq.getB());
										map_d.put("answerC", lq.getC());
										map_d.put("answerD", lq.getD());
										map_d.put("answerE", lq.getE());
										map_d.put("answerF", lq.getF());
										Integer completeStatus = 0;//做题状态(0:已做,1:未做)
										if(sdList_new.size() > 0){
											for(Integer k = 0 ; k < sdList_new.size() ; k++){
												StudyDetailInfo sd_new = sdList_new.get(k);
												if(lqId_old.equals(sd_new.getLoreQuestion().getId())){
													completeStatus = 1;
													map_d.put("answerA", sd_new.getA());
													map_d.put("answerB", sd_new.getB());
													map_d.put("answerC", sd_new.getC());
													map_d.put("answerD", sd_new.getD());
													map_d.put("answerE", sd_new.getE());
													map_d.put("answerF", sd_new.getF());
													map_d.put("realAnswer", sd_new.getRealAnswer());
													map_d.put("myAnswer", sd_new.getMyAnswer());
													map_d.put("result", sd_new.getResult());//答案对错0:错，1:对
													map_d.put("questionStep", sd_new.getQueStep());
													Integer lqsId = lq.getQueTips();
													if(lqsId > 0){
														LoreQuestionSubInfo lqs = lqm.getEntityByLqsId(lqsId);
														if(lqs != null){
															map_d.put("tipsTitle", lqs.getLqsTitle());
															map_d.put("tipsContent", lqs.getLqsContent());
														}
													}
													break;
												}
											}
										}else{//在做错题是在旁边显示出提示信息
											Integer lqsId = lq.getQueTips();
											if(lqsId > 0){
												LoreQuestionSubInfo lqs = lqm.getEntityByLqsId(lqsId);
												if(lqs != null){
													map_d.put("tipsTitle", lqs.getLqsTitle());
													map_d.put("tipsContent", lqs.getLqsContent());
												}
											}
										}
										map_d.put("completeStatus", completeStatus);//做题状态(0:未做,1:已做)
										if(completeStatus.equals(0)){
											if(lqType.equals("单选题") || lqType.equals("多选题") || lqType.equals("判断题") || lqType.equals("填空题") || lqType.equals("问答题")){
												map_d.put("answerNum", 1);
											}else{//填空选择题
												map_d.put("answerNum", lq.getQueAnswer().split(",").length);
											}
										}
										if(lqType.equals("填空题") || lqType.equals("问答题")){
											map_d.put("realAnswer", lq.getQueAnswer());
										}
										list_d.add(map_d);
									}
								}
							 }
						 }
						 map.put("lqList", list_d);
					}
				}
			}
		}else{//表示是新挑战
			if(loreId > 0){
				List<StudyMapInfo> smList = smm.listInfoByOpt(stuId, loreId);
				if(smList.size() > 0){//存在学习记录
					if(smList.get(0).getCurrStep().equals(4)){
						List<Object> list_d = new ArrayList<Object>();
						Integer quoteLoreId = CommonTools.getQuoteLoreId(loreId);
						if(quoteLoreId > 0){
							List<LoreQuestion> lqList = lqm.listInfoByLoreId(quoteLoreId, loreType, 0);
							if(lqList.size() > 0){
								for(LoreQuestion lq : lqList){
									Map<String,Object> map_d = new HashMap<String,Object>();
									map_d.put("lqId", lq.getId());
									String[] loreInfo = CommonTools.getRealLoreInfo(quoteLoreId, loreId);//当前题库的指定版本下的知识点
									map_d.put("currLoreId", Integer.parseInt(loreInfo[0]));
									map_d.put("currLoreName", loreInfo[1]);
									String lqType = lq.getQueType();
									map_d.put("lqType", lqType);
									map_d.put("loreType", lq.getLoreTypeName());
									map_d.put("lqSub", lq.getQueSub());
									map_d.put("answerA", lq.getA());
									map_d.put("answerB", lq.getB());
									map_d.put("answerC", lq.getC());
									map_d.put("answerD", lq.getD());
									map_d.put("answerE", lq.getE());
									map_d.put("answerF", lq.getF());
									map_d.put("completeStatus", 0);//做题状态(0:未做,1:已做)
									Integer lqsId = lq.getQueTips();
									if(lqsId > 0){
										LoreQuestionSubInfo lqs = lqm.getEntityByLqsId(lqsId);
										if(lqs != null){
											map_d.put("tipsTitle", lqs.getLqsTitle());
											map_d.put("tipsContent", lqs.getLqsContent());
										}
									}
									if(lqType.equals("单选题") || lqType.equals("多选题") || lqType.equals("判断题") || lqType.equals("填空题") || lqType.equals("问答题")){
										map_d.put("answerNum", 1);
									}else{//填空选择题
										map_d.put("answerNum", lq.getQueAnswer().split(",").length);
									}
									if(lqType.equals("填空题") || lqType.equals("问答题")){
										map_d.put("realAnswer", lq.getQueAnswer());
									}
									list_d.add(map_d);
								}
							}
						}
						map.put("lqList", list_d);
					}else{
						msg = "jtsfNotStart";//解题示范未学习
					}
				}else{
					msg = "jtsfNotStart";//解题示范未学习
				}
			}
		}
		map.put("result", msg);
		if(msg.equals("success")){
			map.put("loreName", loreName);
			map.put("loreTaskName", loreTaskName);
		}
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 导向五步学习法介绍页面
	 * @author wm
	 * @date 2019-6-12 上午10:45:49
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward goStepStudyPage(ActionMapping mapping ,ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		Integer loreId = CommonTools.getFinalInteger("loreId", request);
		Integer studyLogId = CommonTools.getFinalInteger("studyLogId", request);
		String loreType = Transcode.unescape_new1("loreType", request);
		String nextLoreIdArray = CommonTools.getFinalStr("nextLoreIdArray",request);
		request.setAttribute("loreId", loreId);
		request.setAttribute("studyLogId", studyLogId);
		request.setAttribute("loreType", loreType);
		request.setAttribute("nextLoreIdArray", nextLoreIdArray);
		return mapping.findForward("stepStudyPage");
	}
	
	/**
	 * 获取五步学习法内容
	 * @author wm
	 * @date 2019-6-11 下午04:54:35
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getStepQuestionData(ActionMapping mapping ,ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		LoreQuestionManager lqm = (LoreQuestionManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_QUESTION_INFO);
		LoreInfoManager lm = (LoreInfoManager)AppFactory.instance(null).getApp(Constants.WEB_LORE_INFO);
		StudyLogManager slm = (StudyLogManager)AppFactory.instance(null).getApp(Constants.WEB_STUDY_LOG_INFO);
		Integer studyLogId = CommonTools.getFinalInteger("studyLogId", request);
		Integer currLoreId = CommonTools.getFinalInteger("nextLoreIdArray",request);//当前知识点编号
		String loreTypeName = request.getParameter("loreTypeName");//五步类型（video,guide,loreList,example,practice）
		String loreTaskName = Transcode.unescape_new1("loreTaskName",request);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "error";
		Integer quoteLoreId = 0;//基础知识点编号
		if(currLoreId > 0){
			quoteLoreId = CommonTools.getQuoteLoreId(currLoreId);
			if(loreTypeName.equals("video")){//视频讲解
				List<LoreQuestion> lqList = lqm.listInfoByLoreId(quoteLoreId, "知识讲解", 0);
				if(lqList.size() > 0){
					msg = "success";
					map.put("sourceDetail", lqList.get(0).getQueAnswer());
					map.put("loreTypeName", loreTypeName);
				}else{
					msg = "noInfo";
				}
			}else if(loreTypeName.equals("guide") || loreTypeName.equals("loreList")){//点拨指导||知识清单
				if(loreTypeName.equals("guide")){
					loreTypeName = "点拨指导";
				}else{
					loreTypeName = "知识清单";
				}
				List<LoreQuestion> lqList = lqm.listInfoByLoreId(quoteLoreId, loreTypeName, 0);
				if(lqList.size() > 0){
					Integer lqId = lqList.get(0).getId();
					List<LoreQuestionSubInfo> lqsList = lqm.listLQSInfoByLqId(lqId, "");
					if(lqsList.size() > 0){
						msg = "success";
						List<Object> list_d = new ArrayList<Object>();
						for(LoreQuestionSubInfo lqs : lqsList){
							String loreType = lqs.getLoreTypeName();
							Map<String,Object> map_d = new HashMap<String,Object>();
							map_d.put("loreType", loreType);
							map_d.put("lqsTitle", lqs.getLqsTitle());
							map_d.put("lqsContent", lqs.getLqsContent());
							list_d.add(map_d);
						}
						map.put("sourceDetail", list_d);
						map.put("loreTypeName", loreTypeName);
					}else{
						msg = "noInfo";
					}
				}
			}else if(loreTypeName.equals("example")){//解题示范
				loreTypeName = "解题示范";
				List<LoreQuestion> lqList = lqm.listInfoByLoreId(quoteLoreId, loreTypeName, 0);
				if(lqList.size() > 0){
					msg = "success";
					List<Object> list_d = new ArrayList<Object>();
					for(LoreQuestion lq : lqList){
						Map<String,Object> map_d = new HashMap<String,Object>();
						map_d.put("queSub", lq.getQueSub());
						map_d.put("queAnswer", lq.getQueAnswer());
						map_d.put("queResolution", lq.getQueResolution());
						list_d.add(map_d);
					}
					map.put("sourceDetail", list_d);
					map.put("loreTypeName", loreTypeName);
				}else{
					msg = "noInfo";
				}
			}else if(loreTypeName.equals("practice")){//巩固训练
				loreTypeName = "巩固训练";
				if(currLoreId > 0){
					List<LoreQuestion> lqList = lqm.listInfoByLoreId(quoteLoreId, loreTypeName, 0);
					if(lqList.size() > 0){
						msg = "success";
						List<Object> list_d = new ArrayList<Object>();
						for(LoreQuestion lq : lqList){
							Map<String,Object> map_d = new HashMap<String,Object>();
							map_d.put("lqId", lq.getId());
							LoreInfo lore = lm.getEntityById(currLoreId);
							map_d.put("currLoreId", currLoreId);
							map_d.put("currLoreName", lore.getLoreName());
							String lqType = lq.getQueType();
							map_d.put("loreType", lq.getLoreTypeName());
							map_d.put("lqType", lqType);
							map_d.put("lqSub", lq.getQueSub());
							map_d.put("answerA", lq.getA());
							map_d.put("answerB", lq.getB());
							map_d.put("answerC", lq.getC());
							map_d.put("answerD", lq.getD());
							map_d.put("answerE", lq.getE());
							map_d.put("answerF", lq.getF());
							if(lqType.equals("单选题") || lqType.equals("多选题") || lqType.equals("判断题") || lqType.equals("填空题") || lqType.equals("问答题")){
								map_d.put("answerNum", 1);
							}else{//填空选择题
								map_d.put("answerNum", lq.getQueAnswer().split(",").length);
							}
							if(lqType.equals("填空题") || lqType.equals("问答题")){
								map_d.put("realAnswer", lq.getQueAnswer());
							}
							//巩固训练全部都需要重新做
							list_d.add(map_d);
						}
						map.put("sourceDetail", list_d);
						map.put("loreTypeName", loreTypeName);
					}else{
						msg = "noInfo";
					}
				}
			}
		}
		if(msg.equals("success")){
			if(studyLogId > 0){
				StudyLogInfo sl = slm.getEntityById(studyLogId);
				if(sl != null){
					map.put("loreId", sl.getLoreInfo().getId());
					map.put("studyLogId", studyLogId);
					map.put("loreTaskName", loreTaskName);
					map.put("initLoreName", sl.getLoreInfo().getLoreName());
				}
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 将答题记录插入数据库
	 * @author wm
	 * @date 2019-6-12 上午11:15:21
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward insertStudyInfo(ActionMapping mapping ,ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		UserManager um = (UserManager)AppFactory.instance(null).getApp(Constants.WEB_USER_INFO);
		StudyLogManager slm = (StudyLogManager)AppFactory.instance(null).getApp(Constants.WEB_STUDY_LOG_INFO);
		LoreQuestionManager lqm = (LoreQuestionManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_QUESTION_INFO);
		StudyDetailManager sdm = (StudyDetailManager) AppFactory.instance(null).getApp(Constants.WEB_STUDY_DETAIL_INFO);
		StudyStuTjInfoManager ssm = (StudyStuTjInfoManager)AppFactory.instance(null).getApp(Constants.WEB_STUDY_STU_TJ_INFO);
		StudyAllTjInfoManager sam = (StudyAllTjInfoManager)AppFactory.instance(null).getApp(Constants.WEB_STUDY_ALL_TJ_INFO);
		StudyTaskManager stm = (StudyTaskManager)AppFactory.instance(null).getApp(Constants.WEB_STUDY_TASK_INFO);
		NetTeacherStudentManager ntsm = (NetTeacherStudentManager)AppFactory.instance(null).getApp(Constants.WEB_NET_TEACHER_STUDENT);
		Integer loreId = CommonTools.getFinalInteger("loreId", request);//最初的知识点
		Integer studyLogId = CommonTools.getFinalInteger("studyLogId", request);
//		Integer currentLoreId = CommonTools.getFinalInteger("currentLoreId", request);//当前做题的知识点编号
		String answerOptionArrayStr = Transcode.unescape_new1("answerOptionArray", request);//做题时的答案选项
		Integer questionStep = CommonTools.getFinalInteger("questionStep",request);//题的顺序
		String dataBaseAnswerChar = "";
		String myAnswer = Transcode.unescape_new1("myAnswer", request);//我的答案
		Integer lqId = CommonTools.getFinalInteger("lqId", request);
		String loreTaskName = Transcode.unescape_new1("loreTaskName",request);
		Integer logType = CommonTools.getFinalInteger("logType", request);//1:自学（默认不传）,2:家庭作业
		Integer currentLoreId = 0;
		if(logType.equals(0)){
			logType = 1;
		}
		String currDate = CurrentTime.getStringDate();
		Integer result = 0;//0为错,1为对
		boolean flag = false;
		String[] answerOptionStr = {"","","","","",""};
		String currTime = CurrentTime.getCurrentTime();
		Integer stuId = CommonTools.getLoginUserId(request);
		Integer subjectId = 0;
		Integer step = 1;
		Integer stepComplete = 0;//0:未做完题，1:做完题
		Integer isFinish = 1;//0:未做过,1:未通过，2:通过
		Integer oldStepMoney = 0;//该阶段得分
		Integer access = 0;//本阶段完成情况
		String msg = "error";
		if(lqId > 0 && stuId > 0){
			if(CommonTools.getDiffDays(stuId) <= 0){//会员到期，不能继续使用
				msg = "accountDue";
			}else{
				LoreQuestion lq = lqm.getEntityByLqId(lqId);
				if(lq != null){
					msg = "success";
					String realAnser = lq.getQueAnswer();
					String queType = lq.getQueType();
					String queType2 = lq.getQueType2();
					String loreType = lq.getLoreTypeName();
					Integer quoteLoreId = lq.getLoreInfo().getId();
					String[] loreInfo = CommonTools.getRealLoreInfo(quoteLoreId, loreId);//当前题库的指定版本下的知识点
					currentLoreId = Integer.parseInt(loreInfo[0]);
					if(loreType.equals("巩固训练")){//巩固训练不检查
						if(studyLogId > 0){//存在学习记录
							StudyLogInfo sl = slm.getEntityById(studyLogId);
							logType = sl.getLogType();
							subjectId = sl.getSubject().getId();
						}else{
							subjectId = lq.getLoreInfo().getChapter().getEducation().getGradeSubject().getSubject().getId();
						}
					}else{
						if(studyLogId > 0){//存在学习记录
							StudyLogInfo sl = slm.getEntityById(studyLogId);
							logType = sl.getLogType();
							subjectId = sl.getSubject().getId();
							if(sl.getIsFinish().equals(2)){
								studyLogId = 0;
							}
//							flag = sdm.checkSuccCompleteFlag(studyLogId, lqId, currDate);
//							if(!flag){//当当前题错误或者没做时
//								//判断上次答题时间（正常答题不会出现，防止URL提交）
//								List<StudyDetailInfo> sdList = sdm.listLastInfoByLogId(studyLogId, 0, "");
//								String lastAddTime = sdList.get(0).getAddTime();
//								long diffS = CurrentTime.compareDateTime(currTime, lastAddTime);//相差毫秒数
//								if(diffS > 5000){//间隔5秒以上
//									//允许做题
//									flag = false;
//								}else{
//									flag = false;
//								}
//							}
						}else{
							subjectId = lq.getLoreInfo().getChapter().getEducation().getGradeSubject().getSubject().getId();
						}
					}
					if(!flag){
						if(queType.equals("问答题") || queType.equals("填空题")){
							if(myAnswer.indexOf("正确") >= 0){
								result = 1;
							}else{
								result = 0;
							}
							dataBaseAnswerChar = answerOptionArrayStr;
						}else{
							JSONArray answerOptionArray = JSON.parseArray(answerOptionArrayStr);
							String[] dataBaseAnswerArray = realAnser.split(",");
							for(int j = 0; j < dataBaseAnswerArray.length; j++){
								for(int i = 0; i < answerOptionArray.size(); i++){
									String answerOption = answerOptionArray.get(i).toString();
									if(answerOption.indexOf("Module/commonJs/ueditor/jsp/lore") >= 0){
										//表示答案选项是图片--截取前面的路径
										answerOption = answerOption.replace("Module/commonJs/ueditor/jsp/lore/", "");
									}
									if(dataBaseAnswerArray[j].equals(answerOption)){
										dataBaseAnswerChar += Convert.NumberConvertBigChar(i)+",";
										break;
									}
								}
							}
							dataBaseAnswerChar = dataBaseAnswerChar.substring(0, dataBaseAnswerChar.length() - 1);
							if(queType.equals("多选题")){
								flag = false;//顺序可以不同
							}else{//不是多选题答案需要完全匹配(填空选择题、单选题，判断题)
								flag = true;
							}
							if(flag){//完全匹配
								if(dataBaseAnswerChar.equals(myAnswer)){
									result = 1;
								}else{
									result = 0;
								}
							}else{//答案顺序可以不同
								String[] myAnserArray = myAnswer.split(",");
								String[] realAnswerArray = dataBaseAnswerChar.split(",");
								String newMyAnswer = CommonTools.arraySort(myAnserArray);//排序后我的答案
								String newRealAnswer = CommonTools.arraySort(realAnswerArray);//排序后后台正确答案
								if(newMyAnswer.equals(newRealAnswer)){
									result = 1;
								}else{
									result = 0;
								}
							}
							for(int i = 0 ; i < answerOptionArray.size() ; i++){
								answerOptionStr[i] = answerOptionArray.get(i).toString();
							}
						}
						boolean updateFlag = false;
						/**
						 * step1:向log表中插入一条数据
						 * 插入数据前需要先查询有无该记录。
						 * 如果没有，执行插入
						 * 如果有：分为两步
						 * 1:如果stepComplete为1（做完该阶段所有题，者修改step、stepComplete、isFinish的值）
						 * 2:如果stepComplete为0（未做完该阶段所有题）
						 * 2.1：如果这是access为1，表示需要进入下一级关联知识点（修改access的值为1）
						 */
						if(studyLogId.equals(0)){//新开的题
							List<StudyLogInfo> slList = slm.listLastStudyInfoByOpt(stuId, loreId, logType);
							if(slList.size() > 0){
								if(!slList.get(0).getIsFinish().equals(2)){
									studyLogId = slList.get(0).getId();
								}
							}
						}
						if(studyLogId.equals(0)){//新开的题
							if(result.equals(1)){//题做对了
								oldStepMoney++;
							}
							//获取当前学生正在绑定的指定学科的导师
							Integer ntId = 0;
							Integer subId = lq.getLoreInfo().getChapter().getEducation().getGradeSubject().getSubject().getId();
							NetTeacherStudent nts = ntsm.getValidInfoByOpt(stuId, subId);
							if(nts != null){
								ntId = nts.getNetTeacherInfo().getId();
							}
							studyLogId = slm.addStudyLog(stuId, ntId, loreId, subjectId, step, stepComplete, isFinish, "", oldStepMoney, access, currTime, 1, logType);
							if(studyLogId > 0){
								updateFlag = true;
							}
						}else{//表示是继续之前的未做完的题（修改log里面的记录）
							StudyLogInfo  sl = slm.getEntityById(studyLogId);
							if(sl != null){
								//获取该记录里面最后一道题
								if(sdm.listLastInfoByLogId(studyLogId, 0, "").get(0).getLoreQuestion().getId().equals(lqId)){
									updateFlag = false;
//										System.out.println("不能重复提交");
									msg = "reSubmit";//不能重复提交
								}else{
									updateFlag = true;
									step = sl.getStep();
									oldStepMoney = sl.getCurrentGold();
									isFinish = sl.getIsFinish();
									access = sl.getAccess();
									if(result == 1){
										oldStepMoney++;
									}
									stepComplete = sl.getStepComplete();
									if(isFinish == 1){//表示本知识点还未完成
										if(stepComplete == 1){//表示该阶段已经完成
											//将step增加1，stepComplete重新清0
											step++;
											stepComplete = 0;
											oldStepMoney = 0;
										}else{//当前级关联知识点已经完成access的值为1
											if(access == 1){//表示该阶段知识点已经完成，需要进入下一级关联知识点学习
												
											}
										}
									}
									if(loreType.equals("巩固训练")){//巩固训练不检查
										//巩固训练只修改access状态为31，只要不是最后的提交，下次还会继续停留在学习当前知识点的状态
										//当currentLoreId和知识点的loreId(本知识点)
										if(currentLoreId.equals(loreId)){
											//表示是本知识点的学习（巩固训练）
											updateFlag = slm.updateStudyLog(studyLogId, 4, 0, -1, -1, 31, currTime);
										}else{
											updateFlag = slm.updateStudyLog(studyLogId, 3, 0, -1, -1, 31, currTime);
										}
									}else{
										updateFlag = slm.updateStudyLog(studyLogId, step, stepComplete, isFinish, oldStepMoney, 0, currTime);
									}
								}
							}
						}
						if(studyLogId > 0 && updateFlag == true){
							//step2:向detail表中插入一条记录并查看该studyLogId+loreQuestionId有没有记录
							List<StudyDetailInfo> sdList = sdm.listInfoByOpt(studyLogId, lqId);
							Integer questionNumber_curr = sdList.size() + 1;
							sdm.addStudyDetail(stuId, studyLogId, currentLoreId, lqId, questionStep, dataBaseAnswerChar, 
									result, currTime, myAnswer, answerOptionStr[0], answerOptionStr[1], answerOptionStr[2]
									,answerOptionStr[3], answerOptionStr[4], answerOptionStr[5], questionNumber_curr);
							//此处增加学生学习、全平台统计---------------------start
							//A：统计学生学习情况---------------------
							//根据学习时间、学生编号、学科编号获取学生学习统计信息
							boolean liaojieSuccFlag = false;
							boolean lijieSuccFlag = false;
							boolean yySuccFlag = false;
							if(result.equals(1)){
								if(queType2.equals("了解")){
									liaojieSuccFlag = true;
								}else if(queType2.equals("理解")){
									lijieSuccFlag = true;
								}else if(queType2.equals("应用")){
									yySuccFlag = true;
								}
							}
							List<StudyStuTjInfo> sstList = ssm.listInfoByOption(stuId, subjectId, currDate);
							if(sstList.size() > 0){//已存在
								ssm.updateSSTById(sstList.get(0).getId(), queType2, liaojieSuccFlag, lijieSuccFlag, yySuccFlag);
							}else{//不存在
								ssm.addSST(currDate, stuId ,subjectId, queType2, result);
							}
							
							//B:统计全平台学习情况---------------------
							List<StudyAllTjInfo> satList = sam.listInfoByOption(currDate, subjectId);
							if(satList.size() > 0){//已存在
								sam.updateSATById(satList.get(0).getId(), queType2, liaojieSuccFlag, lijieSuccFlag, yySuccFlag);
							}else{//不存在
								sam.addSAT(currDate, subjectId, queType2, result);
							}
							//---------------------end
							
							//修改用户中的经验和金币数（答一题增加1经验，答对一题再增加1经验）
							Integer coin = 0;
							Integer experience = Constants.EXPERIENCE;
							if(result.equals(1)){
								if(loreType.equals("巩固训练")){//巩固训练不计分
									coin = 0;
									experience = 0;
								}else{
									coin = Constants.COIN;
									experience += Constants.EXPERIENCE;
								}
							}
							
							//插入数据到studyTask表中
							//获取指定学习记录的学习任务描述
							if(!loreType.equals("巩固训练")){//巩固训练不增加至studyTask
								List<StudyTaskInfo>  stList = stm.listTaskInfoByOpt(studyLogId, "");
								Integer number = 0;
								if(stList.size() == 0){//第一次做题
									number = 1;
									stm.addSTask(number, studyLogId, loreTaskName, coin);
								}else{//表示已经有该题的答题记录了
									List<StudyTaskInfo>  stList_1 = stm.listTaskInfoByOpt(studyLogId, loreTaskName);
									if(stList_1.size() > 0){
										//修改指定studyLogId的记录的金币和时间
										Integer stId = stList_1.get(0).getId();
										stm.updateCoinInfoById(stId, coin);
									}else{//新一级知识点的题（需要新增答题学习任务）
										number = stList.get(0).getTaskNum() + 1;
										stm.addSTask(number, studyLogId, loreTaskName, coin);
									}
								}
								um.updateUser(stuId, coin, experience, 0, 0);
							}
						}
					}else{
						msg = "timeErr";//间隔5秒以上
					}
				}
			}
		}
		Map<String,Object> map = new HashMap<String,Object>();
		map.put("result", msg);
		map.put("studyResult", result);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 当前阶段完成(最后提交动作)，修改指定logId的stepComplete,isFinish状态
	 * @author wm
	 * @date 2019-6-13 下午09:47:16 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward updateLogStatus(ActionMapping mapping ,ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		StudyLogManager slm = (StudyLogManager)AppFactory.instance(null).getApp(Constants.WEB_STUDY_LOG_INFO);
		SchoolManager sm = (SchoolManager) AppFactory.instance(null).getApp(Constants.WEB_SCHOOL_INFO);
		LoreQuestionManager lqm = (LoreQuestionManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_QUESTION_INFO);
		StudyDetailManager sdm = (StudyDetailManager) AppFactory.instance(null).getApp(Constants.WEB_STUDY_DETAIL_INFO);
		RelationZdResultManager rzrm = (RelationZdResultManager)AppFactory.instance(null).getApp(Constants.WEB_RELATION_ZD_RESULT_INFO);
		StudyStuQfTjManager tjm = (StudyStuQfTjManager)AppFactory.instance(null).getApp(Constants.WEB_STUDY_STU_QFTJ_INFO);
		UserClassInfoManager ucm = (UserClassInfoManager)AppFactory.instance(null).getApp(Constants.WEB_USER_CLASS_INFO);
		Integer stuId = CommonTools.getLoginUserId(request);
		String submitType = CommonTools.getFinalStr("type", request);//巩固训练传study，zdxzd(针对性诊断),againzd(再次诊断)
		String currentStepLoreIdStr = CommonTools.getFinalStr("currentStepLoreArray", request);
		Integer loreId = CommonTools.getFinalInteger("loreId", request);//最初的知识点
		Integer studyLogId = CommonTools.getFinalInteger("studyLogId", request);
		Integer step = CommonTools.getFinalInteger("step", request);
		Integer access = CommonTools.getFinalInteger("access", request);
		Integer currentLoreId = CommonTools.getFinalInteger("currentLoreId", request);
		Integer stepComplete = CommonTools.getFinalInteger("stepComplete", request);
		Integer isFinish = CommonTools.getFinalInteger("isFinish", request);
		Integer logType = CommonTools.getFinalInteger("logType", request);//1:自学（默认不传）,2:家庭作业
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "error";
		if(logType.equals(0)){
			logType = 1;
		}
		Integer access_final = access;//刚从页面传递过来的access
		String[] currentStepLoreArray = null;
		//以下是勤奋报告统计用变量
		Integer subId = 0;
		Integer schoolId = 0;
		String prov = "";
		String city = "";
		String county = "";
		Integer schoolType = 0;
		String gradeName = "";
		Integer classId = 0;
		if(!currentStepLoreIdStr.equals("")){
			currentStepLoreArray = currentStepLoreIdStr.split(",");
		}
		if(CommonTools.getDiffDays(stuId) <= 0){
			msg = "accountDue";
		}else{
			StudyLogInfo sl = null;
			if(studyLogId.equals(0)){//初次做题
				//通过userId+loreId获取最后一条答题详情
				List<StudyLogInfo> slLastList = slm.listLastStudyInfoByOpt(stuId, loreId, logType);
				if(slLastList.size() > 0){//之前做过，但没提交
					studyLogId = slLastList.get(0).getId();
					subId = slLastList.get(0).getSubject().getId();
					schoolId = slLastList.get(0).getUser().getSchoolId();
					if(schoolId != 0){
						List<School> sList = sm.listInfoById(schoolId);
						if(sList.size() > 0){
							prov = sList.get(0).getProv();
							city = sList.get(0).getCity();
							county = sList.get(0).getCounty();
							schoolType = sList.get(0).getSchoolType();
							List<UserClassInfo> ucList = ucm.listInfoByOpt_1(stuId, Constants.STU_ROLE_ID);
							if(ucList.size() > 0){
								ClassInfo c = ucList.get(0).getClassInfo();
								gradeName = Convert.dateConvertGradeName(c.getBuildeClassDate());//当前学生的真实年级
								classId = c.getId();
								msg = "success";
							}
						}
					}
				}else{
					//不存在这样的情况(没做题点最后提交)
				}
			}else{//不是第一次做题
				sl = slm.getEntityById(studyLogId);
				if(sl != null){
					subId = sl.getSubject().getId();
					schoolId = sl.getUser().getSchoolId();
					if(schoolId != 0){
						List<School> sList = sm.listInfoById(schoolId);
						if(sList.size() > 0){
							prov = sList.get(0).getProv();
							city = sList.get(0).getCity();
							county = sList.get(0).getCounty();
							schoolType = sList.get(0).getSchoolType();
							List<UserClassInfo> ucList = ucm.listInfoByOpt_1(stuId, Constants.STU_ROLE_ID);
							if(ucList.size() > 0){
								ClassInfo c = ucList.get(0).getClassInfo();
								gradeName = Convert.dateConvertGradeName(c.getBuildeClassDate());//当前学生的真实年级
								classId = c.getId();
								msg = "success";
							}
						}
					}
				}
			}
			if(msg.equals("success")){
				//最后提交的任务数都+1
				if(studyLogId > 0){
					sl = slm.getEntityById(studyLogId);
				}
				
				if(step == 3){//再次诊断时用
					if(access == 1){//再次诊断全部正确
						String studyPath = CommonTools.getLorePath(loreId, "study")[0];
						String studyPath_new = CommonTools.getCurrentStudyPath_new(studyPath, currentLoreId);
						if(studyPath_new.split(":").length == 1){//表示当前知识点是本知识点之前的最后一个知识点
							//表示当前层完成，stepComplete = 1;
							stepComplete = 0;
							access = 2;
							step = 4;
							isFinish = 1;
						}
					}else{
						//根据学习记录编号获取有无当前知识点指定类型的答题记录
						List<StudyDetailInfo>  sdList = sdm.listInfoByOpt(studyLogId, currentLoreId, "再次诊断");
						if(submitType.equals("study")){//5步学习法学完后的提交动作
							if(sdList.size() > 0){//表示之前有做过的答题记录
								access = 3;
							}else{//表示还没做过再次诊断
								access = 4;
							}
						}else{//再次诊断时(针对性诊断的step不可能是3)再次诊断后的提交动作
							if(sdList.size() > 0){//表示之前有做过的答题记录
								access = 31;
							}else{//表示还没做过再次诊断
								access = 41;
							}
						}
					}
				}else if(step == 4){
					if(access == 1){//再次诊断全部正确
						stepComplete = 1;
						access = 1;
						step = 5;
						isFinish = 2;//全部结束
					}else{
						//根据学习记录编号获取有无当前知识点指定类型的答题记录
						List<StudyDetailInfo>  sdList = sdm.listInfoByOpt(studyLogId, currentLoreId, "再次诊断");
						if(submitType.equals("study")){//5步学习法学完后的提交动作
							if(sdList.size() > 0){//表示之前有做过的答题记录
								access = 3;
							}else{//表示还没做过再次诊断
								access = 4;
							}
						}else{//再次诊断时(针对性诊断的step不可能是3)再次诊断后的提交动作
							if(sdList.size() > 0){//表示之前有做过的答题记录
								access = 31;
							}else{//表示还没做过再次诊断
								access = 41;
							}
						}
					}
				}
				Integer oneZdSuccNum = 0;//一次性通过总数(本知识点)--第一次针对性诊断时第一个知识点(本知识点)完全正确+1
				Integer oneZdFailNum = 0;//一次性未通过总数(本知识点)--第一次针对性诊断时第一个知识点(本知识点)部分正确+1
				Integer againXxSuccNum = 0;//再次诊断(学习)通过(本知识点)--第一知识点(本知识点)再次诊断全部通过+1
				Integer againXxFailNum = 0;//再次诊断(学习)未通过(本知识点)--第一知识点(本知识点)第一次再次诊断未全部正确+1
				Integer noRelateNum = 0;//未溯源个数--第一次针对性诊断时第一个知识点(本知识点)部分正确+1
				Integer relateZdFailNum = 0;//关联诊断未通过(关联知识点)--关联知识点未通过初次诊断+1(如果N级关联知识点为3个知识点那就加3)
				Integer relateXxSuccNum = 0;//关联学习通过(关联知识点)--关联知识点通过再次诊断+1
				Integer relateXxFailNum = 0;//关联未学习通过(关联知识点)--关联知识点针对性诊断未通过时+1(如果N级关联知识点为3个知识点那就加3)
				String rate = "";//转化率
				
				//step=0表示不对step进行修改
				Integer step_curr = 0;
				Integer zdxzd_flag = 0;//默认为未通过
				Integer zczd_flag = 0;//默认为未通过
				Integer taskNumber = 1;
				if(sl != null){
					step_curr = sl.getStep();
					taskNumber = sl.getTaskNumber() + 1;
				}
				boolean flag = slm.updateLogStatus(studyLogId, step, stepComplete, isFinish, access, taskNumber);
				//插入或者修改记录（relationZdResult表）
				if(submitType.equals("study")){
					//关联知识点的五步学习
					if(step_curr.equals(3)){//关联知识点的五步学习和再次诊断
						RelationZdResult rzr = rzrm.getEntityByOpt(studyLogId, currentLoreId);
						if(rzr != null){//表示不是第一次五步学习（五步学习完成并studyTimes+1）
							//-1为不更新
							rzrm.updateEntity(rzr.getId(), -1, 1, -1, rzr.getStudyTimes() + 1, -1);
						}else{//表示第一次五步学习
							rzrm.addRZR(studyLogId, currentLoreId, -1, 1, -1, 1, 0);
						}
					}
				}else{//关联知识点的针对性诊断和再次诊断
					if(step_curr.equals(2)){//表示在针对性诊断
						for(int i = 0 ; i < currentStepLoreArray.length ; i++){
							Integer loreId_curr = Integer.parseInt(currentStepLoreArray[i]);//当前层的知识点编号
								//针对性诊断只有一次，不需要修改，直接插入记录
								if(access_final.equals(1)){//当前层全部正确
									zdxzd_flag = access_final;
								}else{//未完全正确或全部错误
									zdxzd_flag = 0;
								}
								//-1为未做
							rzrm.addRZR(studyLogId, loreId_curr, zdxzd_flag, -1, -1, 0, 0);
						}
						if(currentStepLoreArray.length > 0){//其他学校不参与
							if(access_final.equals(1)){//当前关联知识点的针对性诊断全部正确
								noRelateNum = 0;//关联诊断完成，未溯源个数不加
							}else{//未完全正确或全部错误
								relateZdFailNum = currentStepLoreArray.length;//当前层有多少个知识点就有多少个关联知识点针对性诊断未通过次数
								relateXxFailNum = currentStepLoreArray.length;
							}
						}
					}else if(step_curr.equals(3)){//关联知识点再次诊断
						if(access_final.equals(1)){//当前层全部正确
							zczd_flag = 1;
							relateXxSuccNum = 1;//关联学习通过+1
							relateXxFailNum = 0;//关联学习未通过不加
						}else{//未完全正确或全部错误
							zczd_flag = 0;
						}
						RelationZdResult rzr = rzrm.getEntityByOpt(studyLogId, Integer.parseInt(currentStepLoreArray[0]));
						if(rzr != null){//表示不是第一次再次诊断（再次诊断完成并zczdTimes+1）
							rzrm.updateEntity(rzr.getId(), -1, -1, zczd_flag, -1, rzr.getZczdTimes()+1);
						}else{//表示第一次再次诊断
							rzrm.addRZR(studyLogId, currentLoreId, -1, -1, zczd_flag, -1, 1);
						}
					}else if(step_curr.equals(4)){//最后一个关联知识点再次诊断完全正确后step会变成4
						Integer current_lore_id = Integer.parseInt(currentStepLoreArray[0]);
						if(!current_lore_id.equals(loreId)){
							//最后一个关联知识点全部正确后，access肯定为1
							RelationZdResult rzr = rzrm.getEntityByOpt(studyLogId, current_lore_id);
							if(rzr != null){//表示不是第一次再次诊断（再次诊断完成并zczdTimes+1）
								zczd_flag = 1;
								rzrm.updateEntity(rzr.getId(), -1, -1, zczd_flag, -1, rzr.getZczdTimes()+1);
							}
							relateXxSuccNum = 1;//关联学习通过+1
							relateXxFailNum = 0;//关联学习未通过不加
						}
						
					}
				}
				
				if(isFinish.equals(2)){
					//表示该知识点完成，更新result(系统评价)
					//统计该知识点做了多少题
					List<StudyDetailInfo> sdList = sdm.listInfoByLogId(studyLogId);
					//查询该学习记录一共做了多少题
					Integer allQuestionNumber = sdList.size();
					//获取真实的知识点（通用版本）编号
					Integer loreId_old = sl.getLoreInfo().getMainLoreId();
					//获取真实知识点有多少针对性诊断的题（如过allQuestionNumber等于）
					Integer zdxQuestionNumber = lqm.listInfoByLoreId(loreId_old, "针对性诊断", 0).size();
					//获取其中所有做对的题的数量
					Integer allQuestionRightNumber = sdm.listCurrentRightInfoByLogId(studyLogId, 0, "").size();//1:正确
					String systemProposal = "";
					Integer rightRate = 0;
					String gdProposal = "";
					if(zdxQuestionNumber.equals(allQuestionRightNumber)){//表示一次性通过
						systemProposal = "共"+zdxQuestionNumber+"道题，您全做对了，正确率100%";
						rightRate = 100;
						//增加一次性通过次数，其他全部不修改
						oneZdSuccNum = 1;
					}else{//表示是经过五部学习法学习后通过
						//肯定之前再次诊断学习未通过时+1
						againXxSuccNum = 1;//再次诊断学习通过+1
						rightRate = allQuestionRightNumber * 100 / allQuestionNumber ;
						if(rightRate >= 80){
							gdProposal = "您已经完成了该知识点，证明您对本知识掌握的很好，做的非常棒。(";
						}else{
							gdProposal = "通过诊断，发现您对该知识点的了解、理解、应用有问题。通过助学网的学习，您已经成功解决了这些问题并掌握了，以后再做本知识点时请注意，避免出错。(";
						}
						systemProposal = gdProposal + "共"+allQuestionNumber+"道题，您做对了"+allQuestionRightNumber+"道，正确率"+rightRate+"%)";
					}
					flag = slm.addSysAssess(studyLogId, systemProposal, rightRate);
				}else{//未通过
					if(currentLoreId.equals(loreId)){//当前知识点是主知识点时
						//主知识点的针对性诊断未通过
						//两种情况
						if(submitType.equals("zdxzd")){//本知识点初次诊断时
							oneZdFailNum = 1;
							noRelateNum = 1;
						}else if(submitType.equals("againzd")){//本知识点再次诊断时
							//获取本知识点已做过的再次诊断题
							List<StudyDetailInfo> sdList = sdm.listInfoByOpt(studyLogId, currentLoreId, "再次诊断");
							//获取本知识点所有再次诊断题
							List<LoreQuestion> lqList = lqm.listInfoByLoreId(CommonTools.getQuoteLoreId(currentLoreId), "再次诊断", 0);
							if(lqList.size() == sdList.size()){//表示是第一次做再次诊断题未全部正确提交时
								againXxFailNum = 1;
							}
						}
					}
				}
				if(schoolId != 0){//其他学校不参与统计
					//获取指定学生，指定科目，指定日期的勤奋报告统计信息
					StudyStuQfTjInfo qftj = tjm.getEntityByOpt(stuId, subId, CurrentTime.getStringDate());
					if(qftj != null){
						//修改
						Integer fmNum = qftj.getOneZdFailNum() + oneZdFailNum + qftj.getRelateZdFailNum() + relateZdFailNum;//一次性未通过总数+关联诊断未通过
						Integer againXxSuccNum_real = qftj.getAgainXxSuccNum() + againXxSuccNum;//再次诊断学习通过次数
						if(fmNum > 0 && againXxSuccNum_real > 0){
							rate = Convert.convertInputNumber_1(againXxSuccNum_real * 100.0  / fmNum) + "%";//转换率
						}
						tjm.updateTjInfoById(qftj.getId(), oneZdSuccNum, oneZdFailNum, againXxSuccNum, againXxFailNum, noRelateNum, relateZdFailNum, relateXxSuccNum, relateXxFailNum, rate);
					}else{
						//增加
						Integer fmNum = oneZdFailNum + relateZdFailNum;//一次性通过总数+关联诊断未通过
						Integer againXxSuccNum_real = againXxSuccNum;//再次诊断学习通过次数
						if(fmNum > 0 && againXxSuccNum_real > 0){
							rate = Convert.convertInputNumber_1(againXxSuccNum_real * 100.0  / fmNum) + "%";//转换率
						}
						tjm.addQFTJ(stuId, subId, oneZdSuccNum, oneZdFailNum, againXxSuccNum, againXxFailNum, noRelateNum, relateZdFailNum, relateXxSuccNum, relateXxFailNum, rate, prov, city, county, schoolType, schoolId, gradeName, classId);
					}
				}
				if(flag){
					msg = "success";
				}
			}
		}
		
		map.put("result", msg);
		map.put("studyLogId", studyLogId);
		map.put("loreId", loreId);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
}