/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.zsd.action.onlineStudy;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.zsd.factory.AppFactory;
import com.zsd.module.ClassInfo;
import com.zsd.module.Edition;
import com.zsd.module.GradeSubject;
import com.zsd.module.StuSubjectEduInfo;
import com.zsd.module.Subject;
import com.zsd.module.UserClassInfo;
import com.zsd.service.EditionManager;
import com.zsd.service.GradeSubjectManager;
import com.zsd.service.StuSubjectEduManager;
import com.zsd.service.UserClassInfoManager;
import com.zsd.tools.CommonTools;
import com.zsd.tools.Convert;
import com.zsd.util.Constants;

/** 
 * MyEclipse Struts
 * Creation date: 05-24-2019
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class OnlineStudyAction extends DispatchAction {
	
	/**
	 * 导向在线学习页面
	 * @author wm
	 * @date 2019-5-24 下午04:22:51
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward goStudyPage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		return mapping.findForward("studyPage");
	}
	
	/**
	 * 获取在线学习初始数据
	 * @author wm
	 * @date 2019-5-24 下午04:23:41
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getInitStudyData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		GradeSubjectManager gsm = (GradeSubjectManager) AppFactory.instance(null).getApp(Constants.WEB_GRADE_SUBJECT_INFO);
		UserClassInfoManager ucm = (UserClassInfoManager)AppFactory.instance(null).getApp(Constants.WEB_USER_CLASS_INFO);
		EditionManager em = (EditionManager) AppFactory.instance(null).getApp(Constants.WEB_EDITION_INFO);
		StuSubjectEduManager ssem = (StuSubjectEduManager)  AppFactory.instance(null).getApp(Constants.WEB_STU_SUB_EDU_INFO);
		Integer userId = CommonTools.getLoginUserId(request);
		Integer roleId = CommonTools.getLoginRoleId(request);
		String roleName = CommonTools.getLoginRoleName(request);
		Map<String,Object> map = new HashMap<String,Object>();
		Integer subId = CommonTools.getFinalInteger("subId", request);//学科编号
		Integer ediId = CommonTools.getFinalInteger("ediId", request);//出版社编号
		String msg = "error";
		if(roleName.equals("学生")){
			msg = "success";
			Integer gradeNumber = 0;
			String gradeName = "";
			//获取该学生的班级,然后获取该班级所在年级
			UserClassInfo uc = ucm.getEntityByOpt(userId, roleId);
			ClassInfo c = null;
			if(uc != null){
				c = uc.getClassInfo();
				gradeNumber = Convert.dateConvertGradeNumber(c.getBuildeClassDate());
				if(gradeNumber > 0){
					if(gradeNumber > 12){
						gradeNumber = 12;
					}
					gradeName = Convert.NunberConvertChinese(gradeNumber);
					//获取当前年级对应的学科列表
					List<GradeSubject>  gsList = gsm.listSpecInfoByGname(gradeName);
					List<Object> list_sub = new ArrayList<Object>();
					List<Object> list_edi = new ArrayList<Object>();
					if(gsList.size() > 0){
						for(Iterator<GradeSubject> it = gsList.iterator() ; it.hasNext();){
							Subject sub = it.next().getSubject();
							Map<String,Object> map_d = new HashMap<String,Object>();
							map_d.put("subId", sub.getId());
							map_d.put("subName", sub.getSubName());
							map_d.put("subImg", sub.getImgUrl());
							list_sub.add(map_d);
						}
						map.put("subList", list_sub);
						//获取出版社列表
						List<Edition> ediList = em.listInfoByShowStatus(0, 0);
						for(Iterator<Edition> it = ediList.iterator() ; it.hasNext();){
							Edition edi = it.next();
							Map<String,Object> map_d = new HashMap<String,Object>();
							map_d.put("ediId", edi.getId());
							map_d.put("ediName", edi.getEdiName());
							list_edi.add(map_d);
						}
						map.put("ediList", list_edi);
						//获取学生学科教材信息列表
						if(subId.equals(0)){
							subId = 2;//默认为数学
						}
						if(ediId.equals(0)){//初始化加载
							
						}else{//页面手动选择
							
						}
						List<StuSubjectEduInfo> sseList = ssem.listInfoByOpt(userId, subId);
						if(sseList.size() > 0){
							for(StuSubjectEduInfo sse : sseList){
								
							}
						}else{
							msg = "noEduInfo";//mei
						}
					}else{
						msg = "error";
					}
				}else{
					msg = "error";
				}
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
}